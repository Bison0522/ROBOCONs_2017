

Microchip Technology PIC18 LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sun Oct 01 18:42:58 2017

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1,group=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    40  0000                     
    41                           ; Version 1.41
    42                           ; Generated 25/01/2017 GMT
    43                           ; 
    44                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution.
    58                           ; 
    59                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    60                           ;        software without specific prior written permission.
    61                           ; 
    62                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    63                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    64                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    65                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    66                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    67                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    68                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    69                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    70                           ; 
    71                           ; 
    72                           ; Code-generator required, PIC18F4520 Definitions
    73                           ; 
    74                           ; SFR Addresses
    75  0000                     
    76                           	psect	idataCOMRAM
    77  001274                     __pidataCOMRAM:
    78                           	opt stack 0
    79                           
    80                           ;initializer for main@F3048
    81  001274  0F                 	db	15
    82                           
    83                           ;initializer for main@F3044
    84  001275  0F                 	db	15
    85  0000                     _TXREG	set	4013
    86  0000                     _TXSTAbits	set	4012
    87  0000                     _SPBRG	set	4015
    88  0000                     _RCSTA	set	4011
    89  0000                     _TXSTA	set	4012
    90  0000                     _TRISCbits	set	3988
    91  0000                     _INTCON2bits	set	4081
    92  0000                     _RCONbits	set	4048
    93  0000                     _T0CON	set	4053
    94  0000                     _SSPADD	set	4040
    95  0000                     _SSPCON2	set	4037
    96  0000                     _SSPCON1	set	4038
    97  0000                     _SSPSTAT	set	4039
    98  0000                     _LATE	set	3981
    99  0000                     _LATD	set	3980
   100  0000                     _LATC	set	3979
   101  0000                     _LATB	set	3978
   102  0000                     _LATA	set	3977
   103  0000                     _TRISE	set	3990
   104  0000                     _TRISD	set	3989
   105  0000                     _TRISC	set	3988
   106  0000                     _TRISB	set	3987
   107  0000                     _TRISA	set	3986
   108  0000                     _SSPSTATbits	set	4039
   109  0000                     _SSPBUF	set	4041
   110  0000                     _PIR1bits	set	3998
   111  0000                     _SSPCON2bits	set	4037
   112  0000                     _LATBbits	set	3978
   113  0000                     _TMR0L	set	4054
   114  0000                     _TMR0H	set	4055
   115  0000                     _INTCONbits	set	4082
   116                           
   117                           ; #config settings
   118  0000                     
   119                           	psect	cinit
   120  0011CA                     __pcinit:
   121                           	opt stack 0
   122  0011CA                     start_initialization:
   123                           	opt stack 0
   124  0011CA                     __initialization:
   125                           	opt stack 0
   126                           
   127                           ; Initialize objects allocated to COMRAM (2 bytes)
   128                           ; load TBLPTR registers with __pidataCOMRAM
   129  0011CA  0E74               	movlw	low __pidataCOMRAM
   130  0011CC  6EF6               	movwf	tblptrl,c
   131  0011CE  0E12               	movlw	high __pidataCOMRAM
   132  0011D0  6EF7               	movwf	tblptrh,c
   133  0011D2  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   134  0011D4  6EF8               	movwf	tblptru,c
   135  0011D6  0009               	tblrd		*+	;fetch initializer
   136  0011D8  CFF5 F058          	movff	tablat,__pdataCOMRAM
   137  0011DC  0009               	tblrd		*+	;fetch initializer
   138  0011DE  CFF5 F059          	movff	tablat,__pdataCOMRAM+1
   139                           
   140                           ; Clear objects allocated to COMRAM (18 bytes)
   141  0011E2  EE00  F046         	lfsr	0,__pbssCOMRAM
   142  0011E6  0E12               	movlw	18
   143  0011E8                     clear_0:
   144  0011E8  6AEE               	clrf	postinc0,c
   145  0011EA  06E8               	decf	wreg,f,c
   146  0011EC  E1FD               	bnz	clear_0
   147  0011EE                     end_of_initialization:
   148                           	opt stack 0
   149  0011EE                     __end_of__initialization:
   150                           	opt stack 0
   151  0011EE  905A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   152  0011F0  925A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   153  0011F2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   154  0011F4  6EF8               	movwf	tblptru,c
   155  0011F6  0100               	movlb	0
   156  0011F8  EF09  F000         	goto	_main	;jump to C main() function
   157                           tblptru	equ	0xFF8
   158                           tblptrh	equ	0xFF7
   159                           tblptrl	equ	0xFF6
   160                           tablat	equ	0xFF5
   161                           postinc0	equ	0xFEE
   162                           wreg	equ	0xFE8
   163                           
   164                           	psect	bssCOMRAM
   165  000046                     __pbssCOMRAM:
   166                           	opt stack 0
   167  000046                     timeout@time:
   168                           	opt stack 0
   169  000046                     	ds	4
   170  00004A                     _cnt0:
   171                           	opt stack 0
   172  00004A                     	ds	4
   173  00004E                     _out:
   174                           	opt stack 0
   175  00004E                     	ds	4
   176  000052                     _time:
   177                           	opt stack 0
   178  000052                     	ds	3
   179  000055                     _error:
   180                           	opt stack 0
   181  000055                     	ds	2
   182  000057                     main@F3046:
   183                           	opt stack 0
   184  000057                     	ds	1
   185                           tblptru	equ	0xFF8
   186                           tblptrh	equ	0xFF7
   187                           tblptrl	equ	0xFF6
   188                           tablat	equ	0xFF5
   189                           postinc0	equ	0xFEE
   190                           wreg	equ	0xFE8
   191                           
   192                           	psect	dataCOMRAM
   193  000058                     __pdataCOMRAM:
   194                           	opt stack 0
   195  000058                     main@F3048:
   196                           	opt stack 0
   197  000058                     	ds	1
   198  000059                     main@F3044:
   199                           	opt stack 0
   200  000059                     	ds	1
   201                           tblptru	equ	0xFF8
   202                           tblptrh	equ	0xFF7
   203                           tblptrl	equ	0xFF6
   204                           tablat	equ	0xFF5
   205                           postinc0	equ	0xFEE
   206                           wreg	equ	0xFE8
   207                           
   208                           	psect	cstackBANK0
   209  000080                     __pcstackBANK0:
   210                           	opt stack 0
   211  000080                     main@Jyro:
   212                           	opt stack 0
   213                           
   214                           ; 3 bytes @ 0x0
   215  000080                     	ds	3
   216  000083                     main@cnt:
   217                           	opt stack 0
   218                           
   219                           ; 2 bytes @ 0x3
   220  000083                     	ds	2
   221  000085                     main@tmp:
   222                           	opt stack 0
   223                           
   224                           ; 1 bytes @ 0x5
   225  000085                     	ds	1
   226  000086                     _main$1218:
   227                           	opt stack 0
   228                           
   229                           ; 3 bytes @ 0x6
   230  000086                     	ds	3
   231  000089                     _main$1219:
   232                           	opt stack 0
   233                           
   234                           ; 3 bytes @ 0x9
   235  000089                     	ds	3
   236  00008C                     main@before:
   237                           	opt stack 0
   238                           
   239                           ; 3 bytes @ 0xC
   240  00008C                     	ds	3
   241  00008F                     main@turn_value:
   242                           	opt stack 0
   243                           
   244                           ; 2 bytes @ 0xF
   245  00008F                     	ds	2
   246  000091                     main@W_data2:
   247                           	opt stack 0
   248                           
   249                           ; 1 bytes @ 0x11
   250  000091                     	ds	1
   251  000092                     main@jyro:
   252                           	opt stack 0
   253                           
   254                           ; 2 bytes @ 0x12
   255  000092                     	ds	2
   256  000094                     main@JYRO:
   257                           	opt stack 0
   258                           
   259                           ; 2 bytes @ 0x14
   260  000094                     	ds	2
   261  000096                     main@MAE:
   262                           	opt stack 0
   263                           
   264                           ; 3 bytes @ 0x16
   265  000096                     	ds	3
   266  000099                     main@J_deg:
   267                           	opt stack 0
   268                           
   269                           ; 3 bytes @ 0x19
   270  000099                     	ds	3
   271  00009C                     main@W_data:
   272                           	opt stack 0
   273                           
   274                           ; 1 bytes @ 0x1C
   275  00009C                     	ds	1
   276  00009D                     main@deg:
   277                           	opt stack 0
   278                           
   279                           ; 3 bytes @ 0x1D
   280  00009D                     	ds	3
   281  0000A0                     main@R_data:
   282                           	opt stack 0
   283                           
   284                           ; 1 bytes @ 0x20
   285  0000A0                     	ds	1
   286                           tblptru	equ	0xFF8
   287                           tblptrh	equ	0xFF7
   288                           tblptrl	equ	0xFF6
   289                           tablat	equ	0xFF5
   290                           postinc0	equ	0xFEE
   291                           wreg	equ	0xFE8
   292                           
   293                           	psect	cstackCOMRAM
   294  000001                     __pcstackCOMRAM:
   295                           	opt stack 0
   296  000001                     ??_Timer0:
   297  000001                     
   298                           ; 1 bytes @ 0x0
   299  000001                     	ds	14
   300  00000F                     ?___wmul:
   301                           	opt stack 0
   302  00000F                     ?___ftpack:
   303                           	opt stack 0
   304  00000F                     ?___fttol:
   305                           	opt stack 0
   306  00000F                     Timeout@a:
   307                           	opt stack 0
   308  00000F                     timeout@v:
   309                           	opt stack 0
   310  00000F                     ___wmul@multiplier:
   311                           	opt stack 0
   312  00000F                     ___ftpack@arg:
   313                           	opt stack 0
   314  00000F                     ___fttol@f1:
   315                           	opt stack 0
   316  00000F                     serial_baud@baudrate:
   317                           	opt stack 0
   318                           
   319                           ; 4 bytes @ 0xE
   320  00000F                     	ds	1
   321  000010                     i2c_write@addr:
   322                           	opt stack 0
   323  000010                     i2c_read@addr:
   324                           	opt stack 0
   325  000010                     serial_write@sendData:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0xF
   329  000010                     	ds	1
   330  000011                     ___wmul@multiplicand:
   331                           	opt stack 0
   332                           
   333                           ; 2 bytes @ 0x10
   334  000011                     	ds	1
   335  000012                     ??_serial_write:
   336  000012                     ___ftpack@exp:
   337                           	opt stack 0
   338  000012                     i2c_write@data:
   339                           	opt stack 0
   340  000012                     i2c_read@data:
   341                           	opt stack 0
   342                           
   343                           ; 2 bytes @ 0x11
   344  000012                     	ds	1
   345  000013                     ??_serial_baud:
   346  000013                     ??___fttol:
   347  000013                     ___ftpack@sign:
   348                           	opt stack 0
   349  000013                     ___wmul@product:
   350                           	opt stack 0
   351                           
   352                           ; 2 bytes @ 0x12
   353  000013                     	ds	1
   354  000014                     ??___ftpack:
   355  000014                     i2c_write@num:
   356                           	opt stack 0
   357  000014                     i2c_read@num:
   358                           	opt stack 0
   359  000014                     serial_write@result:
   360                           	opt stack 0
   361                           
   362                           ; 2 bytes @ 0x13
   363  000014                     	ds	1
   364  000015                     ??_i2c_read:
   365  000015                     i2c_write@start:
   366                           	opt stack 0
   367                           
   368                           ; 1 bytes @ 0x14
   369  000015                     	ds	1
   370  000016                     i2c_write@stop:
   371                           	opt stack 0
   372                           
   373                           ; 1 bytes @ 0x15
   374  000016                     	ds	1
   375  000017                     ??_i2c_write:
   376  000017                     ?___altoft:
   377                           	opt stack 0
   378  000017                     ?___awtoft:
   379                           	opt stack 0
   380  000017                     ?___ftneg:
   381                           	opt stack 0
   382  000017                     ___awtoft@c:
   383                           	opt stack 0
   384  000017                     ___ftneg@f1:
   385                           	opt stack 0
   386  000017                     ___altoft@c:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x16
   390  000017                     	ds	1
   391  000018                     ___fttol@sign1:
   392                           	opt stack 0
   393                           
   394                           ; 1 bytes @ 0x17
   395  000018                     	ds	1
   396  000019                     ___fttol@lval:
   397                           	opt stack 0
   398                           
   399                           ; 4 bytes @ 0x18
   400  000019                     	ds	1
   401  00001A                     ?___ftadd:
   402                           	opt stack 0
   403  00001A                     i2c_write@ans:
   404                           	opt stack 0
   405  00001A                     i2c_read@ans:
   406                           	opt stack 0
   407  00001A                     ___awtoft@sign:
   408                           	opt stack 0
   409  00001A                     ___ftadd@f1:
   410                           	opt stack 0
   411                           
   412                           ; 3 bytes @ 0x19
   413  00001A                     	ds	1
   414  00001B                     ??___altoft:
   415  00001B                     i2c_write@cnt:
   416                           	opt stack 0
   417  00001B                     i2c_read@cnt:
   418                           	opt stack 0
   419                           
   420                           ; 2 bytes @ 0x1A
   421  00001B                     	ds	2
   422  00001D                     ___fttol@exp1:
   423                           	opt stack 0
   424  00001D                     ___ftadd@f2:
   425                           	opt stack 0
   426                           
   427                           ; 3 bytes @ 0x1C
   428  00001D                     	ds	1
   429  00001E                     ?___awdiv:
   430                           	opt stack 0
   431  00001E                     ___awdiv@dividend:
   432                           	opt stack 0
   433                           
   434                           ; 2 bytes @ 0x1D
   435  00001E                     	ds	1
   436  00001F                     ___altoft@exp:
   437                           	opt stack 0
   438                           
   439                           ; 1 bytes @ 0x1E
   440  00001F                     	ds	1
   441  000020                     ??___ftadd:
   442  000020                     ___altoft@sign:
   443                           	opt stack 0
   444  000020                     ___awdiv@divisor:
   445                           	opt stack 0
   446                           
   447                           ; 2 bytes @ 0x1F
   448  000020                     	ds	2
   449  000022                     ___awdiv@counter:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0x21
   453  000022                     	ds	1
   454  000023                     ___awdiv@sign:
   455                           	opt stack 0
   456  000023                     ___ftadd@sign:
   457                           	opt stack 0
   458                           
   459                           ; 1 bytes @ 0x22
   460  000023                     	ds	1
   461  000024                     ___ftadd@exp2:
   462                           	opt stack 0
   463  000024                     ___awdiv@quotient:
   464                           	opt stack 0
   465                           
   466                           ; 2 bytes @ 0x23
   467  000024                     	ds	1
   468  000025                     ___ftadd@exp1:
   469                           	opt stack 0
   470                           
   471                           ; 1 bytes @ 0x24
   472  000025                     	ds	1
   473  000026                     ?___ftmul:
   474                           	opt stack 0
   475  000026                     ?___ftsub:
   476                           	opt stack 0
   477  000026                     ___ftge@ff1:
   478                           	opt stack 0
   479  000026                     ___ftmul@f1:
   480                           	opt stack 0
   481  000026                     ___ftsub@f1:
   482                           	opt stack 0
   483                           
   484                           ; 3 bytes @ 0x25
   485  000026                     	ds	3
   486  000029                     ___ftge@ff2:
   487                           	opt stack 0
   488  000029                     ___ftmul@f2:
   489                           	opt stack 0
   490  000029                     ___ftsub@f2:
   491                           	opt stack 0
   492                           
   493                           ; 3 bytes @ 0x28
   494  000029                     	ds	3
   495  00002C                     ??___ftmul:
   496  00002C                     ??___ftge:
   497                           
   498                           ; 1 bytes @ 0x2B
   499  00002C                     	ds	3
   500  00002F                     ___ftmul@exp:
   501                           	opt stack 0
   502                           
   503                           ; 1 bytes @ 0x2E
   504  00002F                     	ds	1
   505  000030                     ___ftmul@f3_as_product:
   506                           	opt stack 0
   507                           
   508                           ; 3 bytes @ 0x2F
   509  000030                     	ds	3
   510  000033                     ___ftmul@cntr:
   511                           	opt stack 0
   512                           
   513                           ; 1 bytes @ 0x32
   514  000033                     	ds	1
   515  000034                     ___ftmul@sign:
   516                           	opt stack 0
   517                           
   518                           ; 1 bytes @ 0x33
   519  000034                     	ds	1
   520  000035                     ?___ftdiv:
   521                           	opt stack 0
   522  000035                     ___ftdiv@f1:
   523                           	opt stack 0
   524                           
   525                           ; 3 bytes @ 0x34
   526  000035                     	ds	3
   527  000038                     ___ftdiv@f2:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x37
   531  000038                     	ds	3
   532  00003B                     ??___ftdiv:
   533                           
   534                           ; 1 bytes @ 0x3A
   535  00003B                     	ds	3
   536  00003E                     ___ftdiv@cntr:
   537                           	opt stack 0
   538                           
   539                           ; 1 bytes @ 0x3D
   540  00003E                     	ds	1
   541  00003F                     ___ftdiv@f3:
   542                           	opt stack 0
   543                           
   544                           ; 3 bytes @ 0x3E
   545  00003F                     	ds	3
   546  000042                     ___ftdiv@exp:
   547                           	opt stack 0
   548                           
   549                           ; 1 bytes @ 0x41
   550  000042                     	ds	1
   551  000043                     ___ftdiv@sign:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x42
   555  000043                     	ds	1
   556  000044                     ??_main:
   557                           
   558                           ; 1 bytes @ 0x43
   559  000044                     	ds	2
   560                           tblptru	equ	0xFF8
   561                           tblptrh	equ	0xFF7
   562                           tblptrl	equ	0xFF6
   563                           tablat	equ	0xFF5
   564                           postinc0	equ	0xFEE
   565                           wreg	equ	0xFE8
   566                           
   567 ;;
   568 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   569 ;;
   570 ;; *************** function _main *****************
   571 ;; Defined at:
   572 ;;		line 230 in file "../my_master.c"
   573 ;; Parameters:    Size  Location     Type
   574 ;;		None
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  deg             3   29[BANK0 ] float 
   577 ;;  J_deg           3   25[BANK0 ] float 
   578 ;;  MAE             3   22[BANK0 ] float 
   579 ;;  before          3   12[BANK0 ] float 
   580 ;;  Jyro            3    0[BANK0 ] float 
   581 ;;  JYRO            2   20[BANK0 ] int 
   582 ;;  jyro            2   18[BANK0 ] int 
   583 ;;  turn_value      2   15[BANK0 ] int 
   584 ;;  cnt             2    3[BANK0 ] int 
   585 ;;  R_data          1   32[BANK0 ] unsigned char [1]
   586 ;;  W_data          1   28[BANK0 ] unsigned char [1]
   587 ;;  W_data2         1   17[BANK0 ] unsigned char [1]
   588 ;;  tmp             1    5[BANK0 ] unsigned char 
   589 ;; Return value:  Size  Location     Type
   590 ;;                  1    wreg      void 
   591 ;; Registers used:
   592 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   593 ;; Tracked objects:
   594 ;;		On entry : 0/0
   595 ;;		On exit  : 0/0
   596 ;;		Unchanged: 0/0
   597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   598 ;;      Params:         0       0       0       0       0       0       0
   599 ;;      Locals:         0      33       0       0       0       0       0
   600 ;;      Temps:          2       0       0       0       0       0       0
   601 ;;      Totals:         2      33       0       0       0       0       0
   602 ;;Total ram usage:       35 bytes
   603 ;; Hardware stack levels required when called:    4
   604 ;; This function calls:
   605 ;;		___awdiv
   606 ;;		___awtoft
   607 ;;		___ftadd
   608 ;;		___ftdiv
   609 ;;		___ftge
   610 ;;		___ftmul
   611 ;;		___ftneg
   612 ;;		___ftsub
   613 ;;		___fttol
   614 ;;		___wmul
   615 ;;		_i2c_read
   616 ;;		_i2c_write
   617 ;;		_init
   618 ;;		_serial_write
   619 ;;		_timer_reset
   620 ;;		_timer_start
   621 ;;		_timer_stop
   622 ;; This function is called by:
   623 ;;		Startup code after reset
   624 ;; This function uses a non-reentrant model
   625 ;;
   626                           
   627                           	psect	text0
   628  000012                     __ptext0:
   629                           	opt stack 0
   630  000012                     _main:
   631                           	opt stack 27
   632                           
   633                           ;my_master.c: 231: init();
   634                           
   635                           ;incstack = 0
   636  000012  ECD9  F007         	call	_init	;wreg free
   637                           
   638                           ;my_master.c: 232: char tmp = 0;
   639  000016  0E00               	movlw	0
   640  000018  0100               	movlb	0	; () banked
   641  00001A  6F85               	movwf	main@tmp& (0+255),b
   642                           
   643                           ; BSR set to: 0
   644                           ;my_master.c: 233: int jyro = 0,
   645  00001C  0E00               	movlw	0
   646  00001E  0100               	movlb	0	; () banked
   647  000020  6F93               	movwf	(main@jyro+1)& (0+255),b
   648  000022  0E00               	movlw	0
   649  000024  6F92               	movwf	main@jyro& (0+255),b
   650                           
   651                           ; BSR set to: 0
   652                           ;my_master.c: 234: JYRO = 0,
   653  000026  0E00               	movlw	0
   654  000028  0100               	movlb	0	; () banked
   655  00002A  6F95               	movwf	(main@JYRO+1)& (0+255),b
   656  00002C  0E00               	movlw	0
   657  00002E  6F94               	movwf	main@JYRO& (0+255),b
   658                           
   659                           ; BSR set to: 0
   660                           ;my_master.c: 235: cnt = 0,
   661  000030  0E00               	movlw	0
   662  000032  0100               	movlb	0	; () banked
   663  000034  6F84               	movwf	(main@cnt+1)& (0+255),b
   664  000036  0E00               	movlw	0
   665  000038  6F83               	movwf	main@cnt& (0+255),b
   666                           
   667                           ; BSR set to: 0
   668                           ;my_master.c: 236: turn_value = 0;
   669  00003A  0E00               	movlw	0
   670  00003C  0100               	movlb	0	; () banked
   671  00003E  6F90               	movwf	(main@turn_value+1)& (0+255),b
   672  000040  0E00               	movlw	0
   673  000042  6F8F               	movwf	main@turn_value& (0+255),b
   674                           
   675                           ; BSR set to: 0
   676                           ;my_master.c: 237: float J_deg = 0,
   677  000044  0E00               	movlw	0
   678  000046  0100               	movlb	0	; () banked
   679  000048  6F99               	movwf	main@J_deg& (0+255),b
   680  00004A  0E00               	movlw	0
   681  00004C  0100               	movlb	0	; () banked
   682  00004E  6F9A               	movwf	(main@J_deg+1)& (0+255),b
   683  000050  0E00               	movlw	0
   684  000052  0100               	movlb	0	; () banked
   685  000054  6F9B               	movwf	(main@J_deg+2)& (0+255),b
   686                           
   687                           ; BSR set to: 0
   688                           ;my_master.c: 238: MAE = 0,
   689  000056  0E00               	movlw	0
   690  000058  0100               	movlb	0	; () banked
   691  00005A  6F96               	movwf	main@MAE& (0+255),b
   692  00005C  0E00               	movlw	0
   693  00005E  0100               	movlb	0	; () banked
   694  000060  6F97               	movwf	(main@MAE+1)& (0+255),b
   695  000062  0E00               	movlw	0
   696  000064  0100               	movlb	0	; () banked
   697  000066  6F98               	movwf	(main@MAE+2)& (0+255),b
   698                           
   699                           ; BSR set to: 0
   700                           ;my_master.c: 239: deg = 0;
   701  000068  0E00               	movlw	0
   702  00006A  0100               	movlb	0	; () banked
   703  00006C  6F9D               	movwf	main@deg& (0+255),b
   704  00006E  0E00               	movlw	0
   705  000070  0100               	movlb	0	; () banked
   706  000072  6F9E               	movwf	(main@deg+1)& (0+255),b
   707  000074  0E00               	movlw	0
   708  000076  0100               	movlb	0	; () banked
   709  000078  6F9F               	movwf	(main@deg+2)& (0+255),b
   710                           
   711                           ; BSR set to: 0
   712                           ;my_master.c: 240: double before = 0,
   713  00007A  0E00               	movlw	0
   714  00007C  0100               	movlb	0	; () banked
   715  00007E  6F8C               	movwf	main@before& (0+255),b
   716  000080  0E00               	movlw	0
   717  000082  0100               	movlb	0	; () banked
   718  000084  6F8D               	movwf	(main@before+1)& (0+255),b
   719  000086  0E00               	movlw	0
   720  000088  0100               	movlb	0	; () banked
   721  00008A  6F8E               	movwf	(main@before+2)& (0+255),b
   722                           
   723                           ; BSR set to: 0
   724                           ;my_master.c: 241: Jyro = 0;
   725  00008C  0E00               	movlw	0
   726  00008E  0100               	movlb	0	; () banked
   727  000090  6F80               	movwf	main@Jyro& (0+255),b
   728  000092  0E00               	movlw	0
   729  000094  0100               	movlb	0	; () banked
   730  000096  6F81               	movwf	(main@Jyro+1)& (0+255),b
   731  000098  0E00               	movlw	0
   732  00009A  0100               	movlb	0	; () banked
   733  00009C  6F82               	movwf	(main@Jyro+2)& (0+255),b
   734                           
   735                           ; BSR set to: 0
   736                           ;my_master.c: 242: char W_data[1] = {0x0F},
   737  00009E  C059  F09C         	movff	main@F3044,main@W_data
   738                           
   739                           ; BSR set to: 0
   740                           ;my_master.c: 243: R_data[1] = {0};
   741  0000A2  C057  F0A0         	movff	main@F3046,main@R_data
   742                           
   743                           ; BSR set to: 0
   744                           ;my_master.c: 244: i2c_write(0b01101010, W_data, 1, 1, 0);
   745  0000A6  0E00               	movlw	0
   746  0000A8  6E11               	movwf	i2c_write@addr+1,c
   747  0000AA  0E6A               	movlw	106
   748  0000AC  6E10               	movwf	i2c_write@addr,c
   749  0000AE  0E9C               	movlw	low main@W_data
   750  0000B0  6E12               	movwf	i2c_write@data,c
   751  0000B2  0E00               	movlw	high main@W_data
   752  0000B4  6E13               	movwf	i2c_write@data+1,c
   753  0000B6  0E01               	movlw	1
   754  0000B8  6E14               	movwf	i2c_write@num,c
   755  0000BA  0E01               	movlw	1
   756  0000BC  6E15               	movwf	i2c_write@start,c
   757  0000BE  0E00               	movlw	0
   758  0000C0  6E16               	movwf	i2c_write@stop,c
   759  0000C2  EC28  F004         	call	_i2c_write	;wreg free
   760                           
   761                           ;my_master.c: 245: i2c_read(0b01101010, R_data, 1);
   762  0000C6  0E00               	movlw	0
   763  0000C8  6E11               	movwf	i2c_read@addr+1,c
   764  0000CA  0E6A               	movlw	106
   765  0000CC  6E10               	movwf	i2c_read@addr,c
   766  0000CE  0EA0               	movlw	low main@R_data
   767  0000D0  6E12               	movwf	i2c_read@data,c
   768  0000D2  0E00               	movlw	high main@R_data
   769  0000D4  6E13               	movwf	i2c_read@data+1,c
   770  0000D6  0E01               	movlw	1
   771  0000D8  6E14               	movwf	i2c_read@num,c
   772  0000DA  EC8E  F003         	call	_i2c_read	;wreg free
   773                           
   774                           ;my_master.c: 246: if(R_data[0] == 0xD4){
   775  0000DE  0ED4               	movlw	212
   776  0000E0  0100               	movlb	0	; () banked
   777  0000E2  19A0               	xorwf	main@R_data& (0+255),w,b
   778  0000E4  A4D8               	btfss	status,2,c
   779  0000E6  D007               	goto	l166
   780                           
   781                           ; BSR set to: 0
   782                           ;my_master.c: 247: LATBbits.LB1 = 1;
   783  0000E8  828A               	bsf	3978,1,c	;volatile
   784                           
   785                           ; BSR set to: 0
   786                           ;my_master.c: 248: serial_write(R_data[0]);
   787  0000EA  C0A0  F010         	movff	main@R_data,serial_write@sendData
   788  0000EE  6A11               	clrf	serial_write@sendData+1,c
   789  0000F0  EC66  F008         	call	_serial_write	;wreg free
   790                           
   791                           ;my_master.c: 249: }
   792  0000F4  D003               	goto	l2979
   793  0000F6                     l166:
   794                           
   795                           ; BSR set to: 0
   796                           ;my_master.c: 250: else {
   797                           ;my_master.c: 251: LATBbits.LB1 = 0;
   798  0000F6  928A               	bcf	3978,1,c	;volatile
   799                           
   800                           ;my_master.c: 252: return;
   801  0000F8  EF07  F000         	goto	start
   802  0000FC                     l2979:
   803                           
   804                           ;my_master.c: 253: }
   805                           ;my_master.c: 254: W_data[0] = 0x20;
   806  0000FC  0E20               	movlw	32
   807  0000FE  0100               	movlb	0	; () banked
   808  000100  6F9C               	movwf	main@W_data& (0+255),b
   809                           
   810                           ; BSR set to: 0
   811                           ;my_master.c: 255: char W_data2[1] = {0x0F};
   812  000102  C058  F091         	movff	main@F3048,main@W_data2
   813                           
   814                           ; BSR set to: 0
   815                           ;my_master.c: 256: i2c_write(0b01101010, W_data, 1, 1, 0);
   816  000106  0E00               	movlw	0
   817  000108  6E11               	movwf	i2c_write@addr+1,c
   818  00010A  0E6A               	movlw	106
   819  00010C  6E10               	movwf	i2c_write@addr,c
   820  00010E  0E9C               	movlw	low main@W_data
   821  000110  6E12               	movwf	i2c_write@data,c
   822  000112  0E00               	movlw	high main@W_data
   823  000114  6E13               	movwf	i2c_write@data+1,c
   824  000116  0E01               	movlw	1
   825  000118  6E14               	movwf	i2c_write@num,c
   826  00011A  0E01               	movlw	1
   827  00011C  6E15               	movwf	i2c_write@start,c
   828  00011E  0E00               	movlw	0
   829  000120  6E16               	movwf	i2c_write@stop,c
   830  000122  EC28  F004         	call	_i2c_write	;wreg free
   831                           
   832                           ;my_master.c: 257: i2c_write(0b01101010, W_data2, 1, 0, 1);
   833  000126  0E00               	movlw	0
   834  000128  6E11               	movwf	i2c_write@addr+1,c
   835  00012A  0E6A               	movlw	106
   836  00012C  6E10               	movwf	i2c_write@addr,c
   837  00012E  0E91               	movlw	low main@W_data2
   838  000130  6E12               	movwf	i2c_write@data,c
   839  000132  0E00               	movlw	high main@W_data2
   840  000134  6E13               	movwf	i2c_write@data+1,c
   841  000136  0E01               	movlw	1
   842  000138  6E14               	movwf	i2c_write@num,c
   843  00013A  0E00               	movlw	0
   844  00013C  6E15               	movwf	i2c_write@start,c
   845  00013E  0E01               	movlw	1
   846  000140  6E16               	movwf	i2c_write@stop,c
   847  000142  EC28  F004         	call	_i2c_write	;wreg free
   848  000146                     l171:
   849                           
   850                           ;my_master.c: 259: W_data[0] = 0x2D;
   851  000146  0E2D               	movlw	45
   852  000148  0100               	movlb	0	; () banked
   853  00014A  6F9C               	movwf	main@W_data& (0+255),b
   854                           
   855                           ; BSR set to: 0
   856                           ;my_master.c: 260: i2c_write(0b01101010, W_data, 1, 1, 0);
   857  00014C  0E00               	movlw	0
   858  00014E  6E11               	movwf	i2c_write@addr+1,c
   859  000150  0E6A               	movlw	106
   860  000152  6E10               	movwf	i2c_write@addr,c
   861  000154  0E9C               	movlw	low main@W_data
   862  000156  6E12               	movwf	i2c_write@data,c
   863  000158  0E00               	movlw	high main@W_data
   864  00015A  6E13               	movwf	i2c_write@data+1,c
   865  00015C  0E01               	movlw	1
   866  00015E  6E14               	movwf	i2c_write@num,c
   867  000160  0E01               	movlw	1
   868  000162  6E15               	movwf	i2c_write@start,c
   869  000164  0E00               	movlw	0
   870  000166  6E16               	movwf	i2c_write@stop,c
   871  000168  EC28  F004         	call	_i2c_write	;wreg free
   872                           
   873                           ;my_master.c: 261: i2c_read(0b01101010, R_data, 1);
   874  00016C  0E00               	movlw	0
   875  00016E  6E11               	movwf	i2c_read@addr+1,c
   876  000170  0E6A               	movlw	106
   877  000172  6E10               	movwf	i2c_read@addr,c
   878  000174  0EA0               	movlw	low main@R_data
   879  000176  6E12               	movwf	i2c_read@data,c
   880  000178  0E00               	movlw	high main@R_data
   881  00017A  6E13               	movwf	i2c_read@data+1,c
   882  00017C  0E01               	movlw	1
   883  00017E  6E14               	movwf	i2c_read@num,c
   884  000180  EC8E  F003         	call	_i2c_read	;wreg free
   885                           
   886                           ;my_master.c: 262: jyro = R_data[0];
   887  000184  C0A0  F092         	movff	main@R_data,main@jyro
   888  000188  0100               	movlb	0	; () banked
   889  00018A  6B93               	clrf	(main@jyro+1)& (0+255),b
   890                           
   891                           ;my_master.c: 263: jyro <<= 8;
   892  00018C  0100               	movlb	0	; () banked
   893  00018E  5192               	movf	main@jyro& (0+255),w,b
   894  000190  6F93               	movwf	(main@jyro+1)& (0+255),b
   895  000192  6B92               	clrf	main@jyro& (0+255),b
   896                           
   897                           ;my_master.c: 264: W_data[0] = 0x2C;
   898  000194  0E2C               	movlw	44
   899  000196  0100               	movlb	0	; () banked
   900  000198  6F9C               	movwf	main@W_data& (0+255),b
   901                           
   902                           ; BSR set to: 0
   903                           ;my_master.c: 265: i2c_write(0b01101010, W_data, 1, 1, 0);
   904  00019A  0E00               	movlw	0
   905  00019C  6E11               	movwf	i2c_write@addr+1,c
   906  00019E  0E6A               	movlw	106
   907  0001A0  6E10               	movwf	i2c_write@addr,c
   908  0001A2  0E9C               	movlw	low main@W_data
   909  0001A4  6E12               	movwf	i2c_write@data,c
   910  0001A6  0E00               	movlw	high main@W_data
   911  0001A8  6E13               	movwf	i2c_write@data+1,c
   912  0001AA  0E01               	movlw	1
   913  0001AC  6E14               	movwf	i2c_write@num,c
   914  0001AE  0E01               	movlw	1
   915  0001B0  6E15               	movwf	i2c_write@start,c
   916  0001B2  0E00               	movlw	0
   917  0001B4  6E16               	movwf	i2c_write@stop,c
   918  0001B6  EC28  F004         	call	_i2c_write	;wreg free
   919                           
   920                           ;my_master.c: 266: i2c_read(0b01101010, R_data, 1);
   921  0001BA  0E00               	movlw	0
   922  0001BC  6E11               	movwf	i2c_read@addr+1,c
   923  0001BE  0E6A               	movlw	106
   924  0001C0  6E10               	movwf	i2c_read@addr,c
   925  0001C2  0EA0               	movlw	low main@R_data
   926  0001C4  6E12               	movwf	i2c_read@data,c
   927  0001C6  0E00               	movlw	high main@R_data
   928  0001C8  6E13               	movwf	i2c_read@data+1,c
   929  0001CA  0E01               	movlw	1
   930  0001CC  6E14               	movwf	i2c_read@num,c
   931  0001CE  EC8E  F003         	call	_i2c_read	;wreg free
   932                           
   933                           ;my_master.c: 267: jyro |= R_data[0];
   934  0001D2  0100               	movlb	0	; () banked
   935  0001D4  51A0               	movf	main@R_data& (0+255),w,b
   936  0001D6  0100               	movlb	0	; () banked
   937  0001D8  1392               	iorwf	main@jyro& (0+255),f,b
   938                           
   939                           ; BSR set to: 0
   940                           ;my_master.c: 268: timer_stop();
   941  0001DA  EC89  F008         	call	_timer_stop	;wreg free
   942                           
   943                           ;my_master.c: 269: W_data[0] = 0x26;
   944  0001DE  0E26               	movlw	38
   945  0001E0  0100               	movlb	0	; () banked
   946  0001E2  6F9C               	movwf	main@W_data& (0+255),b
   947                           
   948                           ; BSR set to: 0
   949                           ;my_master.c: 270: i2c_write(0b01101010, W_data, 1, 1, 0);
   950  0001E4  0E00               	movlw	0
   951  0001E6  6E11               	movwf	i2c_write@addr+1,c
   952  0001E8  0E6A               	movlw	106
   953  0001EA  6E10               	movwf	i2c_write@addr,c
   954  0001EC  0E9C               	movlw	low main@W_data
   955  0001EE  6E12               	movwf	i2c_write@data,c
   956  0001F0  0E00               	movlw	high main@W_data
   957  0001F2  6E13               	movwf	i2c_write@data+1,c
   958  0001F4  0E01               	movlw	1
   959  0001F6  6E14               	movwf	i2c_write@num,c
   960  0001F8  0E01               	movlw	1
   961  0001FA  6E15               	movwf	i2c_write@start,c
   962  0001FC  0E00               	movlw	0
   963  0001FE  6E16               	movwf	i2c_write@stop,c
   964  000200  EC28  F004         	call	_i2c_write	;wreg free
   965                           
   966                           ;my_master.c: 271: i2c_read(0b01101010, R_data, 1);
   967  000204  0E00               	movlw	0
   968  000206  6E11               	movwf	i2c_read@addr+1,c
   969  000208  0E6A               	movlw	106
   970  00020A  6E10               	movwf	i2c_read@addr,c
   971  00020C  0EA0               	movlw	low main@R_data
   972  00020E  6E12               	movwf	i2c_read@data,c
   973  000210  0E00               	movlw	high main@R_data
   974  000212  6E13               	movwf	i2c_read@data+1,c
   975  000214  0E01               	movlw	1
   976  000216  6E14               	movwf	i2c_read@num,c
   977  000218  EC8E  F003         	call	_i2c_read	;wreg free
   978                           
   979                           ;my_master.c: 272: tmp = 40 - R_data[0];
   980  00021C  0100               	movlb	0	; () banked
   981  00021E  51A0               	movf	main@R_data& (0+255),w,b
   982  000220  0800               	sublw	0
   983  000222  0F28               	addlw	40
   984  000224  0100               	movlb	0	; () banked
   985  000226  6F85               	movwf	main@tmp& (0+255),b
   986                           
   987                           ;my_master.c: 273: J_deg = jyro;
   988  000228  C092  F017         	movff	main@jyro,___awtoft@c
   989  00022C  C093  F018         	movff	main@jyro+1,___awtoft@c+1
   990  000230  ECC9  F008         	call	___awtoft	;wreg free
   991  000234  C017  F099         	movff	?___awtoft,main@J_deg
   992  000238  C018  F09A         	movff	?___awtoft+1,main@J_deg+1
   993  00023C  C019  F09B         	movff	?___awtoft+2,main@J_deg+2
   994                           
   995                           ;my_master.c: 274: if(J_deg > 0x8000){
   996  000240  0E00               	movlw	0
   997  000242  6E26               	movwf	___ftge@ff1,c
   998  000244  0E00               	movlw	0
   999  000246  6E27               	movwf	___ftge@ff1+1,c
  1000  000248  0E47               	movlw	71
  1001  00024A  6E28               	movwf	___ftge@ff1+2,c
  1002  00024C  C099  F029         	movff	main@J_deg,___ftge@ff2
  1003  000250  C09A  F02A         	movff	main@J_deg+1,___ftge@ff2+1
  1004  000254  C09B  F02B         	movff	main@J_deg+2,___ftge@ff2+2
  1005  000258  EC13  F007         	call	___ftge	;wreg free
  1006  00025C  B0D8               	btfsc	status,0,c
  1007  00025E  D02A               	goto	l172
  1008                           
  1009                           ;my_master.c: 275: J_deg = -(0xFFFF - J_deg);
  1010  000260  0EFF               	movlw	255
  1011  000262  6E1D               	movwf	___ftadd@f2,c
  1012  000264  0E7F               	movlw	127
  1013  000266  6E1E               	movwf	___ftadd@f2+1,c
  1014  000268  0E47               	movlw	71
  1015  00026A  6E1F               	movwf	___ftadd@f2+2,c
  1016  00026C  C099  F017         	movff	main@J_deg,___ftneg@f1
  1017  000270  C09A  F018         	movff	main@J_deg+1,___ftneg@f1+1
  1018  000274  C09B  F019         	movff	main@J_deg+2,___ftneg@f1+2
  1019  000278  EC11  F009         	call	___ftneg	;wreg free
  1020  00027C  C017  F01A         	movff	?___ftneg,___ftadd@f1
  1021  000280  C018  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  1022  000284  C019  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  1023  000288  ECB8  F002         	call	___ftadd	;wreg free
  1024  00028C  C01A  F086         	movff	?___ftadd,_main$1218
  1025  000290  C01B  F087         	movff	?___ftadd+1,_main$1218+1
  1026  000294  C01C  F088         	movff	?___ftadd+2,_main$1218+2
  1027                           
  1028                           ;my_master.c: 275: J_deg = -(0xFFFF - J_deg);
  1029  000298  C086  F017         	movff	_main$1218,___ftneg@f1
  1030  00029C  C087  F018         	movff	_main$1218+1,___ftneg@f1+1
  1031  0002A0  C088  F019         	movff	_main$1218+2,___ftneg@f1+2
  1032  0002A4  EC11  F009         	call	___ftneg	;wreg free
  1033  0002A8  C017  F099         	movff	?___ftneg,main@J_deg
  1034  0002AC  C018  F09A         	movff	?___ftneg+1,main@J_deg+1
  1035  0002B0  C019  F09B         	movff	?___ftneg+2,main@J_deg+2
  1036  0002B4                     l172:
  1037                           
  1038                           ;my_master.c: 276: }
  1039                           ;my_master.c: 277: J_deg = J_deg * 0.00875;
  1040  0002B4  C099  F026         	movff	main@J_deg,___ftmul@f1
  1041  0002B8  C09A  F027         	movff	main@J_deg+1,___ftmul@f1+1
  1042  0002BC  C09B  F028         	movff	main@J_deg+2,___ftmul@f1+2
  1043  0002C0  0E5C               	movlw	92
  1044  0002C2  6E29               	movwf	___ftmul@f2,c
  1045  0002C4  0E0F               	movlw	15
  1046  0002C6  6E2A               	movwf	___ftmul@f2+1,c
  1047  0002C8  0E3C               	movlw	60
  1048  0002CA  6E2B               	movwf	___ftmul@f2+2,c
  1049  0002CC  ECAD  F004         	call	___ftmul	;wreg free
  1050  0002D0  C026  F099         	movff	?___ftmul,main@J_deg
  1051  0002D4  C027  F09A         	movff	?___ftmul+1,main@J_deg+1
  1052  0002D8  C028  F09B         	movff	?___ftmul+2,main@J_deg+2
  1053                           
  1054                           ;my_master.c: 279: deg += ((J_deg + before) * time / 2) / 75 * 900;
  1055  0002DC  0E00               	movlw	0
  1056  0002DE  6E38               	movwf	___ftdiv@f2,c
  1057  0002E0  0E00               	movlw	0
  1058  0002E2  6E39               	movwf	___ftdiv@f2+1,c
  1059  0002E4  0E40               	movlw	64
  1060  0002E6  6E3A               	movwf	___ftdiv@f2+2,c
  1061  0002E8  C052  F029         	movff	_time,___ftmul@f2
  1062  0002EC  C053  F02A         	movff	_time+1,___ftmul@f2+1
  1063  0002F0  C054  F02B         	movff	_time+2,___ftmul@f2+2
  1064  0002F4  C08C  F01D         	movff	main@before,___ftadd@f2
  1065  0002F8  C08D  F01E         	movff	main@before+1,___ftadd@f2+1
  1066  0002FC  C08E  F01F         	movff	main@before+2,___ftadd@f2+2
  1067  000300  C099  F01A         	movff	main@J_deg,___ftadd@f1
  1068  000304  C09A  F01B         	movff	main@J_deg+1,___ftadd@f1+1
  1069  000308  C09B  F01C         	movff	main@J_deg+2,___ftadd@f1+2
  1070  00030C  ECB8  F002         	call	___ftadd	;wreg free
  1071  000310  C01A  F026         	movff	?___ftadd,___ftmul@f1
  1072  000314  C01B  F027         	movff	?___ftadd+1,___ftmul@f1+1
  1073  000318  C01C  F028         	movff	?___ftadd+2,___ftmul@f1+2
  1074  00031C  ECAD  F004         	call	___ftmul	;wreg free
  1075  000320  C026  F035         	movff	?___ftmul,___ftdiv@f1
  1076  000324  C027  F036         	movff	?___ftmul+1,___ftdiv@f1+1
  1077  000328  C028  F037         	movff	?___ftmul+2,___ftdiv@f1+2
  1078  00032C  ECA1  F005         	call	___ftdiv	;wreg free
  1079  000330  C035  F089         	movff	?___ftdiv,_main$1219
  1080  000334  C036  F08A         	movff	?___ftdiv+1,_main$1219+1
  1081  000338  C037  F08B         	movff	?___ftdiv+2,_main$1219+2
  1082                           
  1083                           ;my_master.c: 279: deg += ((J_deg + before) * time / 2) / 75 * 900;
  1084  00033C  C09D  F01A         	movff	main@deg,___ftadd@f1
  1085  000340  C09E  F01B         	movff	main@deg+1,___ftadd@f1+1
  1086  000344  C09F  F01C         	movff	main@deg+2,___ftadd@f1+2
  1087  000348  0E00               	movlw	0
  1088  00034A  6E29               	movwf	___ftmul@f2,c
  1089  00034C  0E61               	movlw	97
  1090  00034E  6E2A               	movwf	___ftmul@f2+1,c
  1091  000350  0E44               	movlw	68
  1092  000352  6E2B               	movwf	___ftmul@f2+2,c
  1093  000354  0E00               	movlw	0
  1094  000356  6E38               	movwf	___ftdiv@f2,c
  1095  000358  0E96               	movlw	150
  1096  00035A  6E39               	movwf	___ftdiv@f2+1,c
  1097  00035C  0E42               	movlw	66
  1098  00035E  6E3A               	movwf	___ftdiv@f2+2,c
  1099  000360  C089  F035         	movff	_main$1219,___ftdiv@f1
  1100  000364  C08A  F036         	movff	_main$1219+1,___ftdiv@f1+1
  1101  000368  C08B  F037         	movff	_main$1219+2,___ftdiv@f1+2
  1102  00036C  ECA1  F005         	call	___ftdiv	;wreg free
  1103  000370  C035  F026         	movff	?___ftdiv,___ftmul@f1
  1104  000374  C036  F027         	movff	?___ftdiv+1,___ftmul@f1+1
  1105  000378  C037  F028         	movff	?___ftdiv+2,___ftmul@f1+2
  1106  00037C  ECAD  F004         	call	___ftmul	;wreg free
  1107  000380  C026  F01D         	movff	?___ftmul,___ftadd@f2
  1108  000384  C027  F01E         	movff	?___ftmul+1,___ftadd@f2+1
  1109  000388  C028  F01F         	movff	?___ftmul+2,___ftadd@f2+2
  1110  00038C  ECB8  F002         	call	___ftadd	;wreg free
  1111  000390  C01A  F09D         	movff	?___ftadd,main@deg
  1112  000394  C01B  F09E         	movff	?___ftadd+1,main@deg+1
  1113  000398  C01C  F09F         	movff	?___ftadd+2,main@deg+2
  1114                           
  1115                           ;my_master.c: 280: before = J_deg;
  1116  00039C  C099  F08C         	movff	main@J_deg,main@before
  1117  0003A0  C09A  F08D         	movff	main@J_deg+1,main@before+1
  1118  0003A4  C09B  F08E         	movff	main@J_deg+2,main@before+2
  1119                           
  1120                           ;my_master.c: 281: if(deg > 360 || deg < -360){
  1121  0003A8  0E00               	movlw	0
  1122  0003AA  6E26               	movwf	___ftge@ff1,c
  1123  0003AC  0EB4               	movlw	180
  1124  0003AE  6E27               	movwf	___ftge@ff1+1,c
  1125  0003B0  0E43               	movlw	67
  1126  0003B2  6E28               	movwf	___ftge@ff1+2,c
  1127  0003B4  C09D  F029         	movff	main@deg,___ftge@ff2
  1128  0003B8  C09E  F02A         	movff	main@deg+1,___ftge@ff2+1
  1129  0003BC  C09F  F02B         	movff	main@deg+2,___ftge@ff2+2
  1130  0003C0  EC13  F007         	call	___ftge	;wreg free
  1131  0003C4  A0D8               	btfss	status,0,c
  1132  0003C6  D010               	goto	l3015
  1133  0003C8  C09D  F026         	movff	main@deg,___ftge@ff1
  1134  0003CC  C09E  F027         	movff	main@deg+1,___ftge@ff1+1
  1135  0003D0  C09F  F028         	movff	main@deg+2,___ftge@ff1+2
  1136  0003D4  0E00               	movlw	0
  1137  0003D6  6E29               	movwf	___ftge@ff2,c
  1138  0003D8  0EB4               	movlw	180
  1139  0003DA  6E2A               	movwf	___ftge@ff2+1,c
  1140  0003DC  0EC3               	movlw	195
  1141  0003DE  6E2B               	movwf	___ftge@ff2+2,c
  1142  0003E0  EC13  F007         	call	___ftge	;wreg free
  1143  0003E4  B0D8               	btfsc	status,0,c
  1144  0003E6  D03A               	goto	l3019
  1145  0003E8                     l3015:
  1146                           
  1147                           ;my_master.c: 282: turn_value = (int)deg / 360;
  1148  0003E8  C09D  F00F         	movff	main@deg,___fttol@f1
  1149  0003EC  C09E  F010         	movff	main@deg+1,___fttol@f1+1
  1150  0003F0  C09F  F011         	movff	main@deg+2,___fttol@f1+2
  1151  0003F4  EC27  F005         	call	___fttol	;wreg free
  1152  0003F8  C00F  F01E         	movff	?___fttol,___awdiv@dividend
  1153  0003FC  C010  F01F         	movff	?___fttol+1,___awdiv@dividend+1
  1154  000400  0E01               	movlw	1
  1155  000402  6E21               	movwf	___awdiv@divisor+1,c
  1156  000404  0E68               	movlw	104
  1157  000406  6E20               	movwf	___awdiv@divisor,c
  1158  000408  EC5B  F007         	call	___awdiv	;wreg free
  1159  00040C  C01E  F08F         	movff	?___awdiv,main@turn_value
  1160  000410  C01F  F090         	movff	?___awdiv+1,main@turn_value+1
  1161                           
  1162                           ;my_master.c: 283: deg -= (360 * turn_value);
  1163  000414  C09D  F026         	movff	main@deg,___ftsub@f1
  1164  000418  C09E  F027         	movff	main@deg+1,___ftsub@f1+1
  1165  00041C  C09F  F028         	movff	main@deg+2,___ftsub@f1+2
  1166  000420  C08F  F00F         	movff	main@turn_value,___wmul@multiplier
  1167  000424  C090  F010         	movff	main@turn_value+1,___wmul@multiplier+1
  1168  000428  0E01               	movlw	1
  1169  00042A  6E12               	movwf	___wmul@multiplicand+1,c
  1170  00042C  0E68               	movlw	104
  1171  00042E  6E11               	movwf	___wmul@multiplicand,c
  1172  000430  ECFE  F008         	call	___wmul	;wreg free
  1173  000434  C00F  F017         	movff	?___wmul,___awtoft@c
  1174  000438  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  1175  00043C  ECC9  F008         	call	___awtoft	;wreg free
  1176  000440  C017  F029         	movff	?___awtoft,___ftsub@f2
  1177  000444  C018  F02A         	movff	?___awtoft+1,___ftsub@f2+1
  1178  000448  C019  F02B         	movff	?___awtoft+2,___ftsub@f2+2
  1179  00044C  ECA9  F008         	call	___ftsub	;wreg free
  1180  000450  C026  F09D         	movff	?___ftsub,main@deg
  1181  000454  C027  F09E         	movff	?___ftsub+1,main@deg+1
  1182  000458  C028  F09F         	movff	?___ftsub+2,main@deg+2
  1183  00045C                     l3019:
  1184                           
  1185                           ;my_master.c: 284: }
  1186                           ;my_master.c: 285: if(deg - MAE < 0.01 && deg - MAE > -0.01){
  1187  00045C  C09D  F01D         	movff	main@deg,___ftadd@f2
  1188  000460  C09E  F01E         	movff	main@deg+1,___ftadd@f2+1
  1189  000464  C09F  F01F         	movff	main@deg+2,___ftadd@f2+2
  1190  000468  C096  F017         	movff	main@MAE,___ftneg@f1
  1191  00046C  C097  F018         	movff	main@MAE+1,___ftneg@f1+1
  1192  000470  C098  F019         	movff	main@MAE+2,___ftneg@f1+2
  1193  000474  EC11  F009         	call	___ftneg	;wreg free
  1194  000478  C017  F01A         	movff	?___ftneg,___ftadd@f1
  1195  00047C  C018  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  1196  000480  C019  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  1197  000484  ECB8  F002         	call	___ftadd	;wreg free
  1198  000488  C01A  F026         	movff	?___ftadd,___ftge@ff1
  1199  00048C  C01B  F027         	movff	?___ftadd+1,___ftge@ff1+1
  1200  000490  C01C  F028         	movff	?___ftadd+2,___ftge@ff1+2
  1201  000494  0ED7               	movlw	215
  1202  000496  6E29               	movwf	___ftge@ff2,c
  1203  000498  0E23               	movlw	35
  1204  00049A  6E2A               	movwf	___ftge@ff2+1,c
  1205  00049C  0E3C               	movlw	60
  1206  00049E  6E2B               	movwf	___ftge@ff2+2,c
  1207  0004A0  EC13  F007         	call	___ftge	;wreg free
  1208  0004A4  B0D8               	btfsc	status,0,c
  1209  0004A6  D02C               	goto	l176
  1210  0004A8  0ED7               	movlw	215
  1211  0004AA  6E26               	movwf	___ftge@ff1,c
  1212  0004AC  0E23               	movlw	35
  1213  0004AE  6E27               	movwf	___ftge@ff1+1,c
  1214  0004B0  0EBC               	movlw	188
  1215  0004B2  6E28               	movwf	___ftge@ff1+2,c
  1216  0004B4  C09D  F01D         	movff	main@deg,___ftadd@f2
  1217  0004B8  C09E  F01E         	movff	main@deg+1,___ftadd@f2+1
  1218  0004BC  C09F  F01F         	movff	main@deg+2,___ftadd@f2+2
  1219  0004C0  C096  F017         	movff	main@MAE,___ftneg@f1
  1220  0004C4  C097  F018         	movff	main@MAE+1,___ftneg@f1+1
  1221  0004C8  C098  F019         	movff	main@MAE+2,___ftneg@f1+2
  1222  0004CC  EC11  F009         	call	___ftneg	;wreg free
  1223  0004D0  C017  F01A         	movff	?___ftneg,___ftadd@f1
  1224  0004D4  C018  F01B         	movff	?___ftneg+1,___ftadd@f1+1
  1225  0004D8  C019  F01C         	movff	?___ftneg+2,___ftadd@f1+2
  1226  0004DC  ECB8  F002         	call	___ftadd	;wreg free
  1227  0004E0  C01A  F029         	movff	?___ftadd,___ftge@ff2
  1228  0004E4  C01B  F02A         	movff	?___ftadd+1,___ftge@ff2+1
  1229  0004E8  C01C  F02B         	movff	?___ftadd+2,___ftge@ff2+2
  1230  0004EC  EC13  F007         	call	___ftge	;wreg free
  1231  0004F0  B0D8               	btfsc	status,0,c
  1232  0004F2  D006               	goto	l176
  1233                           
  1234                           ;my_master.c: 286: deg = MAE;
  1235  0004F4  C096  F09D         	movff	main@MAE,main@deg
  1236  0004F8  C097  F09E         	movff	main@MAE+1,main@deg+1
  1237  0004FC  C098  F09F         	movff	main@MAE+2,main@deg+2
  1238  000500                     l176:
  1239                           
  1240                           ;my_master.c: 287: }
  1241                           ;my_master.c: 288: MAE = deg;
  1242  000500  C09D  F096         	movff	main@deg,main@MAE
  1243  000504  C09E  F097         	movff	main@deg+1,main@MAE+1
  1244  000508  C09F  F098         	movff	main@deg+2,main@MAE+2
  1245                           
  1246                           ;my_master.c: 289: cnt++;
  1247  00050C  0100               	movlb	0	; () banked
  1248  00050E  4B83               	infsnz	main@cnt& (0+255),f,b
  1249  000510  2B84               	incf	(main@cnt+1)& (0+255),f,b
  1250                           
  1251                           ; BSR set to: 0
  1252                           ;my_master.c: 290: JYRO = deg;
  1253  000512  C09D  F00F         	movff	main@deg,___fttol@f1
  1254  000516  C09E  F010         	movff	main@deg+1,___fttol@f1+1
  1255  00051A  C09F  F011         	movff	main@deg+2,___fttol@f1+2
  1256  00051E  EC27  F005         	call	___fttol	;wreg free
  1257  000522  C00F  F094         	movff	?___fttol,main@JYRO
  1258  000526  C010  F095         	movff	?___fttol+1,main@JYRO+1
  1259                           
  1260                           ;my_master.c: 291: serial_write(0xAA);
  1261  00052A  0E00               	movlw	0
  1262  00052C  6E11               	movwf	serial_write@sendData+1,c
  1263  00052E  0EAA               	movlw	170
  1264  000530  6E10               	movwf	serial_write@sendData,c
  1265  000532  EC66  F008         	call	_serial_write	;wreg free
  1266                           
  1267                           ;my_master.c: 292: serial_write(0xBB);
  1268  000536  0E00               	movlw	0
  1269  000538  6E11               	movwf	serial_write@sendData+1,c
  1270  00053A  0EBB               	movlw	187
  1271  00053C  6E10               	movwf	serial_write@sendData,c
  1272  00053E  EC66  F008         	call	_serial_write	;wreg free
  1273                           
  1274                           ;my_master.c: 293: serial_write(JYRO >> 8);
  1275  000542  C095  F044         	movff	main@JYRO+1,??_main
  1276  000546  6A45               	clrf	(??_main+1)& (0+255),c
  1277  000548  BE44               	btfsc	??_main& (0+255),7,c
  1278  00054A  6845               	setf	(??_main+1)& (0+255),c
  1279  00054C  C044  F010         	movff	??_main,serial_write@sendData
  1280  000550  C045  F011         	movff	??_main+1,serial_write@sendData+1
  1281  000554  EC66  F008         	call	_serial_write	;wreg free
  1282                           
  1283                           ;my_master.c: 294: serial_write(JYRO);
  1284  000558  C094  F010         	movff	main@JYRO,serial_write@sendData
  1285  00055C  C095  F011         	movff	main@JYRO+1,serial_write@sendData+1
  1286  000560  EC66  F008         	call	_serial_write	;wreg free
  1287                           
  1288                           ;my_master.c: 295: timer_reset();
  1289  000564  EC23  F009         	call	_timer_reset	;wreg free
  1290                           
  1291                           ;my_master.c: 296: timer_start();
  1292  000568  EC34  F009         	call	_timer_start	;wreg free
  1293                           
  1294                           ;my_master.c: 297: LATBbits.LB0 = 0;
  1295  00056C  908A               	bcf	3978,0,c	;volatile
  1296  00056E  D5EB               	goto	l171
  1297  000570                     __end_of_main:
  1298                           	opt stack 0
  1299                           tblptru	equ	0xFF8
  1300                           tblptrh	equ	0xFF7
  1301                           tblptrl	equ	0xFF6
  1302                           tablat	equ	0xFF5
  1303                           postinc0	equ	0xFEE
  1304                           wreg	equ	0xFE8
  1305                           status	equ	0xFD8
  1306                           
  1307 ;; *************** function _timer_stop *****************
  1308 ;; Defined at:
  1309 ;;		line 83 in file "../my_master.c"
  1310 ;; Parameters:    Size  Location     Type
  1311 ;;		None
  1312 ;; Auto vars:     Size  Location     Type
  1313 ;;		None
  1314 ;; Return value:  Size  Location     Type
  1315 ;;                  1    wreg      void 
  1316 ;; Registers used:
  1317 ;;		wreg, status,2, status,0, cstack
  1318 ;; Tracked objects:
  1319 ;;		On entry : 0/0
  1320 ;;		On exit  : 0/0
  1321 ;;		Unchanged: 0/0
  1322 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1323 ;;      Params:         0       0       0       0       0       0       0
  1324 ;;      Locals:         0       0       0       0       0       0       0
  1325 ;;      Temps:          0       0       0       0       0       0       0
  1326 ;;      Totals:         0       0       0       0       0       0       0
  1327 ;;Total ram usage:        0 bytes
  1328 ;; Hardware stack levels used:    1
  1329 ;; Hardware stack levels required when called:    3
  1330 ;; This function calls:
  1331 ;;		___altoft
  1332 ;;		___ftmul
  1333 ;; This function is called by:
  1334 ;;		_main
  1335 ;; This function uses a non-reentrant model
  1336 ;;
  1337                           
  1338                           	psect	text1
  1339  001112                     __ptext1:
  1340                           	opt stack 0
  1341  001112                     _timer_stop:
  1342                           	opt stack 27
  1343                           
  1344                           ;my_master.c: 84: INTCONbits.TMR0IE = 0;
  1345                           
  1346                           ;incstack = 0
  1347  001112  9AF2               	bcf	intcon,5,c	;volatile
  1348                           
  1349                           ;my_master.c: 85: time = cnt0 * 0.0001;
  1350  001114  C04A  F017         	movff	_cnt0,___altoft@c
  1351  001118  C04B  F018         	movff	_cnt0+1,___altoft@c+1
  1352  00111C  C04C  F019         	movff	_cnt0+2,___altoft@c+2
  1353  001120  C04D  F01A         	movff	_cnt0+3,___altoft@c+3
  1354  001124  EC9D  F007         	call	___altoft	;wreg free
  1355  001128  C017  F026         	movff	?___altoft,___ftmul@f1
  1356  00112C  C018  F027         	movff	?___altoft+1,___ftmul@f1+1
  1357  001130  C019  F028         	movff	?___altoft+2,___ftmul@f1+2
  1358  001134  0EB7               	movlw	183
  1359  001136  6E29               	movwf	___ftmul@f2,c
  1360  001138  0ED1               	movlw	209
  1361  00113A  6E2A               	movwf	___ftmul@f2+1,c
  1362  00113C  0E38               	movlw	56
  1363  00113E  6E2B               	movwf	___ftmul@f2+2,c
  1364  001140  ECAD  F004         	call	___ftmul	;wreg free
  1365  001144  C026  F052         	movff	?___ftmul,_time
  1366  001148  C027  F053         	movff	?___ftmul+1,_time+1
  1367  00114C  C028  F054         	movff	?___ftmul+2,_time+2
  1368  001150  0012               	return		;funcret
  1369  001152                     __end_of_timer_stop:
  1370                           	opt stack 0
  1371                           tblptru	equ	0xFF8
  1372                           tblptrh	equ	0xFF7
  1373                           tblptrl	equ	0xFF6
  1374                           tablat	equ	0xFF5
  1375                           intcon	equ	0xFF2
  1376                           postinc0	equ	0xFEE
  1377                           wreg	equ	0xFE8
  1378                           status	equ	0xFD8
  1379                           
  1380 ;; *************** function ___ftmul *****************
  1381 ;; Defined at:
  1382 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftmul.c"
  1383 ;; Parameters:    Size  Location     Type
  1384 ;;  f1              3   37[COMRAM] float 
  1385 ;;  f2              3   40[COMRAM] float 
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;  f3_as_produc    3   47[COMRAM] unsigned um
  1388 ;;  sign            1   51[COMRAM] unsigned char 
  1389 ;;  cntr            1   50[COMRAM] unsigned char 
  1390 ;;  exp             1   46[COMRAM] unsigned char 
  1391 ;; Return value:  Size  Location     Type
  1392 ;;                  3   37[COMRAM] float 
  1393 ;; Registers used:
  1394 ;;		wreg, status,2, status,0, cstack
  1395 ;; Tracked objects:
  1396 ;;		On entry : 0/0
  1397 ;;		On exit  : 0/0
  1398 ;;		Unchanged: 0/0
  1399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1400 ;;      Params:         6       0       0       0       0       0       0
  1401 ;;      Locals:         6       0       0       0       0       0       0
  1402 ;;      Temps:          3       0       0       0       0       0       0
  1403 ;;      Totals:        15       0       0       0       0       0       0
  1404 ;;Total ram usage:       15 bytes
  1405 ;; Hardware stack levels used:    1
  1406 ;; Hardware stack levels required when called:    2
  1407 ;; This function calls:
  1408 ;;		___ftpack
  1409 ;; This function is called by:
  1410 ;;		_timer_stop
  1411 ;;		_main
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414                           
  1415                           	psect	text2
  1416  00095A                     __ptext2:
  1417                           	opt stack 0
  1418  00095A                     ___ftmul:
  1419                           	opt stack 27
  1420                           
  1421                           ;incstack = 0
  1422  00095A  C028  F02C         	movff	___ftmul@f1+2,??___ftmul
  1423  00095E  6A2D               	clrf	(??___ftmul+1)& (0+255),c
  1424  000960  6A2E               	clrf	(??___ftmul+2)& (0+255),c
  1425  000962  3427               	rlcf	___ftmul@f1+1,w,c
  1426  000964  362C               	rlcf	??___ftmul& (0+255),f,c
  1427  000966  E301               	bnc	u2761
  1428  000968  802D               	bsf	(??___ftmul+1)& (0+255),0,c
  1429  00096A                     u2761:
  1430  00096A  502C               	movf	??___ftmul,w,c
  1431  00096C  6E2F               	movwf	___ftmul@exp,c
  1432  00096E  502F               	movf	___ftmul@exp,w,c
  1433  000970  A4D8               	btfss	status,2,c
  1434  000972  D007               	goto	l2579
  1435  000974  0E00               	movlw	0
  1436  000976  6E26               	movwf	?___ftmul,c
  1437  000978  0E00               	movlw	0
  1438  00097A  6E27               	movwf	?___ftmul+1,c
  1439  00097C  0E00               	movlw	0
  1440  00097E  6E28               	movwf	?___ftmul+2,c
  1441  000980  0012               	return	
  1442  000982                     l2579:
  1443  000982  C02B  F02C         	movff	___ftmul@f2+2,??___ftmul
  1444  000986  6A2D               	clrf	(??___ftmul+1)& (0+255),c
  1445  000988  6A2E               	clrf	(??___ftmul+2)& (0+255),c
  1446  00098A  342A               	rlcf	___ftmul@f2+1,w,c
  1447  00098C  362C               	rlcf	??___ftmul& (0+255),f,c
  1448  00098E  E301               	bnc	u2781
  1449  000990  802D               	bsf	(??___ftmul+1)& (0+255),0,c
  1450  000992                     u2781:
  1451  000992  502C               	movf	??___ftmul,w,c
  1452  000994  6E34               	movwf	___ftmul@sign,c
  1453  000996  5034               	movf	___ftmul@sign,w,c
  1454  000998  A4D8               	btfss	status,2,c
  1455  00099A  D007               	goto	l2585
  1456  00099C  0E00               	movlw	0
  1457  00099E  6E26               	movwf	?___ftmul,c
  1458  0009A0  0E00               	movlw	0
  1459  0009A2  6E27               	movwf	?___ftmul+1,c
  1460  0009A4  0E00               	movlw	0
  1461  0009A6  6E28               	movwf	?___ftmul+2,c
  1462  0009A8  0012               	return	
  1463  0009AA                     l2585:
  1464  0009AA  5034               	movf	___ftmul@sign,w,c
  1465  0009AC  0F7B               	addlw	123
  1466  0009AE  262F               	addwf	___ftmul@exp,f,c
  1467  0009B0  C028  F034         	movff	___ftmul@f1+2,___ftmul@sign
  1468  0009B4  502B               	movf	___ftmul@f2+2,w,c
  1469  0009B6  1A34               	xorwf	___ftmul@sign,f,c
  1470  0009B8  0E80               	movlw	128
  1471  0009BA  1634               	andwf	___ftmul@sign,f,c
  1472  0009BC  8E27               	bsf	___ftmul@f1+1,7,c
  1473  0009BE  8E2A               	bsf	___ftmul@f2+1,7,c
  1474  0009C0  0EFF               	movlw	255
  1475  0009C2  1629               	andwf	___ftmul@f2,f,c
  1476  0009C4  0EFF               	movlw	255
  1477  0009C6  162A               	andwf	___ftmul@f2+1,f,c
  1478  0009C8  0E00               	movlw	0
  1479  0009CA  162B               	andwf	___ftmul@f2+2,f,c
  1480  0009CC  0E00               	movlw	0
  1481  0009CE  6E30               	movwf	___ftmul@f3_as_product,c
  1482  0009D0  0E00               	movlw	0
  1483  0009D2  6E31               	movwf	___ftmul@f3_as_product+1,c
  1484  0009D4  0E00               	movlw	0
  1485  0009D6  6E32               	movwf	___ftmul@f3_as_product+2,c
  1486  0009D8  0E07               	movlw	7
  1487  0009DA  6E33               	movwf	___ftmul@cntr,c
  1488  0009DC                     l2599:
  1489  0009DC  A026               	btfss	___ftmul@f1,0,c
  1490  0009DE  D006               	goto	l2603
  1491  0009E0  5029               	movf	___ftmul@f2,w,c
  1492  0009E2  2630               	addwf	___ftmul@f3_as_product,f,c
  1493  0009E4  502A               	movf	___ftmul@f2+1,w,c
  1494  0009E6  2231               	addwfc	___ftmul@f3_as_product+1,f,c
  1495  0009E8  502B               	movf	___ftmul@f2+2,w,c
  1496  0009EA  2232               	addwfc	___ftmul@f3_as_product+2,f,c
  1497  0009EC                     l2603:
  1498  0009EC  90D8               	bcf	status,0,c
  1499  0009EE  3228               	rrcf	___ftmul@f1+2,f,c
  1500  0009F0  3227               	rrcf	___ftmul@f1+1,f,c
  1501  0009F2  3226               	rrcf	___ftmul@f1,f,c
  1502  0009F4  90D8               	bcf	status,0,c
  1503  0009F6  3629               	rlcf	___ftmul@f2,f,c
  1504  0009F8  362A               	rlcf	___ftmul@f2+1,f,c
  1505  0009FA  362B               	rlcf	___ftmul@f2+2,f,c
  1506  0009FC  2E33               	decfsz	___ftmul@cntr,f,c
  1507  0009FE  D7EE               	goto	l2599
  1508  000A00  0E09               	movlw	9
  1509  000A02  6E33               	movwf	___ftmul@cntr,c
  1510  000A04                     l2609:
  1511  000A04  A026               	btfss	___ftmul@f1,0,c
  1512  000A06  D006               	goto	l2613
  1513  000A08  5029               	movf	___ftmul@f2,w,c
  1514  000A0A  2630               	addwf	___ftmul@f3_as_product,f,c
  1515  000A0C  502A               	movf	___ftmul@f2+1,w,c
  1516  000A0E  2231               	addwfc	___ftmul@f3_as_product+1,f,c
  1517  000A10  502B               	movf	___ftmul@f2+2,w,c
  1518  000A12  2232               	addwfc	___ftmul@f3_as_product+2,f,c
  1519  000A14                     l2613:
  1520  000A14  90D8               	bcf	status,0,c
  1521  000A16  3228               	rrcf	___ftmul@f1+2,f,c
  1522  000A18  3227               	rrcf	___ftmul@f1+1,f,c
  1523  000A1A  3226               	rrcf	___ftmul@f1,f,c
  1524  000A1C  90D8               	bcf	status,0,c
  1525  000A1E  3232               	rrcf	___ftmul@f3_as_product+2,f,c
  1526  000A20  3231               	rrcf	___ftmul@f3_as_product+1,f,c
  1527  000A22  3230               	rrcf	___ftmul@f3_as_product,f,c
  1528  000A24  2E33               	decfsz	___ftmul@cntr,f,c
  1529  000A26  D7EE               	goto	l2609
  1530  000A28  C030  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  1531  000A2C  C031  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  1532  000A30  C032  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  1533  000A34  C02F  F012         	movff	___ftmul@exp,___ftpack@exp
  1534  000A38  C034  F013         	movff	___ftmul@sign,___ftpack@sign
  1535  000A3C  EC73  F006         	call	___ftpack	;wreg free
  1536  000A40  C00F  F026         	movff	?___ftpack,?___ftmul
  1537  000A44  C010  F027         	movff	?___ftpack+1,?___ftmul+1
  1538  000A48  C011  F028         	movff	?___ftpack+2,?___ftmul+2
  1539  000A4C  0012               	return	
  1540  000A4E                     __end_of___ftmul:
  1541                           	opt stack 0
  1542                           tblptru	equ	0xFF8
  1543                           tblptrh	equ	0xFF7
  1544                           tblptrl	equ	0xFF6
  1545                           tablat	equ	0xFF5
  1546                           intcon	equ	0xFF2
  1547                           postinc0	equ	0xFEE
  1548                           wreg	equ	0xFE8
  1549                           status	equ	0xFD8
  1550                           
  1551 ;; *************** function ___altoft *****************
  1552 ;; Defined at:
  1553 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\altoft.c"
  1554 ;; Parameters:    Size  Location     Type
  1555 ;;  c               4   22[COMRAM] long 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;  sign            1   31[COMRAM] unsigned char 
  1558 ;;  exp             1   30[COMRAM] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  3   22[COMRAM] float 
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, status,0, cstack
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1568 ;;      Params:         4       0       0       0       0       0       0
  1569 ;;      Locals:         2       0       0       0       0       0       0
  1570 ;;      Temps:          4       0       0       0       0       0       0
  1571 ;;      Totals:        10       0       0       0       0       0       0
  1572 ;;Total ram usage:       10 bytes
  1573 ;; Hardware stack levels used:    1
  1574 ;; Hardware stack levels required when called:    2
  1575 ;; This function calls:
  1576 ;;		___ftpack
  1577 ;; This function is called by:
  1578 ;;		_timer_stop
  1579 ;; This function uses a non-reentrant model
  1580 ;;
  1581                           
  1582                           	psect	text3
  1583  000F3A                     __ptext3:
  1584                           	opt stack 0
  1585  000F3A                     ___altoft:
  1586                           	opt stack 27
  1587                           
  1588                           ;incstack = 0
  1589  000F3A  0E00               	movlw	0
  1590  000F3C  6E20               	movwf	___altoft@sign,c
  1591  000F3E  0E8E               	movlw	142
  1592  000F40  6E1F               	movwf	___altoft@exp,c
  1593  000F42  AE1A               	btfss	___altoft@c+3,7,c
  1594  000F44  D011               	goto	l2497
  1595  000F46  1E1A               	comf	___altoft@c+3,f,c
  1596  000F48  1E19               	comf	___altoft@c+2,f,c
  1597  000F4A  1E18               	comf	___altoft@c+1,f,c
  1598  000F4C  6C17               	negf	___altoft@c,c
  1599  000F4E  0E00               	movlw	0
  1600  000F50  2218               	addwfc	___altoft@c+1,f,c
  1601  000F52  2219               	addwfc	___altoft@c+2,f,c
  1602  000F54  221A               	addwfc	___altoft@c+3,f,c
  1603  000F56  0E01               	movlw	1
  1604  000F58  6E20               	movwf	___altoft@sign,c
  1605  000F5A  D006               	goto	l2497
  1606  000F5C                     l2495:
  1607  000F5C  90D8               	bcf	status,0,c
  1608  000F5E  321A               	rrcf	___altoft@c+3,f,c
  1609  000F60  3219               	rrcf	___altoft@c+2,f,c
  1610  000F62  3218               	rrcf	___altoft@c+1,f,c
  1611  000F64  3217               	rrcf	___altoft@c,f,c
  1612  000F66  2A1F               	incf	___altoft@exp,f,c
  1613  000F68                     l2497:
  1614  000F68  0E00               	movlw	0
  1615  000F6A  1417               	andwf	___altoft@c,w,c
  1616  000F6C  6E1B               	movwf	??___altoft& (0+255),c
  1617  000F6E  0E00               	movlw	0
  1618  000F70  1418               	andwf	___altoft@c+1,w,c
  1619  000F72  6E1C               	movwf	(??___altoft+1)& (0+255),c
  1620  000F74  0E00               	movlw	0
  1621  000F76  1419               	andwf	___altoft@c+2,w,c
  1622  000F78  6E1D               	movwf	(??___altoft+2)& (0+255),c
  1623  000F7A  0EFF               	movlw	255
  1624  000F7C  141A               	andwf	___altoft@c+3,w,c
  1625  000F7E  6E1E               	movwf	(??___altoft+3)& (0+255),c
  1626  000F80  501B               	movf	??___altoft,w,c
  1627  000F82  101C               	iorwf	??___altoft+1,w,c
  1628  000F84  101D               	iorwf	??___altoft+2,w,c
  1629  000F86  101E               	iorwf	??___altoft+3,w,c
  1630  000F88  A4D8               	btfss	status,2,c
  1631  000F8A  D7E8               	goto	l2495
  1632  000F8C  C017  F00F         	movff	___altoft@c,___ftpack@arg
  1633  000F90  C018  F010         	movff	___altoft@c+1,___ftpack@arg+1
  1634  000F94  C019  F011         	movff	___altoft@c+2,___ftpack@arg+2
  1635  000F98  C01F  F012         	movff	___altoft@exp,___ftpack@exp
  1636  000F9C  C020  F013         	movff	___altoft@sign,___ftpack@sign
  1637  000FA0  EC73  F006         	call	___ftpack	;wreg free
  1638  000FA4  C00F  F017         	movff	?___ftpack,?___altoft
  1639  000FA8  C010  F018         	movff	?___ftpack+1,?___altoft+1
  1640  000FAC  C011  F019         	movff	?___ftpack+2,?___altoft+2
  1641  000FB0  0012               	return	
  1642  000FB2                     __end_of___altoft:
  1643                           	opt stack 0
  1644                           tblptru	equ	0xFF8
  1645                           tblptrh	equ	0xFF7
  1646                           tblptrl	equ	0xFF6
  1647                           tablat	equ	0xFF5
  1648                           intcon	equ	0xFF2
  1649                           postinc0	equ	0xFEE
  1650                           wreg	equ	0xFE8
  1651                           status	equ	0xFD8
  1652                           
  1653 ;; *************** function _timer_start *****************
  1654 ;; Defined at:
  1655 ;;		line 77 in file "../my_master.c"
  1656 ;; Parameters:    Size  Location     Type
  1657 ;;		None
  1658 ;; Auto vars:     Size  Location     Type
  1659 ;;		None
  1660 ;; Return value:  Size  Location     Type
  1661 ;;                  1    wreg      void 
  1662 ;; Registers used:
  1663 ;;		wreg, status,2
  1664 ;; Tracked objects:
  1665 ;;		On entry : 0/0
  1666 ;;		On exit  : 0/0
  1667 ;;		Unchanged: 0/0
  1668 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1669 ;;      Params:         0       0       0       0       0       0       0
  1670 ;;      Locals:         0       0       0       0       0       0       0
  1671 ;;      Temps:          0       0       0       0       0       0       0
  1672 ;;      Totals:         0       0       0       0       0       0       0
  1673 ;;Total ram usage:        0 bytes
  1674 ;; Hardware stack levels used:    1
  1675 ;; Hardware stack levels required when called:    1
  1676 ;; This function calls:
  1677 ;;		Nothing
  1678 ;; This function is called by:
  1679 ;;		_main
  1680 ;; This function uses a non-reentrant model
  1681 ;;
  1682                           
  1683                           	psect	text4
  1684  001268                     __ptext4:
  1685                           	opt stack 0
  1686  001268                     _timer_start:
  1687                           	opt stack 29
  1688                           
  1689                           ;my_master.c: 78: TMR0H = 0xFC;
  1690                           
  1691                           ;incstack = 0
  1692  001268  0EFC               	movlw	252
  1693  00126A  6ED7               	movwf	4055,c	;volatile
  1694                           
  1695                           ;my_master.c: 79: TMR0L = 0x18;
  1696  00126C  0E18               	movlw	24
  1697  00126E  6ED6               	movwf	4054,c	;volatile
  1698                           
  1699                           ;my_master.c: 80: INTCONbits.TMR0IE = 1;
  1700  001270  8AF2               	bsf	intcon,5,c	;volatile
  1701  001272  0012               	return		;funcret
  1702  001274                     __end_of_timer_start:
  1703                           	opt stack 0
  1704                           tblptru	equ	0xFF8
  1705                           tblptrh	equ	0xFF7
  1706                           tblptrl	equ	0xFF6
  1707                           tablat	equ	0xFF5
  1708                           intcon	equ	0xFF2
  1709                           postinc0	equ	0xFEE
  1710                           wreg	equ	0xFE8
  1711                           status	equ	0xFD8
  1712                           
  1713 ;; *************** function _timer_reset *****************
  1714 ;; Defined at:
  1715 ;;		line 88 in file "../my_master.c"
  1716 ;; Parameters:    Size  Location     Type
  1717 ;;		None
  1718 ;; Auto vars:     Size  Location     Type
  1719 ;;		None
  1720 ;; Return value:  Size  Location     Type
  1721 ;;                  1    wreg      void 
  1722 ;; Registers used:
  1723 ;;		wreg, status,2
  1724 ;; Tracked objects:
  1725 ;;		On entry : 0/0
  1726 ;;		On exit  : 0/0
  1727 ;;		Unchanged: 0/0
  1728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1729 ;;      Params:         0       0       0       0       0       0       0
  1730 ;;      Locals:         0       0       0       0       0       0       0
  1731 ;;      Temps:          0       0       0       0       0       0       0
  1732 ;;      Totals:         0       0       0       0       0       0       0
  1733 ;;Total ram usage:        0 bytes
  1734 ;; Hardware stack levels used:    1
  1735 ;; Hardware stack levels required when called:    1
  1736 ;; This function calls:
  1737 ;;		Nothing
  1738 ;; This function is called by:
  1739 ;;		_main
  1740 ;; This function uses a non-reentrant model
  1741 ;;
  1742                           
  1743                           	psect	text5
  1744  001246                     __ptext5:
  1745                           	opt stack 0
  1746  001246                     _timer_reset:
  1747                           	opt stack 29
  1748                           
  1749                           ;my_master.c: 89: cnt0 = 0;
  1750                           
  1751                           ;incstack = 0
  1752  001246  0E00               	movlw	0
  1753  001248  6E4A               	movwf	_cnt0,c
  1754  00124A  0E00               	movlw	0
  1755  00124C  6E4B               	movwf	_cnt0+1,c
  1756  00124E  0E00               	movlw	0
  1757  001250  6E4C               	movwf	_cnt0+2,c
  1758  001252  0E00               	movlw	0
  1759  001254  6E4D               	movwf	_cnt0+3,c
  1760  001256  0012               	return		;funcret
  1761  001258                     __end_of_timer_reset:
  1762                           	opt stack 0
  1763                           tblptru	equ	0xFF8
  1764                           tblptrh	equ	0xFF7
  1765                           tblptrl	equ	0xFF6
  1766                           tablat	equ	0xFF5
  1767                           intcon	equ	0xFF2
  1768                           postinc0	equ	0xFEE
  1769                           wreg	equ	0xFE8
  1770                           status	equ	0xFD8
  1771                           
  1772 ;; *************** function _serial_write *****************
  1773 ;; Defined at:
  1774 ;;		line 73 in file "../serial.c"
  1775 ;; Parameters:    Size  Location     Type
  1776 ;;  sendData        2   15[COMRAM] int 
  1777 ;; Auto vars:     Size  Location     Type
  1778 ;;  result          2   19[COMRAM] int 
  1779 ;; Return value:  Size  Location     Type
  1780 ;;                  2   15[COMRAM] int 
  1781 ;; Registers used:
  1782 ;;		wreg, status,2, status,0, cstack
  1783 ;; Tracked objects:
  1784 ;;		On entry : 0/0
  1785 ;;		On exit  : 0/0
  1786 ;;		Unchanged: 0/0
  1787 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1788 ;;      Params:         2       0       0       0       0       0       0
  1789 ;;      Locals:         2       0       0       0       0       0       0
  1790 ;;      Temps:          2       0       0       0       0       0       0
  1791 ;;      Totals:         6       0       0       0       0       0       0
  1792 ;;Total ram usage:        6 bytes
  1793 ;; Hardware stack levels used:    1
  1794 ;; Hardware stack levels required when called:    2
  1795 ;; This function calls:
  1796 ;;		_timeout
  1797 ;; This function is called by:
  1798 ;;		_main
  1799 ;; This function uses a non-reentrant model
  1800 ;;
  1801                           
  1802                           	psect	text6
  1803  0010CC                     __ptext6:
  1804                           	opt stack 0
  1805  0010CC                     _serial_write:
  1806                           	opt stack 28
  1807  0010CC                     l2749:
  1808  0010CC  B2AC               	btfsc	4012,1,c	;volatile
  1809  0010CE  D002               	goto	u3230
  1810  0010D0  0E01               	movlw	1
  1811  0010D2  D001               	goto	u3240
  1812  0010D4                     u3230:
  1813  0010D4  0E00               	movlw	0
  1814  0010D6                     u3240:
  1815  0010D6  EC3D  F008         	call	_timeout
  1816  0010DA  6E12               	movwf	??_serial_write& (0+255),c
  1817  0010DC  5012               	movf	??_serial_write,w,c
  1818  0010DE  6E14               	movwf	serial_write@result,c
  1819  0010E0  6A15               	clrf	serial_write@result+1,c
  1820  0010E2  5014               	movf	serial_write@result,w,c
  1821  0010E4  1015               	iorwf	serial_write@result+1,w,c
  1822  0010E6  B4D8               	btfsc	status,2,c
  1823  0010E8  D7F1               	goto	l2749
  1824                           
  1825                           ;serial.c: 77: if(result == -1)
  1826  0010EA  2814               	incf	serial_write@result,w,c
  1827  0010EC  E103               	bnz	l221
  1828  0010EE  2815               	incf	serial_write@result+1,w,c
  1829  0010F0  B4D8               	btfsc	status,2,c
  1830  0010F2  0012               	return	
  1831  0010F4                     l221:
  1832                           
  1833                           ;serial.c: 80: }
  1834                           ;serial.c: 81: TXREG = sendData & 0xff;
  1835  0010F4  C010  FFAD         	movff	serial_write@sendData,4013	;volatile
  1836                           
  1837                           ;serial.c: 82: if( TXSTAbits.TX9 )
  1838  0010F8  ACAC               	btfss	4012,6,c	;volatile
  1839  0010FA  0012               	return	
  1840                           
  1841                           ;serial.c: 83: {
  1842                           ;serial.c: 84: TXSTAbits.TX9D = sendData >> 8;
  1843  0010FC  C011  F012         	movff	serial_write@sendData+1,??_serial_write
  1844  001100  6A13               	clrf	(??_serial_write+1)& (0+255),c
  1845  001102  BE12               	btfsc	??_serial_write& (0+255),7,c
  1846  001104  6813               	setf	(??_serial_write+1)& (0+255),c
  1847  001106  50AC               	movf	4012,w,c	;volatile
  1848  001108  1812               	xorwf	??_serial_write,w,c
  1849  00110A  0BFE               	andlw	-2
  1850  00110C  1812               	xorwf	??_serial_write,w,c
  1851  00110E  6EAC               	movwf	4012,c	;volatile
  1852  001110  0012               	return	
  1853  001112                     __end_of_serial_write:
  1854                           	opt stack 0
  1855                           tblptru	equ	0xFF8
  1856                           tblptrh	equ	0xFF7
  1857                           tblptrl	equ	0xFF6
  1858                           tablat	equ	0xFF5
  1859                           intcon	equ	0xFF2
  1860                           postinc0	equ	0xFEE
  1861                           wreg	equ	0xFE8
  1862                           status	equ	0xFD8
  1863                           
  1864 ;; *************** function _timeout *****************
  1865 ;; Defined at:
  1866 ;;		line 7 in file "../serial.c"
  1867 ;; Parameters:    Size  Location     Type
  1868 ;;  v               1    wreg     unsigned char 
  1869 ;; Auto vars:     Size  Location     Type
  1870 ;;  v               1   14[COMRAM] unsigned char 
  1871 ;; Return value:  Size  Location     Type
  1872 ;;                  1    wreg      unsigned char 
  1873 ;; Registers used:
  1874 ;;		wreg, status,2, status,0
  1875 ;; Tracked objects:
  1876 ;;		On entry : 0/0
  1877 ;;		On exit  : 0/0
  1878 ;;		Unchanged: 0/0
  1879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1880 ;;      Params:         0       0       0       0       0       0       0
  1881 ;;      Locals:         1       0       0       0       0       0       0
  1882 ;;      Temps:          0       0       0       0       0       0       0
  1883 ;;      Totals:         1       0       0       0       0       0       0
  1884 ;;Total ram usage:        1 bytes
  1885 ;; Hardware stack levels used:    1
  1886 ;; Hardware stack levels required when called:    1
  1887 ;; This function calls:
  1888 ;;		Nothing
  1889 ;; This function is called by:
  1890 ;;		_serial_write
  1891 ;; This function uses a non-reentrant model
  1892 ;;
  1893                           
  1894                           	psect	text7
  1895  00107A                     __ptext7:
  1896                           	opt stack 0
  1897  00107A                     _timeout:
  1898                           	opt stack 28
  1899                           
  1900                           ;incstack = 0
  1901                           ;timeout@v stored from wreg
  1902  00107A  6E0F               	movwf	timeout@v,c
  1903                           
  1904                           ;serial.c: 9: static unsigned long time = 0;
  1905                           ;serial.c: 11: if (++time > 5000)
  1906  00107C  0E01               	movlw	1
  1907  00107E  2646               	addwf	timeout@time,f,c
  1908  001080  0E00               	movlw	0
  1909  001082  2247               	addwfc	timeout@time+1,f,c
  1910  001084  2248               	addwfc	timeout@time+2,f,c
  1911  001086  2249               	addwfc	timeout@time+3,f,c
  1912  001088  5049               	movf	timeout@time+3,w,c
  1913  00108A  1048               	iorwf	timeout@time+2,w,c
  1914  00108C  E106               	bnz	u2510
  1915  00108E  0E89               	movlw	137
  1916  001090  5C46               	subwf	timeout@time,w,c
  1917  001092  0E13               	movlw	19
  1918  001094  5847               	subwfb	timeout@time+1,w,c
  1919  001096  A0D8               	btfss	status,0,c
  1920  001098  D00A               	goto	l2475
  1921  00109A                     u2510:
  1922                           
  1923                           ;serial.c: 12: {
  1924                           ;serial.c: 14: time = 0;
  1925  00109A  0E00               	movlw	0
  1926  00109C  6E46               	movwf	timeout@time,c
  1927  00109E  0E00               	movlw	0
  1928  0010A0  6E47               	movwf	timeout@time+1,c
  1929  0010A2  0E00               	movlw	0
  1930  0010A4  6E48               	movwf	timeout@time+2,c
  1931  0010A6  0E00               	movlw	0
  1932  0010A8  6E49               	movwf	timeout@time+3,c
  1933                           
  1934                           ;serial.c: 15: return -1;
  1935  0010AA  0EFF               	movlw	255
  1936  0010AC  0012               	return	
  1937  0010AE                     l2475:
  1938                           
  1939                           ;serial.c: 17: else if (v == 0)
  1940  0010AE  500F               	movf	timeout@v,w,c
  1941  0010B0  A4D8               	btfss	status,2,c
  1942  0010B2  D00A               	goto	l2483
  1943                           
  1944                           ;serial.c: 18: {
  1945                           ;serial.c: 20: time = 0;
  1946  0010B4  0E00               	movlw	0
  1947  0010B6  6E46               	movwf	timeout@time,c
  1948  0010B8  0E00               	movlw	0
  1949  0010BA  6E47               	movwf	timeout@time+1,c
  1950  0010BC  0E00               	movlw	0
  1951  0010BE  6E48               	movwf	timeout@time+2,c
  1952  0010C0  0E00               	movlw	0
  1953  0010C2  6E49               	movwf	timeout@time+3,c
  1954                           
  1955                           ;serial.c: 21: return 1;
  1956  0010C4  0E01               	movlw	1
  1957  0010C6  0012               	return	
  1958  0010C8                     l2483:
  1959                           
  1960                           ;serial.c: 22: }
  1961                           ;serial.c: 24: return 0;
  1962  0010C8  0E00               	movlw	0
  1963  0010CA  0012               	return	
  1964  0010CC                     __end_of_timeout:
  1965                           	opt stack 0
  1966                           tblptru	equ	0xFF8
  1967                           tblptrh	equ	0xFF7
  1968                           tblptrl	equ	0xFF6
  1969                           tablat	equ	0xFF5
  1970                           intcon	equ	0xFF2
  1971                           postinc0	equ	0xFEE
  1972                           wreg	equ	0xFE8
  1973                           status	equ	0xFD8
  1974                           
  1975 ;; *************** function _init *****************
  1976 ;; Defined at:
  1977 ;;		line 206 in file "../my_master.c"
  1978 ;; Parameters:    Size  Location     Type
  1979 ;;		None
  1980 ;; Auto vars:     Size  Location     Type
  1981 ;;		None
  1982 ;; Return value:  Size  Location     Type
  1983 ;;                  1    wreg      void 
  1984 ;; Registers used:
  1985 ;;		wreg, status,2, status,0, cstack
  1986 ;; Tracked objects:
  1987 ;;		On entry : 0/0
  1988 ;;		On exit  : 0/0
  1989 ;;		Unchanged: 0/0
  1990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1991 ;;      Params:         0       0       0       0       0       0       0
  1992 ;;      Locals:         0       0       0       0       0       0       0
  1993 ;;      Temps:          0       0       0       0       0       0       0
  1994 ;;      Totals:         0       0       0       0       0       0       0
  1995 ;;Total ram usage:        0 bytes
  1996 ;; Hardware stack levels used:    1
  1997 ;; Hardware stack levels required when called:    2
  1998 ;; This function calls:
  1999 ;;		_serial_baud
  2000 ;;		_serial_init
  2001 ;; This function is called by:
  2002 ;;		_main
  2003 ;; This function uses a non-reentrant model
  2004 ;;
  2005                           
  2006                           	psect	text8
  2007  000FB2                     __ptext8:
  2008                           	opt stack 0
  2009  000FB2                     _init:
  2010                           	opt stack 28
  2011                           
  2012                           ;my_master.c: 207: TRISA = TRISB = TRISC = TRISD = TRISE = 0;
  2013                           
  2014                           ;incstack = 0
  2015  000FB2  0E00               	movlw	0
  2016  000FB4  6E96               	movwf	3990,c	;volatile
  2017  000FB6  CF96 FF95          	movff	3990,3989	;volatile
  2018  000FBA  CF95 FF94          	movff	3989,3988	;volatile
  2019  000FBE  CF94 FF93          	movff	3988,3987	;volatile
  2020  000FC2  CF93 FF92          	movff	3987,3986	;volatile
  2021                           
  2022                           ;my_master.c: 208: LATA = LATB = LATC = LATD = LATE = 0;
  2023  000FC6  0E00               	movlw	0
  2024  000FC8  6E8D               	movwf	3981,c	;volatile
  2025  000FCA  CF8D FF8C          	movff	3981,3980	;volatile
  2026  000FCE  CF8C FF8B          	movff	3980,3979	;volatile
  2027  000FD2  CF8B FF8A          	movff	3979,3978	;volatile
  2028  000FD6  CF8A FF89          	movff	3978,3977	;volatile
  2029                           
  2030                           ;my_master.c: 209: TRISC = 0b00011000;
  2031  000FDA  0E18               	movlw	24
  2032  000FDC  6E94               	movwf	3988,c	;volatile
  2033                           
  2034                           ;my_master.c: 210: SSPSTAT = 0b00100000;
  2035  000FDE  0E20               	movlw	32
  2036  000FE0  6EC7               	movwf	4039,c	;volatile
  2037                           
  2038                           ;my_master.c: 211: SSPCON1 = 0b00101000;
  2039  000FE2  0E28               	movlw	40
  2040  000FE4  6EC6               	movwf	4038,c	;volatile
  2041                           
  2042                           ;my_master.c: 212: SSPCON2 = 0b00001000;
  2043  000FE6  0E08               	movlw	8
  2044  000FE8  6EC5               	movwf	4037,c	;volatile
  2045                           
  2046                           ;my_master.c: 217: SSPADD = 24;
  2047  000FEA  0E18               	movlw	24
  2048  000FEC  6EC8               	movwf	4040,c	;volatile
  2049                           
  2050                           ;my_master.c: 218: T0CON = 0b10001000;
  2051  000FEE  0E88               	movlw	136
  2052  000FF0  6ED5               	movwf	4053,c	;volatile
  2053                           
  2054                           ;my_master.c: 219: RCONbits.IPEN = 0;
  2055  000FF2  9ED0               	bcf	4048,7,c	;volatile
  2056                           
  2057                           ;my_master.c: 220: INTCON2bits.TMR0IP = 1;
  2058  000FF4  84F1               	bsf	intcon2,2,c	;volatile
  2059                           
  2060                           ;my_master.c: 221: INTCONbits.TMR0IE = 0;
  2061  000FF6  9AF2               	bcf	intcon,5,c	;volatile
  2062                           
  2063                           ;my_master.c: 222: INTCONbits.GIE = 0;
  2064  000FF8  9EF2               	bcf	intcon,7,c	;volatile
  2065                           
  2066                           ;my_master.c: 223: TMR0H = 0xFC;
  2067  000FFA  0EFC               	movlw	252
  2068  000FFC  6ED7               	movwf	4055,c	;volatile
  2069                           
  2070                           ;my_master.c: 224: TMR0L = 0x18;
  2071  000FFE  0E18               	movlw	24
  2072  001000  6ED6               	movwf	4054,c	;volatile
  2073                           
  2074                           ;my_master.c: 225: serial_baud(9600);
  2075  001002  0E80               	movlw	128
  2076  001004  6E0F               	movwf	serial_baud@baudrate,c
  2077  001006  0E25               	movlw	37
  2078  001008  6E10               	movwf	serial_baud@baudrate+1,c
  2079  00100A  0E00               	movlw	0
  2080  00100C  6E11               	movwf	serial_baud@baudrate+2,c
  2081  00100E  0E00               	movlw	0
  2082  001010  6E12               	movwf	serial_baud@baudrate+3,c
  2083  001012  EC14  F006         	call	_serial_baud	;wreg free
  2084                           
  2085                           ;my_master.c: 226: serial_init();
  2086  001016  EC2C  F009         	call	_serial_init	;wreg free
  2087                           
  2088                           ;my_master.c: 227: INTCONbits.GIE = 1;
  2089  00101A  8EF2               	bsf	intcon,7,c	;volatile
  2090  00101C  0012               	return		;funcret
  2091  00101E                     __end_of_init:
  2092                           	opt stack 0
  2093                           tblptru	equ	0xFF8
  2094                           tblptrh	equ	0xFF7
  2095                           tblptrl	equ	0xFF6
  2096                           tablat	equ	0xFF5
  2097                           intcon	equ	0xFF2
  2098                           intcon2	equ	0xFF1
  2099                           postinc0	equ	0xFEE
  2100                           wreg	equ	0xFE8
  2101                           status	equ	0xFD8
  2102                           
  2103 ;; *************** function _serial_init *****************
  2104 ;; Defined at:
  2105 ;;		line 27 in file "../serial.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      void 
  2112 ;; Registers used:
  2113 ;;		wreg, status,2
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 0/0
  2117 ;;		Unchanged: 0/0
  2118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2119 ;;      Params:         0       0       0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0       0       0
  2122 ;;      Totals:         0       0       0       0       0       0       0
  2123 ;;Total ram usage:        0 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    1
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_init
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132                           
  2133                           	psect	text9
  2134  001258                     __ptext9:
  2135                           	opt stack 0
  2136  001258                     _serial_init:
  2137                           	opt stack 28
  2138                           
  2139                           ;serial.c: 29: TRISCbits.RC6 = 0;
  2140                           
  2141                           ;incstack = 0
  2142  001258  9C94               	bcf	3988,6,c	;volatile
  2143                           
  2144                           ;serial.c: 30: TRISCbits.RC7 = 1;
  2145  00125A  8E94               	bsf	3988,7,c	;volatile
  2146                           
  2147                           ;serial.c: 32: TXSTA = 0b10100110;
  2148  00125C  0EA6               	movlw	166
  2149  00125E  6EAC               	movwf	4012,c	;volatile
  2150                           
  2151                           ;serial.c: 33: RCSTA = 0b10110000;
  2152  001260  0EB0               	movlw	176
  2153  001262  6EAB               	movwf	4011,c	;volatile
  2154                           
  2155                           ;serial.c: 34: SPBRG = 255;
  2156  001264  68AF               	setf	4015,c	;volatile
  2157  001266  0012               	return		;funcret
  2158  001268                     __end_of_serial_init:
  2159                           	opt stack 0
  2160                           tblptru	equ	0xFF8
  2161                           tblptrh	equ	0xFF7
  2162                           tblptrl	equ	0xFF6
  2163                           tablat	equ	0xFF5
  2164                           intcon	equ	0xFF2
  2165                           intcon2	equ	0xFF1
  2166                           postinc0	equ	0xFEE
  2167                           wreg	equ	0xFE8
  2168                           status	equ	0xFD8
  2169                           
  2170 ;; *************** function _serial_baud *****************
  2171 ;; Defined at:
  2172 ;;		line 37 in file "../serial.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  baudrate        4   14[COMRAM] unsigned long 
  2175 ;; Auto vars:     Size  Location     Type
  2176 ;;		None
  2177 ;; Return value:  Size  Location     Type
  2178 ;;                  1    wreg      void 
  2179 ;; Registers used:
  2180 ;;		wreg, status,2, status,0
  2181 ;; Tracked objects:
  2182 ;;		On entry : 0/0
  2183 ;;		On exit  : 0/0
  2184 ;;		Unchanged: 0/0
  2185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2186 ;;      Params:         4       0       0       0       0       0       0
  2187 ;;      Locals:         0       0       0       0       0       0       0
  2188 ;;      Temps:          4       0       0       0       0       0       0
  2189 ;;      Totals:         8       0       0       0       0       0       0
  2190 ;;Total ram usage:        8 bytes
  2191 ;; Hardware stack levels used:    1
  2192 ;; Hardware stack levels required when called:    1
  2193 ;; This function calls:
  2194 ;;		Nothing
  2195 ;; This function is called by:
  2196 ;;		_init
  2197 ;; This function uses a non-reentrant model
  2198 ;;
  2199                           
  2200                           	psect	text10
  2201  000C28                     __ptext10:
  2202                           	opt stack 0
  2203  000C28                     _serial_baud:
  2204                           	opt stack 28
  2205                           
  2206                           ;serial.c: 39: switch(baudrate)
  2207                           
  2208                           ;incstack = 0
  2209  000C28  D011               	goto	l2417
  2210  000C2A                     l205:
  2211                           
  2212                           ;serial.c: 42: SPBRG = 255;
  2213  000C2A  68AF               	setf	4015,c	;volatile
  2214                           
  2215                           ;serial.c: 43: break;
  2216  000C2C  0012               	return	
  2217  000C2E                     l2405:
  2218                           
  2219                           ;serial.c: 46: SPBRG = 129;
  2220  000C2E  0E81               	movlw	129
  2221  000C30  6EAF               	movwf	4015,c	;volatile
  2222                           
  2223                           ;serial.c: 47: break;
  2224  000C32  0012               	return	
  2225  000C34                     l2407:
  2226                           
  2227                           ;serial.c: 50: SPBRG = 42;
  2228  000C34  0E2A               	movlw	42
  2229  000C36  6EAF               	movwf	4015,c	;volatile
  2230                           
  2231                           ;serial.c: 51: break;
  2232  000C38  0012               	return	
  2233  000C3A                     l2409:
  2234                           
  2235                           ;serial.c: 54: SPBRG = 32;
  2236  000C3A  0E20               	movlw	32
  2237  000C3C  6EAF               	movwf	4015,c	;volatile
  2238                           
  2239                           ;serial.c: 55: break;
  2240  000C3E  0012               	return	
  2241  000C40                     l2411:
  2242                           
  2243                           ;serial.c: 58: SPBRG = 21;
  2244  000C40  0E15               	movlw	21
  2245  000C42  6EAF               	movwf	4015,c	;volatile
  2246                           
  2247                           ;serial.c: 59: break;
  2248  000C44  0012               	return	
  2249  000C46                     l2413:
  2250                           
  2251                           ;serial.c: 62: SPBRG = 10;
  2252  000C46  0E0A               	movlw	10
  2253  000C48  6EAF               	movwf	4015,c	;volatile
  2254                           
  2255                           ;serial.c: 65: }
  2256                           
  2257                           ;serial.c: 63: break;
  2258  000C4A  0012               	return	
  2259  000C4C                     l2417:
  2260  000C4C  C00F  F013         	movff	serial_baud@baudrate,??_serial_baud
  2261  000C50  C010  F014         	movff	serial_baud@baudrate+1,??_serial_baud+1
  2262  000C54  C011  F015         	movff	serial_baud@baudrate+2,??_serial_baud+2
  2263  000C58  C012  F016         	movff	serial_baud@baudrate+3,??_serial_baud+3
  2264                           
  2265                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  2266                           ; Switch size 1, requested type "space"
  2267                           ; Number of cases is 1, Range of values is 0 to 0
  2268                           ; switch strategies available:
  2269                           ; Name         Instructions Cycles
  2270                           ; simple_byte            4     3 (average)
  2271                           ;	Chosen strategy is simple_byte
  2272  000C5C  5016               	movf	??_serial_baud+3,w,c
  2273  000C5E  0A00               	xorlw	0	; case 0
  2274  000C60  A4D8               	btfss	status,2,c
  2275  000C62  0012               	return	
  2276  000C64  D035               	goto	l3249
  2277  000C66                     l3243:
  2278                           
  2279                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 3 sub-sw
      +                          itches
  2280                           ; Switch size 1, requested type "space"
  2281                           ; Number of cases is 3, Range of values is 37 to 225
  2282                           ; switch strategies available:
  2283                           ; Name         Instructions Cycles
  2284                           ; simple_byte           10     6 (average)
  2285                           ;	Chosen strategy is simple_byte
  2286  000C66  5014               	movf	??_serial_baud+1,w,c
  2287  000C68  0A25               	xorlw	37	; case 37
  2288  000C6A  B4D8               	btfsc	status,2,c
  2289  000C6C  D007               	goto	l3251
  2290  000C6E  0A6E               	xorlw	110	; case 75
  2291  000C70  B4D8               	btfsc	status,2,c
  2292  000C72  D009               	goto	l3253
  2293  000C74  0AAA               	xorlw	170	; case 225
  2294  000C76  A4D8               	btfss	status,2,c
  2295  000C78  0012               	return	
  2296  000C7A  D00A               	goto	l3255
  2297  000C7C                     l3251:
  2298                           
  2299                           ; Switch size 1, requested type "space"
  2300                           ; Number of cases is 1, Range of values is 128 to 128
  2301                           ; switch strategies available:
  2302                           ; Name         Instructions Cycles
  2303                           ; simple_byte            4     3 (average)
  2304                           ;	Chosen strategy is simple_byte
  2305  000C7C  5013               	movf	??_serial_baud,w,c
  2306  000C7E  0A80               	xorlw	128	; case 128
  2307  000C80  A4D8               	btfss	status,2,c
  2308  000C82  0012               	return	
  2309  000C84  D7D2               	goto	l205
  2310  000C86                     l3253:
  2311                           
  2312                           ; Switch size 1, requested type "space"
  2313                           ; Number of cases is 1, Range of values is 0 to 0
  2314                           ; switch strategies available:
  2315                           ; Name         Instructions Cycles
  2316                           ; simple_byte            4     3 (average)
  2317                           ;	Chosen strategy is simple_byte
  2318  000C86  5013               	movf	??_serial_baud,w,c
  2319  000C88  0A00               	xorlw	0	; case 0
  2320  000C8A  A4D8               	btfss	status,2,c
  2321  000C8C  0012               	return	
  2322  000C8E  D7CF               	goto	l2405
  2323  000C90                     l3255:
  2324                           
  2325                           ; Switch size 1, requested type "space"
  2326                           ; Number of cases is 1, Range of values is 0 to 0
  2327                           ; switch strategies available:
  2328                           ; Name         Instructions Cycles
  2329                           ; simple_byte            4     3 (average)
  2330                           ;	Chosen strategy is simple_byte
  2331  000C90  5013               	movf	??_serial_baud,w,c
  2332  000C92  0A00               	xorlw	0	; case 0
  2333  000C94  A4D8               	btfss	status,2,c
  2334  000C96  0012               	return	
  2335  000C98  D7CD               	goto	l2407
  2336  000C9A                     l3245:
  2337                           
  2338                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 2 sub-sw
      +                          itches
  2339                           ; Switch size 1, requested type "space"
  2340                           ; Number of cases is 2, Range of values is 44 to 194
  2341                           ; switch strategies available:
  2342                           ; Name         Instructions Cycles
  2343                           ; simple_byte            7     4 (average)
  2344                           ;	Chosen strategy is simple_byte
  2345  000C9A  5014               	movf	??_serial_baud+1,w,c
  2346  000C9C  0A2C               	xorlw	44	; case 44
  2347  000C9E  B4D8               	btfsc	status,2,c
  2348  000CA0  D004               	goto	l3257
  2349  000CA2  0AEE               	xorlw	238	; case 194
  2350  000CA4  A4D8               	btfss	status,2,c
  2351  000CA6  0012               	return	
  2352  000CA8  D005               	goto	l3259
  2353  000CAA                     l3257:
  2354                           
  2355                           ; Switch size 1, requested type "space"
  2356                           ; Number of cases is 1, Range of values is 0 to 0
  2357                           ; switch strategies available:
  2358                           ; Name         Instructions Cycles
  2359                           ; simple_byte            4     3 (average)
  2360                           ;	Chosen strategy is simple_byte
  2361  000CAA  5013               	movf	??_serial_baud,w,c
  2362  000CAC  0A00               	xorlw	0	; case 0
  2363  000CAE  A4D8               	btfss	status,2,c
  2364  000CB0  0012               	return	
  2365  000CB2  D7C3               	goto	l2409
  2366  000CB4                     l3259:
  2367                           
  2368                           ; Switch size 1, requested type "space"
  2369                           ; Number of cases is 1, Range of values is 0 to 0
  2370                           ; switch strategies available:
  2371                           ; Name         Instructions Cycles
  2372                           ; simple_byte            4     3 (average)
  2373                           ;	Chosen strategy is simple_byte
  2374  000CB4  5013               	movf	??_serial_baud,w,c
  2375  000CB6  0A00               	xorlw	0	; case 0
  2376  000CB8  A4D8               	btfss	status,2,c
  2377  000CBA  0012               	return	
  2378  000CBC  D7C1               	goto	l2411
  2379  000CBE                     l3247:
  2380                           
  2381                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2382                           ; Switch size 1, requested type "space"
  2383                           ; Number of cases is 1, Range of values is 132 to 132
  2384                           ; switch strategies available:
  2385                           ; Name         Instructions Cycles
  2386                           ; simple_byte            4     3 (average)
  2387                           ;	Chosen strategy is simple_byte
  2388  000CBE  5014               	movf	??_serial_baud+1,w,c
  2389  000CC0  0A84               	xorlw	132	; case 132
  2390  000CC2  A4D8               	btfss	status,2,c
  2391  000CC4  0012               	return	
  2392                           
  2393                           ; Switch size 1, requested type "space"
  2394                           ; Number of cases is 1, Range of values is 0 to 0
  2395                           ; switch strategies available:
  2396                           ; Name         Instructions Cycles
  2397                           ; simple_byte            4     3 (average)
  2398                           ;	Chosen strategy is simple_byte
  2399  000CC6  5013               	movf	??_serial_baud,w,c
  2400  000CC8  0A00               	xorlw	0	; case 0
  2401  000CCA  A4D8               	btfss	status,2,c
  2402  000CCC  0012               	return	
  2403  000CCE  D7BB               	goto	l2413
  2404  000CD0                     l3249:
  2405                           
  2406                           ; Switch size 1, requested type "space"
  2407                           ; Number of cases is 3, Range of values is 0 to 3
  2408                           ; switch strategies available:
  2409                           ; Name         Instructions Cycles
  2410                           ; simple_byte           10     6 (average)
  2411                           ;	Chosen strategy is simple_byte
  2412  000CD0  5015               	movf	??_serial_baud+2,w,c
  2413  000CD2  0A00               	xorlw	0	; case 0
  2414  000CD4  B4D8               	btfsc	status,2,c
  2415  000CD6  D7C7               	goto	l3243
  2416  000CD8  0A01               	xorlw	1	; case 1
  2417  000CDA  B4D8               	btfsc	status,2,c
  2418  000CDC  D7DE               	goto	l3245
  2419  000CDE  0A02               	xorlw	2	; case 3
  2420  000CE0  A4D8               	btfss	status,2,c
  2421  000CE2  0012               	return	
  2422  000CE4  D7EC               	goto	l3247
  2423  000CE6                     __end_of_serial_baud:
  2424                           	opt stack 0
  2425                           tblptru	equ	0xFF8
  2426                           tblptrh	equ	0xFF7
  2427                           tblptrl	equ	0xFF6
  2428                           tablat	equ	0xFF5
  2429                           intcon	equ	0xFF2
  2430                           intcon2	equ	0xFF1
  2431                           postinc0	equ	0xFEE
  2432                           wreg	equ	0xFE8
  2433                           status	equ	0xFD8
  2434                           
  2435 ;; *************** function _i2c_write *****************
  2436 ;; Defined at:
  2437 ;;		line 104 in file "../my_master.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;  addr            2   15[COMRAM] int 
  2440 ;;  data            2   17[COMRAM] PTR unsigned char 
  2441 ;;		 -> main@W_data2(1), main@W_data(1), 
  2442 ;;  num             1   19[COMRAM] unsigned char 
  2443 ;;  start           1   20[COMRAM] unsigned char 
  2444 ;;  stop            1   21[COMRAM] unsigned char 
  2445 ;; Auto vars:     Size  Location     Type
  2446 ;;  cnt             2   26[COMRAM] int 
  2447 ;;  ans             1   25[COMRAM] unsigned char 
  2448 ;; Return value:  Size  Location     Type
  2449 ;;                  1    wreg      void 
  2450 ;; Registers used:
  2451 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2452 ;; Tracked objects:
  2453 ;;		On entry : 0/0
  2454 ;;		On exit  : 0/0
  2455 ;;		Unchanged: 0/0
  2456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2457 ;;      Params:         7       0       0       0       0       0       0
  2458 ;;      Locals:         3       0       0       0       0       0       0
  2459 ;;      Temps:          3       0       0       0       0       0       0
  2460 ;;      Totals:        13       0       0       0       0       0       0
  2461 ;;Total ram usage:       13 bytes
  2462 ;; Hardware stack levels used:    1
  2463 ;; Hardware stack levels required when called:    2
  2464 ;; This function calls:
  2465 ;;		_Timeout
  2466 ;; This function is called by:
  2467 ;;		_main
  2468 ;; This function uses a non-reentrant model
  2469 ;;
  2470                           
  2471                           	psect	text11
  2472  000850                     __ptext11:
  2473                           	opt stack 0
  2474  000850                     _i2c_write:
  2475                           	opt stack 28
  2476                           
  2477                           ;my_master.c: 105: char ans = 0;
  2478                           
  2479                           ;incstack = 0
  2480  000850  0E00               	movlw	0
  2481  000852  6E1A               	movwf	i2c_write@ans,c
  2482                           
  2483                           ;my_master.c: 106: int cnt = 0;
  2484  000854  0E00               	movlw	0
  2485  000856  6E1C               	movwf	i2c_write@cnt+1,c
  2486  000858  0E00               	movlw	0
  2487  00085A  6E1B               	movwf	i2c_write@cnt,c
  2488                           
  2489                           ;my_master.c: 107: if(start){
  2490  00085C  5015               	movf	i2c_write@start,w,c
  2491  00085E  B4D8               	btfsc	status,2,c
  2492  000860  D00C               	goto	l86
  2493                           
  2494                           ;my_master.c: 108: SSPCON2bits.SEN = 1;
  2495  000862  80C5               	bsf	4037,0,c	;volatile
  2496  000864                     l2635:
  2497  000864  B0C5               	btfsc	4037,0,c	;volatile
  2498  000866  D002               	goto	u2830
  2499  000868  0E01               	movlw	1
  2500  00086A  D001               	goto	u2840
  2501  00086C                     u2830:
  2502  00086C  0E00               	movlw	0
  2503  00086E                     u2840:
  2504  00086E  EC0F  F008         	call	_Timeout
  2505  000872  6E1A               	movwf	i2c_write@ans,c
  2506  000874  501A               	movf	i2c_write@ans,w,c
  2507  000876  A4D8               	btfss	status,2,c
  2508  000878  D7F5               	goto	l2635
  2509  00087A                     l86:
  2510                           
  2511                           ;my_master.c: 112: }
  2512                           ;my_master.c: 113: }
  2513                           ;my_master.c: 114: PIR1bits.SSPIF = 0;
  2514  00087A  969E               	bcf	3998,3,c	;volatile
  2515                           
  2516                           ;my_master.c: 115: SSPBUF = (addr << 1);
  2517  00087C  5010               	movf	i2c_write@addr,w,c
  2518  00087E  2410               	addwf	i2c_write@addr,w,c
  2519  000880  6EC9               	movwf	4041,c	;volatile
  2520  000882                     l2641:
  2521  000882  A69E               	btfss	3998,3,c	;volatile
  2522  000884  D002               	goto	u2860
  2523  000886  0E01               	movlw	1
  2524  000888  D001               	goto	u2866
  2525  00088A                     u2860:
  2526  00088A  0E00               	movlw	0
  2527  00088C                     u2866:
  2528  00088C  EC0F  F008         	call	_Timeout
  2529  000890  6E1A               	movwf	i2c_write@ans,c
  2530  000892  501A               	movf	i2c_write@ans,w,c
  2531  000894  A4D8               	btfss	status,2,c
  2532  000896  D7F5               	goto	l2641
  2533                           
  2534                           ;my_master.c: 119: }
  2535                           ;my_master.c: 120: PIR1bits.SSPIF = 0;
  2536                           
  2537                           ;my_master.c: 118: return;
  2538                           
  2539                           ;my_master.c: 117: if(ans == -1){
  2540  000898  969E               	bcf	3998,3,c	;volatile
  2541  00089A                     l2645:
  2542  00089A  BCC5               	btfsc	4037,6,c	;volatile
  2543  00089C  D002               	goto	u2880
  2544  00089E  0E01               	movlw	1
  2545  0008A0  D001               	goto	u2890
  2546  0008A2                     u2880:
  2547  0008A2  0E00               	movlw	0
  2548  0008A4                     u2890:
  2549  0008A4  EC0F  F008         	call	_Timeout
  2550  0008A8  6E1A               	movwf	i2c_write@ans,c
  2551  0008AA  501A               	movf	i2c_write@ans,w,c
  2552  0008AC  A4D8               	btfss	status,2,c
  2553  0008AE  D7F5               	goto	l2645
  2554                           
  2555                           ;my_master.c: 124: }
  2556                           ;my_master.c: 125: for(cnt = 0; cnt < num; cnt++){
  2557                           
  2558                           ;my_master.c: 123: return;
  2559                           
  2560                           ;my_master.c: 122: if(ans == -1){
  2561  0008B0  0E00               	movlw	0
  2562  0008B2  6E1C               	movwf	i2c_write@cnt+1,c
  2563  0008B4  0E00               	movlw	0
  2564  0008B6  6E1B               	movwf	i2c_write@cnt,c
  2565  0008B8  D022               	goto	l2663
  2566  0008BA                     l2651:
  2567                           
  2568                           ;my_master.c: 126: SSPBUF = data[cnt];
  2569  0008BA  501B               	movf	i2c_write@cnt,w,c
  2570  0008BC  2412               	addwf	i2c_write@data,w,c
  2571  0008BE  6ED9               	movwf	fsr2l,c
  2572  0008C0  501C               	movf	i2c_write@cnt+1,w,c
  2573  0008C2  2013               	addwfc	i2c_write@data+1,w,c
  2574  0008C4  6EDA               	movwf	fsr2h,c
  2575  0008C6  50DF               	movf	indf2,w,c
  2576  0008C8  6EC9               	movwf	4041,c	;volatile
  2577  0008CA                     l2653:
  2578  0008CA  A69E               	btfss	3998,3,c	;volatile
  2579  0008CC  D002               	goto	u2910
  2580  0008CE  0E01               	movlw	1
  2581  0008D0  D001               	goto	u2916
  2582  0008D2                     u2910:
  2583  0008D2  0E00               	movlw	0
  2584  0008D4                     u2916:
  2585  0008D4  EC0F  F008         	call	_Timeout
  2586  0008D8  6E1A               	movwf	i2c_write@ans,c
  2587  0008DA  501A               	movf	i2c_write@ans,w,c
  2588  0008DC  A4D8               	btfss	status,2,c
  2589  0008DE  D7F5               	goto	l2653
  2590                           
  2591                           ;my_master.c: 130: }
  2592                           ;my_master.c: 131: PIR1bits.SSPIF = 0;
  2593                           
  2594                           ;my_master.c: 129: return;
  2595                           
  2596                           ;my_master.c: 128: if(ans == -1){
  2597  0008E0  969E               	bcf	3998,3,c	;volatile
  2598  0008E2                     l2657:
  2599  0008E2  BCC5               	btfsc	4037,6,c	;volatile
  2600  0008E4  D002               	goto	u2930
  2601  0008E6  0E01               	movlw	1
  2602  0008E8  D001               	goto	u2940
  2603  0008EA                     u2930:
  2604  0008EA  0E00               	movlw	0
  2605  0008EC                     u2940:
  2606  0008EC  EC0F  F008         	call	_Timeout
  2607  0008F0  6E1A               	movwf	i2c_write@ans,c
  2608  0008F2  501A               	movf	i2c_write@ans,w,c
  2609  0008F4  A4D8               	btfss	status,2,c
  2610  0008F6  D7F5               	goto	l2657
  2611                           
  2612                           ;my_master.c: 135: }
  2613                           ;my_master.c: 136: PIR1bits.SSPIF = 0;
  2614                           
  2615                           ;my_master.c: 134: return;
  2616                           
  2617                           ;my_master.c: 133: if(ans == -1){
  2618  0008F8  969E               	bcf	3998,3,c	;volatile
  2619  0008FA  4A1B               	infsnz	i2c_write@cnt,f,c
  2620  0008FC  2A1C               	incf	i2c_write@cnt+1,f,c
  2621  0008FE                     l2663:
  2622  0008FE  5014               	movf	i2c_write@num,w,c
  2623  000900  6E17               	movwf	??_i2c_write& (0+255),c
  2624  000902  6A18               	clrf	(??_i2c_write+1)& (0+255),c
  2625  000904  5017               	movf	??_i2c_write,w,c
  2626  000906  5C1B               	subwf	i2c_write@cnt,w,c
  2627  000908  501C               	movf	i2c_write@cnt+1,w,c
  2628  00090A  0A80               	xorlw	128
  2629  00090C  6E19               	movwf	(??_i2c_write+2)& (0+255),c
  2630  00090E  5018               	movf	??_i2c_write+1,w,c
  2631  000910  0A80               	xorlw	128
  2632  000912  5819               	subwfb	(??_i2c_write+2)& (0+255),w,c
  2633  000914  A0D8               	btfss	status,0,c
  2634  000916  D7D1               	goto	l2651
  2635                           
  2636                           ;my_master.c: 137: }
  2637                           ;my_master.c: 138: if(stop){
  2638  000918  5016               	movf	i2c_write@stop,w,c
  2639  00091A  B4D8               	btfsc	status,2,c
  2640  00091C  D00D               	goto	l2673
  2641                           
  2642                           ;my_master.c: 139: SSPCON2bits.PEN = 1;
  2643  00091E  84C5               	bsf	4037,2,c	;volatile
  2644  000920                     l2669:
  2645  000920  A4C5               	btfss	4037,2,c	;volatile
  2646  000922  D002               	goto	u2980
  2647  000924  0E01               	movlw	1
  2648  000926  D001               	goto	u2986
  2649  000928                     u2980:
  2650  000928  0E00               	movlw	0
  2651  00092A                     u2986:
  2652  00092A  EC0F  F008         	call	_Timeout
  2653  00092E  6E1A               	movwf	i2c_write@ans,c
  2654  000930  501A               	movf	i2c_write@ans,w,c
  2655  000932  A4D8               	btfss	status,2,c
  2656  000934  0012               	return	
  2657  000936  D7F4               	goto	l2669
  2658  000938                     l2673:
  2659                           
  2660                           ;my_master.c: 145: else if(stop == 2){
  2661  000938  0E02               	movlw	2
  2662  00093A  1816               	xorwf	i2c_write@stop,w,c
  2663  00093C  A4D8               	btfss	status,2,c
  2664  00093E  0012               	return	
  2665                           
  2666                           ;my_master.c: 146: SSPCON2bits.RSEN = 1;
  2667  000940  82C5               	bsf	4037,1,c	;volatile
  2668  000942                     l2677:
  2669  000942  A2C5               	btfss	4037,1,c	;volatile
  2670  000944  D002               	goto	u3010
  2671  000946  0E01               	movlw	1
  2672  000948  D001               	goto	u3016
  2673  00094A                     u3010:
  2674  00094A  0E00               	movlw	0
  2675  00094C                     u3016:
  2676  00094C  EC0F  F008         	call	_Timeout
  2677  000950  6E1A               	movwf	i2c_write@ans,c
  2678  000952  501A               	movf	i2c_write@ans,w,c
  2679  000954  A4D8               	btfss	status,2,c
  2680  000956  0012               	return	
  2681  000958  D7F4               	goto	l2677
  2682  00095A                     __end_of_i2c_write:
  2683                           	opt stack 0
  2684                           tblptru	equ	0xFF8
  2685                           tblptrh	equ	0xFF7
  2686                           tblptrl	equ	0xFF6
  2687                           tablat	equ	0xFF5
  2688                           intcon	equ	0xFF2
  2689                           intcon2	equ	0xFF1
  2690                           postinc0	equ	0xFEE
  2691                           wreg	equ	0xFE8
  2692                           indf2	equ	0xFDF
  2693                           fsr2h	equ	0xFDA
  2694                           fsr2l	equ	0xFD9
  2695                           status	equ	0xFD8
  2696                           
  2697 ;; *************** function _i2c_read *****************
  2698 ;; Defined at:
  2699 ;;		line 154 in file "../my_master.c"
  2700 ;; Parameters:    Size  Location     Type
  2701 ;;  addr            2   15[COMRAM] int 
  2702 ;;  data            2   17[COMRAM] PTR unsigned char 
  2703 ;;		 -> main@R_data(1), 
  2704 ;;  num             1   19[COMRAM] unsigned char 
  2705 ;; Auto vars:     Size  Location     Type
  2706 ;;  cnt             2   26[COMRAM] int 
  2707 ;;  ans             1   25[COMRAM] unsigned char 
  2708 ;; Return value:  Size  Location     Type
  2709 ;;                  1    wreg      void 
  2710 ;; Registers used:
  2711 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2712 ;; Tracked objects:
  2713 ;;		On entry : 0/0
  2714 ;;		On exit  : 0/0
  2715 ;;		Unchanged: 0/0
  2716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2717 ;;      Params:         5       0       0       0       0       0       0
  2718 ;;      Locals:         3       0       0       0       0       0       0
  2719 ;;      Temps:          5       0       0       0       0       0       0
  2720 ;;      Totals:        13       0       0       0       0       0       0
  2721 ;;Total ram usage:       13 bytes
  2722 ;; Hardware stack levels used:    1
  2723 ;; Hardware stack levels required when called:    2
  2724 ;; This function calls:
  2725 ;;		_Timeout
  2726 ;; This function is called by:
  2727 ;;		_main
  2728 ;; This function uses a non-reentrant model
  2729 ;;
  2730                           
  2731                           	psect	text12
  2732  00071C                     __ptext12:
  2733                           	opt stack 0
  2734  00071C                     _i2c_read:
  2735                           	opt stack 28
  2736                           
  2737                           ;my_master.c: 155: char ans = 0;
  2738                           
  2739                           ;incstack = 0
  2740  00071C  0E00               	movlw	0
  2741  00071E  6E1A               	movwf	i2c_read@ans,c
  2742                           
  2743                           ;my_master.c: 156: int cnt = 0;
  2744  000720  0E00               	movlw	0
  2745  000722  6E1C               	movwf	i2c_read@cnt+1,c
  2746  000724  0E00               	movlw	0
  2747  000726  6E1B               	movwf	i2c_read@cnt,c
  2748                           
  2749                           ;my_master.c: 157: SSPCON2bits.SEN = 1;
  2750  000728  80C5               	bsf	4037,0,c	;volatile
  2751  00072A                     l2685:
  2752  00072A  B0C5               	btfsc	4037,0,c	;volatile
  2753  00072C  D002               	goto	u3030
  2754  00072E  0E01               	movlw	1
  2755  000730  D001               	goto	u3040
  2756  000732                     u3030:
  2757  000732  0E00               	movlw	0
  2758  000734                     u3040:
  2759  000734  EC0F  F008         	call	_Timeout
  2760  000738  6E1A               	movwf	i2c_read@ans,c
  2761  00073A  501A               	movf	i2c_read@ans,w,c
  2762  00073C  A4D8               	btfss	status,2,c
  2763  00073E  D7F5               	goto	l2685
  2764                           
  2765                           ;my_master.c: 161: }
  2766                           ;my_master.c: 162: PIR1bits.SSPIF = 0;
  2767                           
  2768                           ;my_master.c: 160: return;
  2769                           
  2770                           ;my_master.c: 159: if(ans == -1){
  2771  000740  969E               	bcf	3998,3,c	;volatile
  2772                           
  2773                           ;my_master.c: 163: SSPBUF = (addr << 1) + 1;
  2774  000742  80D8               	bsf	status,0,c
  2775  000744  3410               	rlcf	i2c_read@addr,w,c
  2776  000746  6EC9               	movwf	4041,c	;volatile
  2777  000748                     l2691:
  2778  000748  A69E               	btfss	3998,3,c	;volatile
  2779  00074A  D002               	goto	u3060
  2780  00074C  0E01               	movlw	1
  2781  00074E  D001               	goto	u3066
  2782  000750                     u3060:
  2783  000750  0E00               	movlw	0
  2784  000752                     u3066:
  2785  000752  EC0F  F008         	call	_Timeout
  2786  000756  6E1A               	movwf	i2c_read@ans,c
  2787  000758  501A               	movf	i2c_read@ans,w,c
  2788  00075A  A4D8               	btfss	status,2,c
  2789  00075C  D7F5               	goto	l2691
  2790                           
  2791                           ;my_master.c: 167: }
  2792                           ;my_master.c: 168: PIR1bits.SSPIF = 0;
  2793                           
  2794                           ;my_master.c: 166: return;
  2795                           
  2796                           ;my_master.c: 165: if(ans == -1){
  2797  00075E  969E               	bcf	3998,3,c	;volatile
  2798  000760                     l2695:
  2799  000760  BCC5               	btfsc	4037,6,c	;volatile
  2800  000762  D002               	goto	u3080
  2801  000764  0E01               	movlw	1
  2802  000766  D001               	goto	u3090
  2803  000768                     u3080:
  2804  000768  0E00               	movlw	0
  2805  00076A                     u3090:
  2806  00076A  EC0F  F008         	call	_Timeout
  2807  00076E  6E1A               	movwf	i2c_read@ans,c
  2808  000770  501A               	movf	i2c_read@ans,w,c
  2809  000772  A4D8               	btfss	status,2,c
  2810  000774  D7F5               	goto	l2695
  2811                           
  2812                           ;my_master.c: 172: }
  2813                           ;my_master.c: 173: SSPCON2bits.RCEN = 1;
  2814                           
  2815                           ;my_master.c: 171: return;
  2816                           
  2817                           ;my_master.c: 170: if(ans == -1){
  2818  000776  86C5               	bsf	4037,3,c	;volatile
  2819                           
  2820                           ;my_master.c: 174: for(cnt = 0; cnt < num; cnt++){
  2821  000778  0E00               	movlw	0
  2822  00077A  6E1C               	movwf	i2c_read@cnt+1,c
  2823  00077C  0E00               	movlw	0
  2824  00077E  6E1B               	movwf	i2c_read@cnt,c
  2825  000780  D04D               	goto	l2725
  2826  000782                     l2701:
  2827  000782  A0C7               	btfss	4039,0,c	;volatile
  2828  000784  D002               	goto	u3110
  2829  000786  0E01               	movlw	1
  2830  000788  D001               	goto	u3116
  2831  00078A                     u3110:
  2832  00078A  0E00               	movlw	0
  2833  00078C                     u3116:
  2834  00078C  EC0F  F008         	call	_Timeout
  2835  000790  6E1A               	movwf	i2c_read@ans,c
  2836  000792  501A               	movf	i2c_read@ans,w,c
  2837  000794  A4D8               	btfss	status,2,c
  2838  000796  D7F5               	goto	l2701
  2839                           
  2840                           ;my_master.c: 178: }
  2841                           ;my_master.c: 179: if(cnt == (num - 1)){
  2842                           
  2843                           ;my_master.c: 177: return;
  2844                           
  2845                           ;my_master.c: 176: if(ans == -1){
  2846  000798  0EFF               	movlw	255
  2847  00079A  6E15               	movwf	??_i2c_read& (0+255),c
  2848  00079C  0EFF               	movlw	255
  2849  00079E  6E16               	movwf	(??_i2c_read+1)& (0+255),c
  2850  0007A0  5014               	movf	i2c_read@num,w,c
  2851  0007A2  6E17               	movwf	(??_i2c_read+2)& (0+255),c
  2852  0007A4  6A18               	clrf	(??_i2c_read+3)& (0+255),c
  2853  0007A6  5015               	movf	??_i2c_read,w,c
  2854  0007A8  2617               	addwf	??_i2c_read+2,f,c
  2855  0007AA  5016               	movf	??_i2c_read+1,w,c
  2856  0007AC  2218               	addwfc	??_i2c_read+3,f,c
  2857  0007AE  501B               	movf	i2c_read@cnt,w,c
  2858  0007B0  1817               	xorwf	??_i2c_read+2,w,c
  2859  0007B2  E106               	bnz	l2709
  2860  0007B4  501C               	movf	i2c_read@cnt+1,w,c
  2861  0007B6  1818               	xorwf	??_i2c_read+3,w,c
  2862  0007B8  A4D8               	btfss	status,2,c
  2863  0007BA  D002               	goto	l2709
  2864                           
  2865                           ;my_master.c: 180: SSPCON2bits.ACKDT = 1;
  2866  0007BC  8AC5               	bsf	4037,5,c	;volatile
  2867                           
  2868                           ;my_master.c: 181: }
  2869  0007BE  D015               	goto	l144
  2870  0007C0                     l2709:
  2871                           
  2872                           ;my_master.c: 182: else if(cnt < (num - 1)){
  2873  0007C0  0EFF               	movlw	255
  2874  0007C2  6E15               	movwf	??_i2c_read& (0+255),c
  2875  0007C4  0EFF               	movlw	255
  2876  0007C6  6E16               	movwf	(??_i2c_read+1)& (0+255),c
  2877  0007C8  5014               	movf	i2c_read@num,w,c
  2878  0007CA  6E17               	movwf	(??_i2c_read+2)& (0+255),c
  2879  0007CC  6A18               	clrf	(??_i2c_read+3)& (0+255),c
  2880  0007CE  5015               	movf	??_i2c_read,w,c
  2881  0007D0  2617               	addwf	??_i2c_read+2,f,c
  2882  0007D2  5016               	movf	??_i2c_read+1,w,c
  2883  0007D4  2218               	addwfc	??_i2c_read+3,f,c
  2884  0007D6  5017               	movf	??_i2c_read+2,w,c
  2885  0007D8  5C1B               	subwf	i2c_read@cnt,w,c
  2886  0007DA  501C               	movf	i2c_read@cnt+1,w,c
  2887  0007DC  0A80               	xorlw	128
  2888  0007DE  6E19               	movwf	(??_i2c_read+4)& (0+255),c
  2889  0007E0  5018               	movf	??_i2c_read+3,w,c
  2890  0007E2  0A80               	xorlw	128
  2891  0007E4  5819               	subwfb	(??_i2c_read+4)& (0+255),w,c
  2892  0007E6  A0D8               	btfss	status,0,c
  2893                           
  2894                           ;my_master.c: 183: SSPCON2bits.ACKDT = 0;
  2895  0007E8  9AC5               	bcf	4037,5,c	;volatile
  2896  0007EA                     l144:
  2897                           
  2898                           ;my_master.c: 184: }
  2899                           ;my_master.c: 185: SSPCON2bits.ACKEN = 1;
  2900  0007EA  88C5               	bsf	4037,4,c	;volatile
  2901  0007EC                     l2713:
  2902  0007EC  B8C5               	btfsc	4037,4,c	;volatile
  2903  0007EE  D002               	goto	u3150
  2904  0007F0  0E01               	movlw	1
  2905  0007F2  D001               	goto	u3160
  2906  0007F4                     u3150:
  2907  0007F4  0E00               	movlw	0
  2908  0007F6                     u3160:
  2909  0007F6  EC0F  F008         	call	_Timeout
  2910  0007FA  6E1A               	movwf	i2c_read@ans,c
  2911  0007FC  501A               	movf	i2c_read@ans,w,c
  2912  0007FE  A4D8               	btfss	status,2,c
  2913  000800  D7F5               	goto	l2713
  2914                           
  2915                           ;my_master.c: 189: }
  2916                           ;my_master.c: 190: data[cnt] = SSPBUF;
  2917                           
  2918                           ;my_master.c: 188: return;
  2919                           
  2920                           ;my_master.c: 187: if(ans == -1){
  2921  000802  501B               	movf	i2c_read@cnt,w,c
  2922  000804  2412               	addwf	i2c_read@data,w,c
  2923  000806  6ED9               	movwf	fsr2l,c
  2924  000808  501C               	movf	i2c_read@cnt+1,w,c
  2925  00080A  2013               	addwfc	i2c_read@data+1,w,c
  2926  00080C  6EDA               	movwf	fsr2h,c
  2927  00080E  CFC9 FFDF          	movff	4041,indf2	;volatile
  2928                           
  2929                           ;my_master.c: 191: if(PIR1bits.SSPIF){
  2930  000812  A69E               	btfss	3998,3,c	;volatile
  2931  000814  0012               	return	
  2932                           
  2933                           ;my_master.c: 192: PIR1bits.SSPIF = 0;
  2934  000816  969E               	bcf	3998,3,c	;volatile
  2935                           
  2936                           ;my_master.c: 194: else{
  2937                           ;my_master.c: 195: return;
  2938                           
  2939                           ;my_master.c: 193: }
  2940  000818  4A1B               	infsnz	i2c_read@cnt,f,c
  2941  00081A  2A1C               	incf	i2c_read@cnt+1,f,c
  2942  00081C                     l2725:
  2943  00081C  5014               	movf	i2c_read@num,w,c
  2944  00081E  6E15               	movwf	??_i2c_read& (0+255),c
  2945  000820  6A16               	clrf	(??_i2c_read+1)& (0+255),c
  2946  000822  5015               	movf	??_i2c_read,w,c
  2947  000824  5C1B               	subwf	i2c_read@cnt,w,c
  2948  000826  501C               	movf	i2c_read@cnt+1,w,c
  2949  000828  0A80               	xorlw	128
  2950  00082A  6E17               	movwf	(??_i2c_read+2)& (0+255),c
  2951  00082C  5016               	movf	??_i2c_read+1,w,c
  2952  00082E  0A80               	xorlw	128
  2953  000830  5817               	subwfb	(??_i2c_read+2)& (0+255),w,c
  2954  000832  A0D8               	btfss	status,0,c
  2955  000834  D7A6               	goto	l2701
  2956                           
  2957                           ;my_master.c: 196: }
  2958                           ;my_master.c: 197: }
  2959                           ;my_master.c: 198: SSPCON2bits.PEN = 1;
  2960  000836  84C5               	bsf	4037,2,c	;volatile
  2961  000838                     l2727:
  2962  000838  B4C5               	btfsc	4037,2,c	;volatile
  2963  00083A  D002               	goto	u3200
  2964  00083C  0E01               	movlw	1
  2965  00083E  D001               	goto	u3210
  2966  000840                     u3200:
  2967  000840  0E00               	movlw	0
  2968  000842                     u3210:
  2969  000842  EC0F  F008         	call	_Timeout
  2970  000846  6E1A               	movwf	i2c_read@ans,c
  2971  000848  501A               	movf	i2c_read@ans,w,c
  2972  00084A  B4D8               	btfsc	status,2,c
  2973  00084C  0012               	return	
  2974  00084E  D7F4               	goto	l2727
  2975  000850                     __end_of_i2c_read:
  2976                           	opt stack 0
  2977                           tblptru	equ	0xFF8
  2978                           tblptrh	equ	0xFF7
  2979                           tblptrl	equ	0xFF6
  2980                           tablat	equ	0xFF5
  2981                           intcon	equ	0xFF2
  2982                           intcon2	equ	0xFF1
  2983                           postinc0	equ	0xFEE
  2984                           wreg	equ	0xFE8
  2985                           indf2	equ	0xFDF
  2986                           fsr2h	equ	0xFDA
  2987                           fsr2l	equ	0xFD9
  2988                           status	equ	0xFD8
  2989                           
  2990 ;; *************** function _Timeout *****************
  2991 ;; Defined at:
  2992 ;;		line 92 in file "../my_master.c"
  2993 ;; Parameters:    Size  Location     Type
  2994 ;;  a               1    wreg     unsigned char 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  a               1   14[COMRAM] unsigned char 
  2997 ;; Return value:  Size  Location     Type
  2998 ;;                  1    wreg      unsigned char 
  2999 ;; Registers used:
  3000 ;;		wreg, status,2, status,0
  3001 ;; Tracked objects:
  3002 ;;		On entry : 0/0
  3003 ;;		On exit  : 0/0
  3004 ;;		Unchanged: 0/0
  3005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3006 ;;      Params:         0       0       0       0       0       0       0
  3007 ;;      Locals:         1       0       0       0       0       0       0
  3008 ;;      Temps:          0       0       0       0       0       0       0
  3009 ;;      Totals:         1       0       0       0       0       0       0
  3010 ;;Total ram usage:        1 bytes
  3011 ;; Hardware stack levels used:    1
  3012 ;; Hardware stack levels required when called:    1
  3013 ;; This function calls:
  3014 ;;		Nothing
  3015 ;; This function is called by:
  3016 ;;		_i2c_write
  3017 ;;		_i2c_read
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text13
  3022  00101E                     __ptext13:
  3023                           	opt stack 0
  3024  00101E                     _Timeout:
  3025                           	opt stack 28
  3026                           
  3027                           ;incstack = 0
  3028                           ;Timeout@a stored from wreg
  3029  00101E  6E0F               	movwf	Timeout@a,c
  3030                           
  3031                           ;my_master.c: 93: out++;
  3032  001020  0E01               	movlw	1
  3033  001022  264E               	addwf	_out,f,c
  3034  001024  0E00               	movlw	0
  3035  001026  224F               	addwfc	_out+1,f,c
  3036  001028  2250               	addwfc	_out+2,f,c
  3037  00102A  2251               	addwfc	_out+3,f,c
  3038                           
  3039                           ;my_master.c: 94: if(a == 1 && out < 1000){
  3040  00102C  040F               	decf	Timeout@a,w,c
  3041  00102E  A4D8               	btfss	status,2,c
  3042  001030  D015               	goto	l2393
  3043  001032  BE51               	btfsc	_out+3,7,c
  3044  001034  D009               	goto	l2385
  3045  001036  5051               	movf	_out+3,w,c
  3046  001038  1050               	iorwf	_out+2,w,c
  3047  00103A  E110               	bnz	l2393
  3048  00103C  0EE8               	movlw	232
  3049  00103E  5C4E               	subwf	_out,w,c
  3050  001040  0E03               	movlw	3
  3051  001042  584F               	subwfb	_out+1,w,c
  3052  001044  B0D8               	btfsc	status,0,c
  3053  001046  D00A               	goto	l2393
  3054  001048                     l2385:
  3055                           
  3056                           ;my_master.c: 95: out = 0;
  3057  001048  0E00               	movlw	0
  3058  00104A  6E4E               	movwf	_out,c
  3059  00104C  0E00               	movlw	0
  3060  00104E  6E4F               	movwf	_out+1,c
  3061  001050  0E00               	movlw	0
  3062  001052  6E50               	movwf	_out+2,c
  3063  001054  0E00               	movlw	0
  3064  001056  6E51               	movwf	_out+3,c
  3065                           
  3066                           ;my_master.c: 96: return 0;
  3067  001058  0E00               	movlw	0
  3068  00105A  0012               	return	
  3069  00105C                     l2393:
  3070                           
  3071                           ;my_master.c: 98: else if(out > 1000){
  3072  00105C  BE51               	btfsc	_out+3,7,c
  3073  00105E  D00B               	goto	l2399
  3074  001060  5051               	movf	_out+3,w,c
  3075  001062  1050               	iorwf	_out+2,w,c
  3076  001064  E106               	bnz	u2500
  3077  001066  0EE9               	movlw	233
  3078  001068  5C4E               	subwf	_out,w,c
  3079  00106A  0E03               	movlw	3
  3080  00106C  584F               	subwfb	_out+1,w,c
  3081  00106E  A0D8               	btfss	status,0,c
  3082  001070  D002               	goto	l2399
  3083  001072                     u2500:
  3084                           
  3085                           ;my_master.c: 99: return -1;
  3086  001072  0EFF               	movlw	255
  3087  001074  0012               	return	
  3088  001076                     l2399:
  3089                           
  3090                           ;my_master.c: 100: }
  3091                           ;my_master.c: 101: return 1;
  3092  001076  0E01               	movlw	1
  3093  001078  0012               	return	
  3094  00107A                     __end_of_Timeout:
  3095                           	opt stack 0
  3096                           tblptru	equ	0xFF8
  3097                           tblptrh	equ	0xFF7
  3098                           tblptrl	equ	0xFF6
  3099                           tablat	equ	0xFF5
  3100                           intcon	equ	0xFF2
  3101                           intcon2	equ	0xFF1
  3102                           postinc0	equ	0xFEE
  3103                           wreg	equ	0xFE8
  3104                           indf2	equ	0xFDF
  3105                           fsr2h	equ	0xFDA
  3106                           fsr2l	equ	0xFD9
  3107                           status	equ	0xFD8
  3108                           
  3109 ;; *************** function ___wmul *****************
  3110 ;; Defined at:
  3111 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  3112 ;; Parameters:    Size  Location     Type
  3113 ;;  multiplier      2   14[COMRAM] unsigned int 
  3114 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3115 ;; Auto vars:     Size  Location     Type
  3116 ;;  product         2   18[COMRAM] unsigned int 
  3117 ;; Return value:  Size  Location     Type
  3118 ;;                  2   14[COMRAM] unsigned int 
  3119 ;; Registers used:
  3120 ;;		wreg, status,2, status,0, prodl, prodh
  3121 ;; Tracked objects:
  3122 ;;		On entry : 0/0
  3123 ;;		On exit  : 0/0
  3124 ;;		Unchanged: 0/0
  3125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3126 ;;      Params:         4       0       0       0       0       0       0
  3127 ;;      Locals:         2       0       0       0       0       0       0
  3128 ;;      Temps:          0       0       0       0       0       0       0
  3129 ;;      Totals:         6       0       0       0       0       0       0
  3130 ;;Total ram usage:        6 bytes
  3131 ;; Hardware stack levels used:    1
  3132 ;; Hardware stack levels required when called:    1
  3133 ;; This function calls:
  3134 ;;		Nothing
  3135 ;; This function is called by:
  3136 ;;		_main
  3137 ;; This function uses a non-reentrant model
  3138 ;;
  3139                           
  3140                           	psect	text14
  3141  0011FC                     __ptext14:
  3142                           	opt stack 0
  3143  0011FC                     ___wmul:
  3144                           	opt stack 29
  3145                           
  3146                           ;incstack = 0
  3147  0011FC  500F               	movf	___wmul@multiplier,w,c
  3148  0011FE  0211               	mulwf	___wmul@multiplicand,c
  3149  001200  CFF3 F013          	movff	prodl,___wmul@product
  3150  001204  CFF4 F014          	movff	prodh,___wmul@product+1
  3151  001208  500F               	movf	___wmul@multiplier,w,c
  3152  00120A  0212               	mulwf	___wmul@multiplicand+1,c
  3153  00120C  50F3               	movf	prodl,w,c
  3154  00120E  2614               	addwf	___wmul@product+1,f,c
  3155  001210  5010               	movf	___wmul@multiplier+1,w,c
  3156  001212  0211               	mulwf	___wmul@multiplicand,c
  3157  001214  50F3               	movf	prodl,w,c
  3158  001216  2614               	addwf	___wmul@product+1,f,c
  3159  001218  C013  F00F         	movff	___wmul@product,?___wmul
  3160  00121C  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3161  001220  0012               	return	
  3162  001222                     __end_of___wmul:
  3163                           	opt stack 0
  3164                           tblptru	equ	0xFF8
  3165                           tblptrh	equ	0xFF7
  3166                           tblptrl	equ	0xFF6
  3167                           tablat	equ	0xFF5
  3168                           prodh	equ	0xFF4
  3169                           prodl	equ	0xFF3
  3170                           intcon	equ	0xFF2
  3171                           intcon2	equ	0xFF1
  3172                           postinc0	equ	0xFEE
  3173                           wreg	equ	0xFE8
  3174                           indf2	equ	0xFDF
  3175                           fsr2h	equ	0xFDA
  3176                           fsr2l	equ	0xFD9
  3177                           status	equ	0xFD8
  3178                           
  3179 ;; *************** function ___fttol *****************
  3180 ;; Defined at:
  3181 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\fttol.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  f1              3   14[COMRAM] float 
  3184 ;; Auto vars:     Size  Location     Type
  3185 ;;  lval            4   24[COMRAM] unsigned long 
  3186 ;;  exp1            1   28[COMRAM] unsigned char 
  3187 ;;  sign1           1   23[COMRAM] unsigned char 
  3188 ;; Return value:  Size  Location     Type
  3189 ;;                  4   14[COMRAM] long 
  3190 ;; Registers used:
  3191 ;;		wreg, status,2, status,0
  3192 ;; Tracked objects:
  3193 ;;		On entry : 0/0
  3194 ;;		On exit  : 0/0
  3195 ;;		Unchanged: 0/0
  3196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3197 ;;      Params:         4       0       0       0       0       0       0
  3198 ;;      Locals:         6       0       0       0       0       0       0
  3199 ;;      Temps:          5       0       0       0       0       0       0
  3200 ;;      Totals:        15       0       0       0       0       0       0
  3201 ;;Total ram usage:       15 bytes
  3202 ;; Hardware stack levels used:    1
  3203 ;; Hardware stack levels required when called:    1
  3204 ;; This function calls:
  3205 ;;		Nothing
  3206 ;; This function is called by:
  3207 ;;		_main
  3208 ;; This function uses a non-reentrant model
  3209 ;;
  3210                           
  3211                           	psect	text15
  3212  000A4E                     __ptext15:
  3213                           	opt stack 0
  3214  000A4E                     ___fttol:
  3215                           	opt stack 29
  3216                           
  3217                           ;incstack = 0
  3218  000A4E  C011  F013         	movff	___fttol@f1+2,??___fttol
  3219  000A52  6A14               	clrf	(??___fttol+1)& (0+255),c
  3220  000A54  6A15               	clrf	(??___fttol+2)& (0+255),c
  3221  000A56  3410               	rlcf	___fttol@f1+1,w,c
  3222  000A58  3613               	rlcf	??___fttol& (0+255),f,c
  3223  000A5A  E301               	bnc	u3451
  3224  000A5C  8014               	bsf	(??___fttol+1)& (0+255),0,c
  3225  000A5E                     u3451:
  3226  000A5E  5013               	movf	??___fttol,w,c
  3227  000A60  6E1D               	movwf	___fttol@exp1,c
  3228  000A62  501D               	movf	___fttol@exp1,w,c
  3229  000A64  A4D8               	btfss	status,2,c
  3230  000A66  D009               	goto	l2903
  3231  000A68  0E00               	movlw	0
  3232  000A6A  6E0F               	movwf	?___fttol,c
  3233  000A6C  0E00               	movlw	0
  3234  000A6E  6E10               	movwf	?___fttol+1,c
  3235  000A70  0E00               	movlw	0
  3236  000A72  6E11               	movwf	?___fttol+2,c
  3237  000A74  0E00               	movlw	0
  3238  000A76  6E12               	movwf	?___fttol+3,c
  3239  000A78  0012               	return	
  3240  000A7A                     l2903:
  3241  000A7A  0E17               	movlw	23
  3242  000A7C  6E13               	movwf	??___fttol& (0+255),c
  3243  000A7E  C00F  F014         	movff	___fttol@f1,??___fttol+1
  3244  000A82  C010  F015         	movff	___fttol@f1+1,??___fttol+2
  3245  000A86  C011  F016         	movff	___fttol@f1+2,??___fttol+3
  3246  000A8A  2813               	incf	??___fttol,w,c
  3247  000A8C  6E17               	movwf	(??___fttol+4)& (0+255),c
  3248  000A8E  D004               	goto	u3470
  3249  000A90                     u3475:
  3250  000A90  90D8               	bcf	status,0,c
  3251  000A92  3216               	rrcf	??___fttol+3,f,c
  3252  000A94  3215               	rrcf	??___fttol+2,f,c
  3253  000A96  3214               	rrcf	??___fttol+1,f,c
  3254  000A98                     u3470:
  3255  000A98  2E17               	decfsz	(??___fttol+4)& (0+255),f,c
  3256  000A9A  D7FA               	goto	u3475
  3257  000A9C  5014               	movf	??___fttol+1,w,c
  3258  000A9E  6E18               	movwf	___fttol@sign1,c
  3259  000AA0  8E10               	bsf	___fttol@f1+1,7,c
  3260  000AA2  0EFF               	movlw	255
  3261  000AA4  160F               	andwf	___fttol@f1,f,c
  3262  000AA6  0EFF               	movlw	255
  3263  000AA8  1610               	andwf	___fttol@f1+1,f,c
  3264  000AAA  0E00               	movlw	0
  3265  000AAC  1611               	andwf	___fttol@f1+2,f,c
  3266  000AAE  500F               	movf	___fttol@f1,w,c
  3267  000AB0  6E19               	movwf	___fttol@lval,c
  3268  000AB2  5010               	movf	___fttol@f1+1,w,c
  3269  000AB4  6E1A               	movwf	___fttol@lval+1,c
  3270  000AB6  5011               	movf	___fttol@f1+2,w,c
  3271  000AB8  6E1B               	movwf	___fttol@lval+2,c
  3272  000ABA  6A1C               	clrf	___fttol@lval+3,c
  3273  000ABC  0E8E               	movlw	142
  3274  000ABE  5E1D               	subwf	___fttol@exp1,f,c
  3275  000AC0  AE1D               	btfss	___fttol@exp1,7,c
  3276  000AC2  D016               	goto	l2925
  3277  000AC4  501D               	movf	___fttol@exp1,w,c
  3278  000AC6  0A80               	xorlw	128
  3279  000AC8  0F8F               	addlw	143
  3280  000ACA  B0D8               	btfsc	status,0,c
  3281  000ACC  D009               	goto	l2921
  3282  000ACE  0E00               	movlw	0
  3283  000AD0  6E0F               	movwf	?___fttol,c
  3284  000AD2  0E00               	movlw	0
  3285  000AD4  6E10               	movwf	?___fttol+1,c
  3286  000AD6  0E00               	movlw	0
  3287  000AD8  6E11               	movwf	?___fttol+2,c
  3288  000ADA  0E00               	movlw	0
  3289  000ADC  6E12               	movwf	?___fttol+3,c
  3290  000ADE  0012               	return	
  3291  000AE0                     l2921:
  3292  000AE0  90D8               	bcf	status,0,c
  3293  000AE2  321C               	rrcf	___fttol@lval+3,f,c
  3294  000AE4  321B               	rrcf	___fttol@lval+2,f,c
  3295  000AE6  321A               	rrcf	___fttol@lval+1,f,c
  3296  000AE8  3219               	rrcf	___fttol@lval,f,c
  3297  000AEA  3E1D               	incfsz	___fttol@exp1,f,c
  3298  000AEC  D7F9               	goto	l2921
  3299  000AEE  D015               	goto	l2935
  3300  000AF0                     l2925:
  3301  000AF0  0E17               	movlw	23
  3302  000AF2  641D               	cpfsgt	___fttol@exp1,c
  3303  000AF4  D00F               	goto	l2933
  3304  000AF6  0E00               	movlw	0
  3305  000AF8  6E0F               	movwf	?___fttol,c
  3306  000AFA  0E00               	movlw	0
  3307  000AFC  6E10               	movwf	?___fttol+1,c
  3308  000AFE  0E00               	movlw	0
  3309  000B00  6E11               	movwf	?___fttol+2,c
  3310  000B02  0E00               	movlw	0
  3311  000B04  6E12               	movwf	?___fttol+3,c
  3312  000B06  0012               	return	
  3313  000B08                     l2931:
  3314  000B08  90D8               	bcf	status,0,c
  3315  000B0A  3619               	rlcf	___fttol@lval,f,c
  3316  000B0C  361A               	rlcf	___fttol@lval+1,f,c
  3317  000B0E  361B               	rlcf	___fttol@lval+2,f,c
  3318  000B10  361C               	rlcf	___fttol@lval+3,f,c
  3319  000B12  061D               	decf	___fttol@exp1,f,c
  3320  000B14                     l2933:
  3321  000B14  501D               	movf	___fttol@exp1,w,c
  3322  000B16  A4D8               	btfss	status,2,c
  3323  000B18  D7F7               	goto	l2931
  3324  000B1A                     l2935:
  3325  000B1A  5018               	movf	___fttol@sign1,w,c
  3326  000B1C  B4D8               	btfsc	status,2,c
  3327  000B1E  D008               	goto	l2939
  3328  000B20  1E1C               	comf	___fttol@lval+3,f,c
  3329  000B22  1E1B               	comf	___fttol@lval+2,f,c
  3330  000B24  1E1A               	comf	___fttol@lval+1,f,c
  3331  000B26  6C19               	negf	___fttol@lval,c
  3332  000B28  0E00               	movlw	0
  3333  000B2A  221A               	addwfc	___fttol@lval+1,f,c
  3334  000B2C  221B               	addwfc	___fttol@lval+2,f,c
  3335  000B2E  221C               	addwfc	___fttol@lval+3,f,c
  3336  000B30                     l2939:
  3337  000B30  C019  F00F         	movff	___fttol@lval,?___fttol
  3338  000B34  C01A  F010         	movff	___fttol@lval+1,?___fttol+1
  3339  000B38  C01B  F011         	movff	___fttol@lval+2,?___fttol+2
  3340  000B3C  C01C  F012         	movff	___fttol@lval+3,?___fttol+3
  3341  000B40  0012               	return	
  3342  000B42                     __end_of___fttol:
  3343                           	opt stack 0
  3344                           tblptru	equ	0xFF8
  3345                           tblptrh	equ	0xFF7
  3346                           tblptrl	equ	0xFF6
  3347                           tablat	equ	0xFF5
  3348                           prodh	equ	0xFF4
  3349                           prodl	equ	0xFF3
  3350                           intcon	equ	0xFF2
  3351                           intcon2	equ	0xFF1
  3352                           postinc0	equ	0xFEE
  3353                           wreg	equ	0xFE8
  3354                           indf2	equ	0xFDF
  3355                           fsr2h	equ	0xFDA
  3356                           fsr2l	equ	0xFD9
  3357                           status	equ	0xFD8
  3358                           
  3359 ;; *************** function ___ftsub *****************
  3360 ;; Defined at:
  3361 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftsub.c"
  3362 ;; Parameters:    Size  Location     Type
  3363 ;;  f1              3   37[COMRAM] float 
  3364 ;;  f2              3   40[COMRAM] float 
  3365 ;; Auto vars:     Size  Location     Type
  3366 ;;		None
  3367 ;; Return value:  Size  Location     Type
  3368 ;;                  3   37[COMRAM] float 
  3369 ;; Registers used:
  3370 ;;		wreg, status,2, status,0, cstack
  3371 ;; Tracked objects:
  3372 ;;		On entry : 0/0
  3373 ;;		On exit  : 0/0
  3374 ;;		Unchanged: 0/0
  3375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3376 ;;      Params:         6       0       0       0       0       0       0
  3377 ;;      Locals:         0       0       0       0       0       0       0
  3378 ;;      Temps:          0       0       0       0       0       0       0
  3379 ;;      Totals:         6       0       0       0       0       0       0
  3380 ;;Total ram usage:        6 bytes
  3381 ;; Hardware stack levels used:    1
  3382 ;; Hardware stack levels required when called:    3
  3383 ;; This function calls:
  3384 ;;		___ftadd
  3385 ;; This function is called by:
  3386 ;;		_main
  3387 ;; This function uses a non-reentrant model
  3388 ;;
  3389                           
  3390                           	psect	text16
  3391  001152                     __ptext16:
  3392                           	opt stack 0
  3393  001152                     ___ftsub:
  3394                           	opt stack 27
  3395                           
  3396                           ;incstack = 0
  3397  001152  5029               	movf	___ftsub@f2,w,c
  3398  001154  102A               	iorwf	___ftsub@f2+1,w,c
  3399  001156  102B               	iorwf	___ftsub@f2+2,w,c
  3400  001158  B4D8               	btfsc	status,2,c
  3401  00115A  D006               	goto	l2815
  3402  00115C  0E00               	movlw	0
  3403  00115E  1A29               	xorwf	___ftsub@f2,f,c
  3404  001160  0E00               	movlw	0
  3405  001162  1A2A               	xorwf	___ftsub@f2+1,f,c
  3406  001164  0E80               	movlw	128
  3407  001166  1A2B               	xorwf	___ftsub@f2+2,f,c
  3408  001168                     l2815:
  3409  001168  C026  F01A         	movff	___ftsub@f1,___ftadd@f1
  3410  00116C  C027  F01B         	movff	___ftsub@f1+1,___ftadd@f1+1
  3411  001170  C028  F01C         	movff	___ftsub@f1+2,___ftadd@f1+2
  3412  001174  C029  F01D         	movff	___ftsub@f2,___ftadd@f2
  3413  001178  C02A  F01E         	movff	___ftsub@f2+1,___ftadd@f2+1
  3414  00117C  C02B  F01F         	movff	___ftsub@f2+2,___ftadd@f2+2
  3415  001180  ECB8  F002         	call	___ftadd	;wreg free
  3416  001184  C01A  F026         	movff	?___ftadd,?___ftsub
  3417  001188  C01B  F027         	movff	?___ftadd+1,?___ftsub+1
  3418  00118C  C01C  F028         	movff	?___ftadd+2,?___ftsub+2
  3419  001190  0012               	return	
  3420  001192                     __end_of___ftsub:
  3421                           	opt stack 0
  3422                           tblptru	equ	0xFF8
  3423                           tblptrh	equ	0xFF7
  3424                           tblptrl	equ	0xFF6
  3425                           tablat	equ	0xFF5
  3426                           prodh	equ	0xFF4
  3427                           prodl	equ	0xFF3
  3428                           intcon	equ	0xFF2
  3429                           intcon2	equ	0xFF1
  3430                           postinc0	equ	0xFEE
  3431                           wreg	equ	0xFE8
  3432                           indf2	equ	0xFDF
  3433                           fsr2h	equ	0xFDA
  3434                           fsr2l	equ	0xFD9
  3435                           status	equ	0xFD8
  3436                           
  3437 ;; *************** function ___ftadd *****************
  3438 ;; Defined at:
  3439 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftadd.c"
  3440 ;; Parameters:    Size  Location     Type
  3441 ;;  f1              3   25[COMRAM] float 
  3442 ;;  f2              3   28[COMRAM] float 
  3443 ;; Auto vars:     Size  Location     Type
  3444 ;;  exp1            1   36[COMRAM] unsigned char 
  3445 ;;  exp2            1   35[COMRAM] unsigned char 
  3446 ;;  sign            1   34[COMRAM] unsigned char 
  3447 ;; Return value:  Size  Location     Type
  3448 ;;                  3   25[COMRAM] float 
  3449 ;; Registers used:
  3450 ;;		wreg, status,2, status,0, cstack
  3451 ;; Tracked objects:
  3452 ;;		On entry : 0/0
  3453 ;;		On exit  : 0/0
  3454 ;;		Unchanged: 0/0
  3455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3456 ;;      Params:         6       0       0       0       0       0       0
  3457 ;;      Locals:         3       0       0       0       0       0       0
  3458 ;;      Temps:          3       0       0       0       0       0       0
  3459 ;;      Totals:        12       0       0       0       0       0       0
  3460 ;;Total ram usage:       12 bytes
  3461 ;; Hardware stack levels used:    1
  3462 ;; Hardware stack levels required when called:    2
  3463 ;; This function calls:
  3464 ;;		___ftpack
  3465 ;; This function is called by:
  3466 ;;		_main
  3467 ;;		___ftsub
  3468 ;; This function uses a non-reentrant model
  3469 ;;
  3470                           
  3471                           	psect	text17
  3472  000570                     __ptext17:
  3473                           	opt stack 0
  3474  000570                     ___ftadd:
  3475                           	opt stack 27
  3476                           
  3477                           ;incstack = 0
  3478  000570  C01C  F020         	movff	___ftadd@f1+2,??___ftadd
  3479  000574  6A21               	clrf	(??___ftadd+1)& (0+255),c
  3480  000576  6A22               	clrf	(??___ftadd+2)& (0+255),c
  3481  000578  341B               	rlcf	___ftadd@f1+1,w,c
  3482  00057A  3620               	rlcf	??___ftadd& (0+255),f,c
  3483  00057C  E301               	bnc	u2551
  3484  00057E  8021               	bsf	(??___ftadd+1)& (0+255),0,c
  3485  000580                     u2551:
  3486  000580  5020               	movf	??___ftadd,w,c
  3487  000582  6E25               	movwf	___ftadd@exp1,c
  3488  000584  C01F  F020         	movff	___ftadd@f2+2,??___ftadd
  3489  000588  6A21               	clrf	(??___ftadd+1)& (0+255),c
  3490  00058A  6A22               	clrf	(??___ftadd+2)& (0+255),c
  3491  00058C  341E               	rlcf	___ftadd@f2+1,w,c
  3492  00058E  3620               	rlcf	??___ftadd& (0+255),f,c
  3493  000590  E301               	bnc	u2561
  3494  000592  8021               	bsf	(??___ftadd+1)& (0+255),0,c
  3495  000594                     u2561:
  3496  000594  5020               	movf	??___ftadd,w,c
  3497  000596  6E24               	movwf	___ftadd@exp2,c
  3498  000598  5025               	movf	___ftadd@exp1,w,c
  3499  00059A  B4D8               	btfsc	status,2,c
  3500  00059C  D00B               	goto	l471
  3501  00059E  5024               	movf	___ftadd@exp2,w,c
  3502  0005A0  5C25               	subwf	___ftadd@exp1,w,c
  3503  0005A2  B0D8               	btfsc	status,0,c
  3504  0005A4  D00E               	goto	l2511
  3505  0005A6  5025               	movf	___ftadd@exp1,w,c
  3506  0005A8  0800               	sublw	0
  3507  0005AA  2424               	addwf	___ftadd@exp2,w,c
  3508  0005AC  6E20               	movwf	??___ftadd& (0+255),c
  3509  0005AE  0E18               	movlw	24
  3510  0005B0  6420               	cpfsgt	??___ftadd,c
  3511  0005B2  D007               	goto	l2511
  3512  0005B4                     l471:
  3513  0005B4  C01D  F01A         	movff	___ftadd@f2,?___ftadd
  3514  0005B8  C01E  F01B         	movff	___ftadd@f2+1,?___ftadd+1
  3515  0005BC  C01F  F01C         	movff	___ftadd@f2+2,?___ftadd+2
  3516  0005C0  0012               	return	
  3517  0005C2                     l2511:
  3518  0005C2  5024               	movf	___ftadd@exp2,w,c
  3519  0005C4  B4D8               	btfsc	status,2,c
  3520  0005C6  D00B               	goto	l475
  3521  0005C8  5025               	movf	___ftadd@exp1,w,c
  3522  0005CA  5C24               	subwf	___ftadd@exp2,w,c
  3523  0005CC  B0D8               	btfsc	status,0,c
  3524  0005CE  D00E               	goto	l2517
  3525  0005D0  5024               	movf	___ftadd@exp2,w,c
  3526  0005D2  0800               	sublw	0
  3527  0005D4  2425               	addwf	___ftadd@exp1,w,c
  3528  0005D6  6E20               	movwf	??___ftadd& (0+255),c
  3529  0005D8  0E18               	movlw	24
  3530  0005DA  6420               	cpfsgt	??___ftadd,c
  3531  0005DC  D007               	goto	l2517
  3532  0005DE                     l475:
  3533  0005DE  C01A  F01A         	movff	___ftadd@f1,?___ftadd
  3534  0005E2  C01B  F01B         	movff	___ftadd@f1+1,?___ftadd+1
  3535  0005E6  C01C  F01C         	movff	___ftadd@f1+2,?___ftadd+2
  3536  0005EA  0012               	return	
  3537  0005EC                     l2517:
  3538  0005EC  0E06               	movlw	6
  3539  0005EE  6E23               	movwf	___ftadd@sign,c
  3540  0005F0  BE1C               	btfsc	___ftadd@f1+2,7,c
  3541  0005F2  8E23               	bsf	___ftadd@sign,7,c
  3542  0005F4  BE1F               	btfsc	___ftadd@f2+2,7,c
  3543  0005F6  8C23               	bsf	___ftadd@sign,6,c
  3544  0005F8  8E1B               	bsf	___ftadd@f1+1,7,c
  3545  0005FA  0EFF               	movlw	255
  3546  0005FC  161A               	andwf	___ftadd@f1,f,c
  3547  0005FE  0EFF               	movlw	255
  3548  000600  161B               	andwf	___ftadd@f1+1,f,c
  3549  000602  0E00               	movlw	0
  3550  000604  161C               	andwf	___ftadd@f1+2,f,c
  3551  000606  8E1E               	bsf	___ftadd@f2+1,7,c
  3552  000608  0EFF               	movlw	255
  3553  00060A  161D               	andwf	___ftadd@f2,f,c
  3554  00060C  0EFF               	movlw	255
  3555  00060E  161E               	andwf	___ftadd@f2+1,f,c
  3556  000610  0E00               	movlw	0
  3557  000612  161F               	andwf	___ftadd@f2+2,f,c
  3558  000614  5024               	movf	___ftadd@exp2,w,c
  3559  000616  5C25               	subwf	___ftadd@exp1,w,c
  3560  000618  B0D8               	btfsc	status,0,c
  3561  00061A  D01B               	goto	l2543
  3562  00061C                     l2533:
  3563  00061C  90D8               	bcf	status,0,c
  3564  00061E  361D               	rlcf	___ftadd@f2,f,c
  3565  000620  361E               	rlcf	___ftadd@f2+1,f,c
  3566  000622  361F               	rlcf	___ftadd@f2+2,f,c
  3567  000624  0624               	decf	___ftadd@exp2,f,c
  3568  000626  5025               	movf	___ftadd@exp1,w,c
  3569  000628  1824               	xorwf	___ftadd@exp2,w,c
  3570  00062A  B4D8               	btfsc	status,2,c
  3571  00062C  D00D               	goto	l2541
  3572  00062E  0623               	decf	___ftadd@sign,f,c
  3573  000630  C023  F020         	movff	___ftadd@sign,??___ftadd
  3574  000634  0E07               	movlw	7
  3575  000636  1620               	andwf	??___ftadd,f,c
  3576  000638  B4D8               	btfsc	status,2,c
  3577  00063A  D006               	goto	l2541
  3578  00063C  D7EF               	goto	l2533
  3579  00063E                     l2539:
  3580  00063E  90D8               	bcf	status,0,c
  3581  000640  321C               	rrcf	___ftadd@f1+2,f,c
  3582  000642  321B               	rrcf	___ftadd@f1+1,f,c
  3583  000644  321A               	rrcf	___ftadd@f1,f,c
  3584  000646  2A25               	incf	___ftadd@exp1,f,c
  3585  000648                     l2541:
  3586  000648  5024               	movf	___ftadd@exp2,w,c
  3587  00064A  1825               	xorwf	___ftadd@exp1,w,c
  3588  00064C  B4D8               	btfsc	status,2,c
  3589  00064E  D01F               	goto	l486
  3590  000650  D7F6               	goto	l2539
  3591  000652                     l2543:
  3592  000652  5025               	movf	___ftadd@exp1,w,c
  3593  000654  5C24               	subwf	___ftadd@exp2,w,c
  3594  000656  B0D8               	btfsc	status,0,c
  3595  000658  D01A               	goto	l486
  3596  00065A                     l2545:
  3597  00065A  90D8               	bcf	status,0,c
  3598  00065C  361A               	rlcf	___ftadd@f1,f,c
  3599  00065E  361B               	rlcf	___ftadd@f1+1,f,c
  3600  000660  361C               	rlcf	___ftadd@f1+2,f,c
  3601  000662  0625               	decf	___ftadd@exp1,f,c
  3602  000664  5025               	movf	___ftadd@exp1,w,c
  3603  000666  1824               	xorwf	___ftadd@exp2,w,c
  3604  000668  B4D8               	btfsc	status,2,c
  3605  00066A  D00D               	goto	l2553
  3606  00066C  0623               	decf	___ftadd@sign,f,c
  3607  00066E  C023  F020         	movff	___ftadd@sign,??___ftadd
  3608  000672  0E07               	movlw	7
  3609  000674  1620               	andwf	??___ftadd,f,c
  3610  000676  B4D8               	btfsc	status,2,c
  3611  000678  D006               	goto	l2553
  3612  00067A  D7EF               	goto	l2545
  3613  00067C                     l2551:
  3614  00067C  90D8               	bcf	status,0,c
  3615  00067E  321F               	rrcf	___ftadd@f2+2,f,c
  3616  000680  321E               	rrcf	___ftadd@f2+1,f,c
  3617  000682  321D               	rrcf	___ftadd@f2,f,c
  3618  000684  2A24               	incf	___ftadd@exp2,f,c
  3619  000686                     l2553:
  3620  000686  5024               	movf	___ftadd@exp2,w,c
  3621  000688  1825               	xorwf	___ftadd@exp1,w,c
  3622  00068A  A4D8               	btfss	status,2,c
  3623  00068C  D7F7               	goto	l2551
  3624  00068E                     l486:
  3625  00068E  AE23               	btfss	___ftadd@sign,7,c
  3626  000690  D00C               	goto	l495
  3627  000692  0EFF               	movlw	255
  3628  000694  1A1A               	xorwf	___ftadd@f1,f,c
  3629  000696  0EFF               	movlw	255
  3630  000698  1A1B               	xorwf	___ftadd@f1+1,f,c
  3631  00069A  0EFF               	movlw	255
  3632  00069C  1A1C               	xorwf	___ftadd@f1+2,f,c
  3633  00069E  0E01               	movlw	1
  3634  0006A0  261A               	addwf	___ftadd@f1,f,c
  3635  0006A2  0E00               	movlw	0
  3636  0006A4  221B               	addwfc	___ftadd@f1+1,f,c
  3637  0006A6  0E00               	movlw	0
  3638  0006A8  221C               	addwfc	___ftadd@f1+2,f,c
  3639  0006AA                     l495:
  3640  0006AA  AC23               	btfss	___ftadd@sign,6,c
  3641  0006AC  D00C               	goto	l2559
  3642  0006AE  0EFF               	movlw	255
  3643  0006B0  1A1D               	xorwf	___ftadd@f2,f,c
  3644  0006B2  0EFF               	movlw	255
  3645  0006B4  1A1E               	xorwf	___ftadd@f2+1,f,c
  3646  0006B6  0EFF               	movlw	255
  3647  0006B8  1A1F               	xorwf	___ftadd@f2+2,f,c
  3648  0006BA  0E01               	movlw	1
  3649  0006BC  261D               	addwf	___ftadd@f2,f,c
  3650  0006BE  0E00               	movlw	0
  3651  0006C0  221E               	addwfc	___ftadd@f2+1,f,c
  3652  0006C2  0E00               	movlw	0
  3653  0006C4  221F               	addwfc	___ftadd@f2+2,f,c
  3654  0006C6                     l2559:
  3655  0006C6  0E00               	movlw	0
  3656  0006C8  6E23               	movwf	___ftadd@sign,c
  3657  0006CA  501A               	movf	___ftadd@f1,w,c
  3658  0006CC  261D               	addwf	___ftadd@f2,f,c
  3659  0006CE  501B               	movf	___ftadd@f1+1,w,c
  3660  0006D0  221E               	addwfc	___ftadd@f2+1,f,c
  3661  0006D2  501C               	movf	___ftadd@f1+2,w,c
  3662  0006D4  221F               	addwfc	___ftadd@f2+2,f,c
  3663  0006D6  AE1F               	btfss	___ftadd@f2+2,7,c
  3664  0006D8  D00E               	goto	l2569
  3665  0006DA  0EFF               	movlw	255
  3666  0006DC  1A1D               	xorwf	___ftadd@f2,f,c
  3667  0006DE  0EFF               	movlw	255
  3668  0006E0  1A1E               	xorwf	___ftadd@f2+1,f,c
  3669  0006E2  0EFF               	movlw	255
  3670  0006E4  1A1F               	xorwf	___ftadd@f2+2,f,c
  3671  0006E6  0E01               	movlw	1
  3672  0006E8  261D               	addwf	___ftadd@f2,f,c
  3673  0006EA  0E00               	movlw	0
  3674  0006EC  221E               	addwfc	___ftadd@f2+1,f,c
  3675  0006EE  0E00               	movlw	0
  3676  0006F0  221F               	addwfc	___ftadd@f2+2,f,c
  3677  0006F2  0E01               	movlw	1
  3678  0006F4  6E23               	movwf	___ftadd@sign,c
  3679  0006F6                     l2569:
  3680  0006F6  C01D  F00F         	movff	___ftadd@f2,___ftpack@arg
  3681  0006FA  C01E  F010         	movff	___ftadd@f2+1,___ftpack@arg+1
  3682  0006FE  C01F  F011         	movff	___ftadd@f2+2,___ftpack@arg+2
  3683  000702  C025  F012         	movff	___ftadd@exp1,___ftpack@exp
  3684  000706  C023  F013         	movff	___ftadd@sign,___ftpack@sign
  3685  00070A  EC73  F006         	call	___ftpack	;wreg free
  3686  00070E  C00F  F01A         	movff	?___ftpack,?___ftadd
  3687  000712  C010  F01B         	movff	?___ftpack+1,?___ftadd+1
  3688  000716  C011  F01C         	movff	?___ftpack+2,?___ftadd+2
  3689  00071A  0012               	return	
  3690  00071C                     __end_of___ftadd:
  3691                           	opt stack 0
  3692                           tblptru	equ	0xFF8
  3693                           tblptrh	equ	0xFF7
  3694                           tblptrl	equ	0xFF6
  3695                           tablat	equ	0xFF5
  3696                           prodh	equ	0xFF4
  3697                           prodl	equ	0xFF3
  3698                           intcon	equ	0xFF2
  3699                           intcon2	equ	0xFF1
  3700                           postinc0	equ	0xFEE
  3701                           wreg	equ	0xFE8
  3702                           indf2	equ	0xFDF
  3703                           fsr2h	equ	0xFDA
  3704                           fsr2l	equ	0xFD9
  3705                           status	equ	0xFD8
  3706                           
  3707 ;; *************** function ___ftneg *****************
  3708 ;; Defined at:
  3709 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftneg.c"
  3710 ;; Parameters:    Size  Location     Type
  3711 ;;  f1              3   22[COMRAM] float 
  3712 ;; Auto vars:     Size  Location     Type
  3713 ;;		None
  3714 ;; Return value:  Size  Location     Type
  3715 ;;                  3   22[COMRAM] float 
  3716 ;; Registers used:
  3717 ;;		wreg, status,2, status,0
  3718 ;; Tracked objects:
  3719 ;;		On entry : 0/0
  3720 ;;		On exit  : 0/0
  3721 ;;		Unchanged: 0/0
  3722 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3723 ;;      Params:         3       0       0       0       0       0       0
  3724 ;;      Locals:         0       0       0       0       0       0       0
  3725 ;;      Temps:          0       0       0       0       0       0       0
  3726 ;;      Totals:         3       0       0       0       0       0       0
  3727 ;;Total ram usage:        3 bytes
  3728 ;; Hardware stack levels used:    1
  3729 ;; Hardware stack levels required when called:    1
  3730 ;; This function calls:
  3731 ;;		Nothing
  3732 ;; This function is called by:
  3733 ;;		_main
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737                           	psect	text18
  3738  001222                     __ptext18:
  3739                           	opt stack 0
  3740  001222                     ___ftneg:
  3741                           	opt stack 29
  3742                           
  3743                           ;incstack = 0
  3744  001222  5017               	movf	___ftneg@f1,w,c
  3745  001224  1018               	iorwf	___ftneg@f1+1,w,c
  3746  001226  1019               	iorwf	___ftneg@f1+2,w,c
  3747  001228  B4D8               	btfsc	status,2,c
  3748  00122A  D006               	goto	l528
  3749  00122C  0E00               	movlw	0
  3750  00122E  1A17               	xorwf	___ftneg@f1,f,c
  3751  001230  0E00               	movlw	0
  3752  001232  1A18               	xorwf	___ftneg@f1+1,f,c
  3753  001234  0E80               	movlw	128
  3754  001236  1A19               	xorwf	___ftneg@f1+2,f,c
  3755  001238                     l528:
  3756  001238  C017  F017         	movff	___ftneg@f1,?___ftneg
  3757  00123C  C018  F018         	movff	___ftneg@f1+1,?___ftneg+1
  3758  001240  C019  F019         	movff	___ftneg@f1+2,?___ftneg+2
  3759  001244  0012               	return		;funcret
  3760  001246                     __end_of___ftneg:
  3761                           	opt stack 0
  3762                           tblptru	equ	0xFF8
  3763                           tblptrh	equ	0xFF7
  3764                           tblptrl	equ	0xFF6
  3765                           tablat	equ	0xFF5
  3766                           prodh	equ	0xFF4
  3767                           prodl	equ	0xFF3
  3768                           intcon	equ	0xFF2
  3769                           intcon2	equ	0xFF1
  3770                           postinc0	equ	0xFEE
  3771                           wreg	equ	0xFE8
  3772                           indf2	equ	0xFDF
  3773                           fsr2h	equ	0xFDA
  3774                           fsr2l	equ	0xFD9
  3775                           status	equ	0xFD8
  3776                           
  3777 ;; *************** function ___ftge *****************
  3778 ;; Defined at:
  3779 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftge.c"
  3780 ;; Parameters:    Size  Location     Type
  3781 ;;  ff1             3   37[COMRAM] float 
  3782 ;;  ff2             3   40[COMRAM] float 
  3783 ;; Auto vars:     Size  Location     Type
  3784 ;;		None
  3785 ;; Return value:  Size  Location     Type
  3786 ;;		None               void
  3787 ;; Registers used:
  3788 ;;		wreg, status,2, status,0
  3789 ;; Tracked objects:
  3790 ;;		On entry : 0/0
  3791 ;;		On exit  : 0/0
  3792 ;;		Unchanged: 0/0
  3793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3794 ;;      Params:         6       0       0       0       0       0       0
  3795 ;;      Locals:         0       0       0       0       0       0       0
  3796 ;;      Temps:          3       0       0       0       0       0       0
  3797 ;;      Totals:         9       0       0       0       0       0       0
  3798 ;;Total ram usage:        9 bytes
  3799 ;; Hardware stack levels used:    1
  3800 ;; Hardware stack levels required when called:    1
  3801 ;; This function calls:
  3802 ;;		Nothing
  3803 ;; This function is called by:
  3804 ;;		_main
  3805 ;; This function uses a non-reentrant model
  3806 ;;
  3807                           
  3808                           	psect	text19
  3809  000E26                     __ptext19:
  3810                           	opt stack 0
  3811  000E26                     ___ftge:
  3812                           	opt stack 29
  3813                           
  3814                           ;incstack = 0
  3815  000E26  AE28               	btfss	___ftge@ff1+2,7,c
  3816  000E28  D016               	goto	l2879
  3817  000E2A  C026  F02C         	movff	___ftge@ff1,??___ftge
  3818  000E2E  C027  F02D         	movff	___ftge@ff1+1,??___ftge+1
  3819  000E32  C028  F02E         	movff	___ftge@ff1+2,??___ftge+2
  3820  000E36  1E2C               	comf	??___ftge,f,c
  3821  000E38  1E2D               	comf	??___ftge+1,f,c
  3822  000E3A  1E2E               	comf	??___ftge+2,f,c
  3823  000E3C  2A2C               	incf	??___ftge,f,c
  3824  000E3E  0E00               	movlw	0
  3825  000E40  222D               	addwfc	??___ftge+1,f,c
  3826  000E42  222E               	addwfc	??___ftge+2,f,c
  3827  000E44  0E00               	movlw	0
  3828  000E46  242C               	addwf	??___ftge,w,c
  3829  000E48  6E26               	movwf	___ftge@ff1,c
  3830  000E4A  0E00               	movlw	0
  3831  000E4C  202D               	addwfc	??___ftge+1,w,c
  3832  000E4E  6E27               	movwf	___ftge@ff1+1,c
  3833  000E50  0E80               	movlw	128
  3834  000E52  202E               	addwfc	??___ftge+2,w,c
  3835  000E54  6E28               	movwf	___ftge@ff1+2,c
  3836  000E56                     l2879:
  3837  000E56  AE2B               	btfss	___ftge@ff2+2,7,c
  3838  000E58  D016               	goto	l2883
  3839  000E5A  C029  F02C         	movff	___ftge@ff2,??___ftge
  3840  000E5E  C02A  F02D         	movff	___ftge@ff2+1,??___ftge+1
  3841  000E62  C02B  F02E         	movff	___ftge@ff2+2,??___ftge+2
  3842  000E66  1E2C               	comf	??___ftge,f,c
  3843  000E68  1E2D               	comf	??___ftge+1,f,c
  3844  000E6A  1E2E               	comf	??___ftge+2,f,c
  3845  000E6C  2A2C               	incf	??___ftge,f,c
  3846  000E6E  0E00               	movlw	0
  3847  000E70  222D               	addwfc	??___ftge+1,f,c
  3848  000E72  222E               	addwfc	??___ftge+2,f,c
  3849  000E74  0E00               	movlw	0
  3850  000E76  242C               	addwf	??___ftge,w,c
  3851  000E78  6E29               	movwf	___ftge@ff2,c
  3852  000E7A  0E00               	movlw	0
  3853  000E7C  202D               	addwfc	??___ftge+1,w,c
  3854  000E7E  6E2A               	movwf	___ftge@ff2+1,c
  3855  000E80  0E80               	movlw	128
  3856  000E82  202E               	addwfc	??___ftge+2,w,c
  3857  000E84  6E2B               	movwf	___ftge@ff2+2,c
  3858  000E86                     l2883:
  3859  000E86  0E00               	movlw	0
  3860  000E88  1A26               	xorwf	___ftge@ff1,f,c
  3861  000E8A  0E00               	movlw	0
  3862  000E8C  1A27               	xorwf	___ftge@ff1+1,f,c
  3863  000E8E  0E80               	movlw	128
  3864  000E90  1A28               	xorwf	___ftge@ff1+2,f,c
  3865  000E92  0E00               	movlw	0
  3866  000E94  1A29               	xorwf	___ftge@ff2,f,c
  3867  000E96  0E00               	movlw	0
  3868  000E98  1A2A               	xorwf	___ftge@ff2+1,f,c
  3869  000E9A  0E80               	movlw	128
  3870  000E9C  1A2B               	xorwf	___ftge@ff2+2,f,c
  3871  000E9E  5029               	movf	___ftge@ff2,w,c
  3872  000EA0  5C26               	subwf	___ftge@ff1,w,c
  3873  000EA2  502A               	movf	___ftge@ff2+1,w,c
  3874  000EA4  5827               	subwfb	___ftge@ff1+1,w,c
  3875  000EA6  502B               	movf	___ftge@ff2+2,w,c
  3876  000EA8  5828               	subwfb	___ftge@ff1+2,w,c
  3877  000EAA  B0D8               	btfsc	status,0,c
  3878  000EAC  D002               	goto	l2889
  3879  000EAE  90D8               	bcf	status,0,c
  3880  000EB0  0012               	return	
  3881  000EB2                     l2889:
  3882  000EB2  80D8               	bsf	status,0,c
  3883  000EB4  0012               	return	
  3884  000EB6                     __end_of___ftge:
  3885                           	opt stack 0
  3886                           tblptru	equ	0xFF8
  3887                           tblptrh	equ	0xFF7
  3888                           tblptrl	equ	0xFF6
  3889                           tablat	equ	0xFF5
  3890                           prodh	equ	0xFF4
  3891                           prodl	equ	0xFF3
  3892                           intcon	equ	0xFF2
  3893                           intcon2	equ	0xFF1
  3894                           postinc0	equ	0xFEE
  3895                           wreg	equ	0xFE8
  3896                           indf2	equ	0xFDF
  3897                           fsr2h	equ	0xFDA
  3898                           fsr2l	equ	0xFD9
  3899                           status	equ	0xFD8
  3900                           
  3901 ;; *************** function ___ftdiv *****************
  3902 ;; Defined at:
  3903 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\ftdiv.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;  f1              3   52[COMRAM] float 
  3906 ;;  f2              3   55[COMRAM] float 
  3907 ;; Auto vars:     Size  Location     Type
  3908 ;;  f3              3   62[COMRAM] float 
  3909 ;;  sign            1   66[COMRAM] unsigned char 
  3910 ;;  exp             1   65[COMRAM] unsigned char 
  3911 ;;  cntr            1   61[COMRAM] unsigned char 
  3912 ;; Return value:  Size  Location     Type
  3913 ;;                  3   52[COMRAM] float 
  3914 ;; Registers used:
  3915 ;;		wreg, status,2, status,0, cstack
  3916 ;; Tracked objects:
  3917 ;;		On entry : 0/0
  3918 ;;		On exit  : 0/0
  3919 ;;		Unchanged: 0/0
  3920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3921 ;;      Params:         6       0       0       0       0       0       0
  3922 ;;      Locals:         6       0       0       0       0       0       0
  3923 ;;      Temps:          3       0       0       0       0       0       0
  3924 ;;      Totals:        15       0       0       0       0       0       0
  3925 ;;Total ram usage:       15 bytes
  3926 ;; Hardware stack levels used:    1
  3927 ;; Hardware stack levels required when called:    2
  3928 ;; This function calls:
  3929 ;;		___ftpack
  3930 ;; This function is called by:
  3931 ;;		_main
  3932 ;; This function uses a non-reentrant model
  3933 ;;
  3934                           
  3935                           	psect	text20
  3936  000B42                     __ptext20:
  3937                           	opt stack 0
  3938  000B42                     ___ftdiv:
  3939                           	opt stack 28
  3940                           
  3941                           ;incstack = 0
  3942  000B42  C037  F03B         	movff	___ftdiv@f1+2,??___ftdiv
  3943  000B46  6A3C               	clrf	(??___ftdiv+1)& (0+255),c
  3944  000B48  6A3D               	clrf	(??___ftdiv+2)& (0+255),c
  3945  000B4A  3436               	rlcf	___ftdiv@f1+1,w,c
  3946  000B4C  363B               	rlcf	??___ftdiv& (0+255),f,c
  3947  000B4E  E301               	bnc	u3281
  3948  000B50  803C               	bsf	(??___ftdiv+1)& (0+255),0,c
  3949  000B52                     u3281:
  3950  000B52  503B               	movf	??___ftdiv,w,c
  3951  000B54  6E42               	movwf	___ftdiv@exp,c
  3952  000B56  5042               	movf	___ftdiv@exp,w,c
  3953  000B58  A4D8               	btfss	status,2,c
  3954  000B5A  D007               	goto	l2771
  3955  000B5C  0E00               	movlw	0
  3956  000B5E  6E35               	movwf	?___ftdiv,c
  3957  000B60  0E00               	movlw	0
  3958  000B62  6E36               	movwf	?___ftdiv+1,c
  3959  000B64  0E00               	movlw	0
  3960  000B66  6E37               	movwf	?___ftdiv+2,c
  3961  000B68  0012               	return	
  3962  000B6A                     l2771:
  3963  000B6A  C03A  F03B         	movff	___ftdiv@f2+2,??___ftdiv
  3964  000B6E  6A3C               	clrf	(??___ftdiv+1)& (0+255),c
  3965  000B70  6A3D               	clrf	(??___ftdiv+2)& (0+255),c
  3966  000B72  3439               	rlcf	___ftdiv@f2+1,w,c
  3967  000B74  363B               	rlcf	??___ftdiv& (0+255),f,c
  3968  000B76  E301               	bnc	u3301
  3969  000B78  803C               	bsf	(??___ftdiv+1)& (0+255),0,c
  3970  000B7A                     u3301:
  3971  000B7A  503B               	movf	??___ftdiv,w,c
  3972  000B7C  6E43               	movwf	___ftdiv@sign,c
  3973  000B7E  5043               	movf	___ftdiv@sign,w,c
  3974  000B80  A4D8               	btfss	status,2,c
  3975  000B82  D007               	goto	l2777
  3976  000B84  0E00               	movlw	0
  3977  000B86  6E35               	movwf	?___ftdiv,c
  3978  000B88  0E00               	movlw	0
  3979  000B8A  6E36               	movwf	?___ftdiv+1,c
  3980  000B8C  0E00               	movlw	0
  3981  000B8E  6E37               	movwf	?___ftdiv+2,c
  3982  000B90  0012               	return	
  3983  000B92                     l2777:
  3984  000B92  0E00               	movlw	0
  3985  000B94  6E3F               	movwf	___ftdiv@f3,c
  3986  000B96  0E00               	movlw	0
  3987  000B98  6E40               	movwf	___ftdiv@f3+1,c
  3988  000B9A  0E00               	movlw	0
  3989  000B9C  6E41               	movwf	___ftdiv@f3+2,c
  3990  000B9E  5043               	movf	___ftdiv@sign,w,c
  3991  000BA0  0F89               	addlw	137
  3992  000BA2  5E42               	subwf	___ftdiv@exp,f,c
  3993  000BA4  C037  F043         	movff	___ftdiv@f1+2,___ftdiv@sign
  3994  000BA8  503A               	movf	___ftdiv@f2+2,w,c
  3995  000BAA  1A43               	xorwf	___ftdiv@sign,f,c
  3996  000BAC  0E80               	movlw	128
  3997  000BAE  1643               	andwf	___ftdiv@sign,f,c
  3998  000BB0  8E36               	bsf	___ftdiv@f1+1,7,c
  3999  000BB2  0EFF               	movlw	255
  4000  000BB4  1635               	andwf	___ftdiv@f1,f,c
  4001  000BB6  0EFF               	movlw	255
  4002  000BB8  1636               	andwf	___ftdiv@f1+1,f,c
  4003  000BBA  0E00               	movlw	0
  4004  000BBC  1637               	andwf	___ftdiv@f1+2,f,c
  4005  000BBE  8E39               	bsf	___ftdiv@f2+1,7,c
  4006  000BC0  0EFF               	movlw	255
  4007  000BC2  1638               	andwf	___ftdiv@f2,f,c
  4008  000BC4  0EFF               	movlw	255
  4009  000BC6  1639               	andwf	___ftdiv@f2+1,f,c
  4010  000BC8  0E00               	movlw	0
  4011  000BCA  163A               	andwf	___ftdiv@f2+2,f,c
  4012  000BCC  0E18               	movlw	24
  4013  000BCE  6E3E               	movwf	___ftdiv@cntr,c
  4014  000BD0                     l2797:
  4015  000BD0  90D8               	bcf	status,0,c
  4016  000BD2  363F               	rlcf	___ftdiv@f3,f,c
  4017  000BD4  3640               	rlcf	___ftdiv@f3+1,f,c
  4018  000BD6  3641               	rlcf	___ftdiv@f3+2,f,c
  4019  000BD8  5038               	movf	___ftdiv@f2,w,c
  4020  000BDA  5C35               	subwf	___ftdiv@f1,w,c
  4021  000BDC  5039               	movf	___ftdiv@f2+1,w,c
  4022  000BDE  5836               	subwfb	___ftdiv@f1+1,w,c
  4023  000BE0  503A               	movf	___ftdiv@f2+2,w,c
  4024  000BE2  5837               	subwfb	___ftdiv@f1+2,w,c
  4025  000BE4  A0D8               	btfss	status,0,c
  4026  000BE6  D007               	goto	l506
  4027  000BE8  5038               	movf	___ftdiv@f2,w,c
  4028  000BEA  5E35               	subwf	___ftdiv@f1,f,c
  4029  000BEC  5039               	movf	___ftdiv@f2+1,w,c
  4030  000BEE  5A36               	subwfb	___ftdiv@f1+1,f,c
  4031  000BF0  503A               	movf	___ftdiv@f2+2,w,c
  4032  000BF2  5A37               	subwfb	___ftdiv@f1+2,f,c
  4033  000BF4  803F               	bsf	___ftdiv@f3,0,c
  4034  000BF6                     l506:
  4035  000BF6  90D8               	bcf	status,0,c
  4036  000BF8  3635               	rlcf	___ftdiv@f1,f,c
  4037  000BFA  3636               	rlcf	___ftdiv@f1+1,f,c
  4038  000BFC  3637               	rlcf	___ftdiv@f1+2,f,c
  4039  000BFE  2E3E               	decfsz	___ftdiv@cntr,f,c
  4040  000C00  D7E7               	goto	l2797
  4041  000C02  C03F  F00F         	movff	___ftdiv@f3,___ftpack@arg
  4042  000C06  C040  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4043  000C0A  C041  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4044  000C0E  C042  F012         	movff	___ftdiv@exp,___ftpack@exp
  4045  000C12  C043  F013         	movff	___ftdiv@sign,___ftpack@sign
  4046  000C16  EC73  F006         	call	___ftpack	;wreg free
  4047  000C1A  C00F  F035         	movff	?___ftpack,?___ftdiv
  4048  000C1E  C010  F036         	movff	?___ftpack+1,?___ftdiv+1
  4049  000C22  C011  F037         	movff	?___ftpack+2,?___ftdiv+2
  4050  000C26  0012               	return	
  4051  000C28                     __end_of___ftdiv:
  4052                           	opt stack 0
  4053                           tblptru	equ	0xFF8
  4054                           tblptrh	equ	0xFF7
  4055                           tblptrl	equ	0xFF6
  4056                           tablat	equ	0xFF5
  4057                           prodh	equ	0xFF4
  4058                           prodl	equ	0xFF3
  4059                           intcon	equ	0xFF2
  4060                           intcon2	equ	0xFF1
  4061                           postinc0	equ	0xFEE
  4062                           wreg	equ	0xFE8
  4063                           indf2	equ	0xFDF
  4064                           fsr2h	equ	0xFDA
  4065                           fsr2l	equ	0xFD9
  4066                           status	equ	0xFD8
  4067                           
  4068 ;; *************** function ___awtoft *****************
  4069 ;; Defined at:
  4070 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awtoft.c"
  4071 ;; Parameters:    Size  Location     Type
  4072 ;;  c               2   22[COMRAM] int 
  4073 ;; Auto vars:     Size  Location     Type
  4074 ;;  sign            1   25[COMRAM] unsigned char 
  4075 ;; Return value:  Size  Location     Type
  4076 ;;                  3   22[COMRAM] float 
  4077 ;; Registers used:
  4078 ;;		wreg, status,2, status,0, cstack
  4079 ;; Tracked objects:
  4080 ;;		On entry : 0/0
  4081 ;;		On exit  : 0/0
  4082 ;;		Unchanged: 0/0
  4083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4084 ;;      Params:         3       0       0       0       0       0       0
  4085 ;;      Locals:         1       0       0       0       0       0       0
  4086 ;;      Temps:          0       0       0       0       0       0       0
  4087 ;;      Totals:         4       0       0       0       0       0       0
  4088 ;;Total ram usage:        4 bytes
  4089 ;; Hardware stack levels used:    1
  4090 ;; Hardware stack levels required when called:    2
  4091 ;; This function calls:
  4092 ;;		___ftpack
  4093 ;; This function is called by:
  4094 ;;		_main
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097                           
  4098                           	psect	text21
  4099  001192                     __ptext21:
  4100                           	opt stack 0
  4101  001192                     ___awtoft:
  4102                           	opt stack 28
  4103                           
  4104                           ;incstack = 0
  4105  001192  0E00               	movlw	0
  4106  001194  6E1A               	movwf	___awtoft@sign,c
  4107  001196  AE18               	btfss	___awtoft@c+1,7,c
  4108  001198  D006               	goto	l2871
  4109  00119A  6C17               	negf	___awtoft@c,c
  4110  00119C  1E18               	comf	___awtoft@c+1,f,c
  4111  00119E  B0D8               	btfsc	status,0,c
  4112  0011A0  2A18               	incf	___awtoft@c+1,f,c
  4113  0011A2  0E01               	movlw	1
  4114  0011A4  6E1A               	movwf	___awtoft@sign,c
  4115  0011A6                     l2871:
  4116  0011A6  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  4117  0011AA  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  4118  0011AE  6A11               	clrf	___ftpack@arg+2,c
  4119  0011B0  0E8E               	movlw	142
  4120  0011B2  6E12               	movwf	___ftpack@exp,c
  4121  0011B4  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  4122  0011B8  EC73  F006         	call	___ftpack	;wreg free
  4123  0011BC  C00F  F017         	movff	?___ftpack,?___awtoft
  4124  0011C0  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  4125  0011C4  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  4126  0011C8  0012               	return	
  4127  0011CA                     __end_of___awtoft:
  4128                           	opt stack 0
  4129                           tblptru	equ	0xFF8
  4130                           tblptrh	equ	0xFF7
  4131                           tblptrl	equ	0xFF6
  4132                           tablat	equ	0xFF5
  4133                           prodh	equ	0xFF4
  4134                           prodl	equ	0xFF3
  4135                           intcon	equ	0xFF2
  4136                           intcon2	equ	0xFF1
  4137                           postinc0	equ	0xFEE
  4138                           wreg	equ	0xFE8
  4139                           indf2	equ	0xFDF
  4140                           fsr2h	equ	0xFDA
  4141                           fsr2l	equ	0xFD9
  4142                           status	equ	0xFD8
  4143                           
  4144 ;; *************** function ___ftpack *****************
  4145 ;; Defined at:
  4146 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\float.c"
  4147 ;; Parameters:    Size  Location     Type
  4148 ;;  arg             3   14[COMRAM] unsigned um
  4149 ;;  exp             1   17[COMRAM] unsigned char 
  4150 ;;  sign            1   18[COMRAM] unsigned char 
  4151 ;; Auto vars:     Size  Location     Type
  4152 ;;		None
  4153 ;; Return value:  Size  Location     Type
  4154 ;;                  3   14[COMRAM] float 
  4155 ;; Registers used:
  4156 ;;		wreg, status,2, status,0
  4157 ;; Tracked objects:
  4158 ;;		On entry : 0/0
  4159 ;;		On exit  : 0/0
  4160 ;;		Unchanged: 0/0
  4161 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4162 ;;      Params:         5       0       0       0       0       0       0
  4163 ;;      Locals:         0       0       0       0       0       0       0
  4164 ;;      Temps:          3       0       0       0       0       0       0
  4165 ;;      Totals:         8       0       0       0       0       0       0
  4166 ;;Total ram usage:        8 bytes
  4167 ;; Hardware stack levels used:    1
  4168 ;; Hardware stack levels required when called:    1
  4169 ;; This function calls:
  4170 ;;		Nothing
  4171 ;; This function is called by:
  4172 ;;		___altoft
  4173 ;;		___awtoft
  4174 ;;		___ftadd
  4175 ;;		___ftdiv
  4176 ;;		___ftmul
  4177 ;; This function uses a non-reentrant model
  4178 ;;
  4179                           
  4180                           	psect	text22
  4181  000CE6                     __ptext22:
  4182                           	opt stack 0
  4183  000CE6                     ___ftpack:
  4184                           	opt stack 27
  4185                           
  4186                           ;incstack = 0
  4187  000CE6  5012               	movf	___ftpack@exp,w,c
  4188  000CE8  B4D8               	btfsc	status,2,c
  4189  000CEA  D005               	goto	l2349
  4190  000CEC  500F               	movf	___ftpack@arg,w,c
  4191  000CEE  1010               	iorwf	___ftpack@arg+1,w,c
  4192  000CF0  1011               	iorwf	___ftpack@arg+2,w,c
  4193  000CF2  A4D8               	btfss	status,2,c
  4194  000CF4  D00C               	goto	l2355
  4195  000CF6                     l2349:
  4196  000CF6  0E00               	movlw	0
  4197  000CF8  6E0F               	movwf	?___ftpack,c
  4198  000CFA  0E00               	movlw	0
  4199  000CFC  6E10               	movwf	?___ftpack+1,c
  4200  000CFE  0E00               	movlw	0
  4201  000D00  6E11               	movwf	?___ftpack+2,c
  4202  000D02  0012               	return	
  4203  000D04                     l2353:
  4204  000D04  2A12               	incf	___ftpack@exp,f,c
  4205  000D06  90D8               	bcf	status,0,c
  4206  000D08  3211               	rrcf	___ftpack@arg+2,f,c
  4207  000D0A  3210               	rrcf	___ftpack@arg+1,f,c
  4208  000D0C  320F               	rrcf	___ftpack@arg,f,c
  4209  000D0E                     l2355:
  4210  000D0E  0E00               	movlw	0
  4211  000D10  140F               	andwf	___ftpack@arg,w,c
  4212  000D12  6E14               	movwf	??___ftpack& (0+255),c
  4213  000D14  0E00               	movlw	0
  4214  000D16  1410               	andwf	___ftpack@arg+1,w,c
  4215  000D18  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4216  000D1A  0EFE               	movlw	254
  4217  000D1C  1411               	andwf	___ftpack@arg+2,w,c
  4218  000D1E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4219  000D20  5014               	movf	??___ftpack,w,c
  4220  000D22  1015               	iorwf	??___ftpack+1,w,c
  4221  000D24  1016               	iorwf	??___ftpack+2,w,c
  4222  000D26  B4D8               	btfsc	status,2,c
  4223  000D28  D00C               	goto	l2361
  4224  000D2A  D7EC               	goto	l2353
  4225  000D2C                     l2357:
  4226  000D2C  2A12               	incf	___ftpack@exp,f,c
  4227  000D2E  0E01               	movlw	1
  4228  000D30  260F               	addwf	___ftpack@arg,f,c
  4229  000D32  0E00               	movlw	0
  4230  000D34  2210               	addwfc	___ftpack@arg+1,f,c
  4231  000D36  0E00               	movlw	0
  4232  000D38  2211               	addwfc	___ftpack@arg+2,f,c
  4233  000D3A  90D8               	bcf	status,0,c
  4234  000D3C  3211               	rrcf	___ftpack@arg+2,f,c
  4235  000D3E  3210               	rrcf	___ftpack@arg+1,f,c
  4236  000D40  320F               	rrcf	___ftpack@arg,f,c
  4237  000D42                     l2361:
  4238  000D42  0E00               	movlw	0
  4239  000D44  140F               	andwf	___ftpack@arg,w,c
  4240  000D46  6E14               	movwf	??___ftpack& (0+255),c
  4241  000D48  0E00               	movlw	0
  4242  000D4A  1410               	andwf	___ftpack@arg+1,w,c
  4243  000D4C  6E15               	movwf	(??___ftpack+1)& (0+255),c
  4244  000D4E  0EFF               	movlw	255
  4245  000D50  1411               	andwf	___ftpack@arg+2,w,c
  4246  000D52  6E16               	movwf	(??___ftpack+2)& (0+255),c
  4247  000D54  5014               	movf	??___ftpack,w,c
  4248  000D56  1015               	iorwf	??___ftpack+1,w,c
  4249  000D58  1016               	iorwf	??___ftpack+2,w,c
  4250  000D5A  B4D8               	btfsc	status,2,c
  4251  000D5C  D006               	goto	l2365
  4252  000D5E  D7E6               	goto	l2357
  4253  000D60                     l2363:
  4254  000D60  0612               	decf	___ftpack@exp,f,c
  4255  000D62  90D8               	bcf	status,0,c
  4256  000D64  360F               	rlcf	___ftpack@arg,f,c
  4257  000D66  3610               	rlcf	___ftpack@arg+1,f,c
  4258  000D68  3611               	rlcf	___ftpack@arg+2,f,c
  4259  000D6A                     l2365:
  4260  000D6A  BE10               	btfsc	___ftpack@arg+1,7,c
  4261  000D6C  D003               	goto	l448
  4262  000D6E  0E02               	movlw	2
  4263  000D70  6012               	cpfslt	___ftpack@exp,c
  4264  000D72  D7F6               	goto	l2363
  4265  000D74                     l448:
  4266  000D74  A012               	btfss	___ftpack@exp,0,c
  4267  000D76  9E10               	bcf	___ftpack@arg+1,7,c
  4268  000D78  90D8               	bcf	status,0,c
  4269  000D7A  3212               	rrcf	___ftpack@exp,f,c
  4270  000D7C  5012               	movf	___ftpack@exp,w,c
  4271  000D7E  1211               	iorwf	___ftpack@arg+2,f,c
  4272  000D80  5013               	movf	___ftpack@sign,w,c
  4273  000D82  A4D8               	btfss	status,2,c
  4274  000D84  8E11               	bsf	___ftpack@arg+2,7,c
  4275  000D86  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  4276  000D8A  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  4277  000D8E  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  4278  000D92  0012               	return	
  4279  000D94                     __end_of___ftpack:
  4280                           	opt stack 0
  4281                           tblptru	equ	0xFF8
  4282                           tblptrh	equ	0xFF7
  4283                           tblptrl	equ	0xFF6
  4284                           tablat	equ	0xFF5
  4285                           prodh	equ	0xFF4
  4286                           prodl	equ	0xFF3
  4287                           intcon	equ	0xFF2
  4288                           intcon2	equ	0xFF1
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           indf2	equ	0xFDF
  4292                           fsr2h	equ	0xFDA
  4293                           fsr2l	equ	0xFD9
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function ___awdiv *****************
  4297 ;; Defined at:
  4298 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  dividend        2   29[COMRAM] int 
  4301 ;;  divisor         2   31[COMRAM] int 
  4302 ;; Auto vars:     Size  Location     Type
  4303 ;;  quotient        2   35[COMRAM] int 
  4304 ;;  sign            1   34[COMRAM] unsigned char 
  4305 ;;  counter         1   33[COMRAM] unsigned char 
  4306 ;; Return value:  Size  Location     Type
  4307 ;;                  2   29[COMRAM] int 
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4315 ;;      Params:         4       0       0       0       0       0       0
  4316 ;;      Locals:         4       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0
  4318 ;;      Totals:         8       0       0       0       0       0       0
  4319 ;;Total ram usage:        8 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    1
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_main
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           	psect	text23
  4330  000EB6                     __ptext23:
  4331                           	opt stack 0
  4332  000EB6                     ___awdiv:
  4333                           	opt stack 29
  4334                           
  4335                           ;incstack = 0
  4336  000EB6  0E00               	movlw	0
  4337  000EB8  6E23               	movwf	___awdiv@sign,c
  4338  000EBA  AE21               	btfss	___awdiv@divisor+1,7,c
  4339  000EBC  D006               	goto	l2827
  4340  000EBE  6C20               	negf	___awdiv@divisor,c
  4341  000EC0  1E21               	comf	___awdiv@divisor+1,f,c
  4342  000EC2  B0D8               	btfsc	status,0,c
  4343  000EC4  2A21               	incf	___awdiv@divisor+1,f,c
  4344  000EC6  0E01               	movlw	1
  4345  000EC8  6E23               	movwf	___awdiv@sign,c
  4346  000ECA                     l2827:
  4347  000ECA  AE1F               	btfss	___awdiv@dividend+1,7,c
  4348  000ECC  D006               	goto	l2833
  4349  000ECE  6C1E               	negf	___awdiv@dividend,c
  4350  000ED0  1E1F               	comf	___awdiv@dividend+1,f,c
  4351  000ED2  B0D8               	btfsc	status,0,c
  4352  000ED4  2A1F               	incf	___awdiv@dividend+1,f,c
  4353  000ED6  0E01               	movlw	1
  4354  000ED8  1A23               	xorwf	___awdiv@sign,f,c
  4355  000EDA                     l2833:
  4356  000EDA  0E00               	movlw	0
  4357  000EDC  6E25               	movwf	___awdiv@quotient+1,c
  4358  000EDE  0E00               	movlw	0
  4359  000EE0  6E24               	movwf	___awdiv@quotient,c
  4360  000EE2  5020               	movf	___awdiv@divisor,w,c
  4361  000EE4  1021               	iorwf	___awdiv@divisor+1,w,c
  4362  000EE6  B4D8               	btfsc	status,2,c
  4363  000EE8  D01C               	goto	l2855
  4364  000EEA  0E01               	movlw	1
  4365  000EEC  6E22               	movwf	___awdiv@counter,c
  4366  000EEE  D004               	goto	l2841
  4367  000EF0                     l2839:
  4368  000EF0  90D8               	bcf	status,0,c
  4369  000EF2  3620               	rlcf	___awdiv@divisor,f,c
  4370  000EF4  3621               	rlcf	___awdiv@divisor+1,f,c
  4371  000EF6  2A22               	incf	___awdiv@counter,f,c
  4372  000EF8                     l2841:
  4373  000EF8  AE21               	btfss	___awdiv@divisor+1,7,c
  4374  000EFA  D7FA               	goto	l2839
  4375  000EFC                     l2843:
  4376  000EFC  90D8               	bcf	status,0,c
  4377  000EFE  3624               	rlcf	___awdiv@quotient,f,c
  4378  000F00  3625               	rlcf	___awdiv@quotient+1,f,c
  4379  000F02  5020               	movf	___awdiv@divisor,w,c
  4380  000F04  5C1E               	subwf	___awdiv@dividend,w,c
  4381  000F06  5021               	movf	___awdiv@divisor+1,w,c
  4382  000F08  581F               	subwfb	___awdiv@dividend+1,w,c
  4383  000F0A  A0D8               	btfss	status,0,c
  4384  000F0C  D005               	goto	l2851
  4385  000F0E  5020               	movf	___awdiv@divisor,w,c
  4386  000F10  5E1E               	subwf	___awdiv@dividend,f,c
  4387  000F12  5021               	movf	___awdiv@divisor+1,w,c
  4388  000F14  5A1F               	subwfb	___awdiv@dividend+1,f,c
  4389  000F16  8024               	bsf	___awdiv@quotient,0,c
  4390  000F18                     l2851:
  4391  000F18  90D8               	bcf	status,0,c
  4392  000F1A  3221               	rrcf	___awdiv@divisor+1,f,c
  4393  000F1C  3220               	rrcf	___awdiv@divisor,f,c
  4394  000F1E  2E22               	decfsz	___awdiv@counter,f,c
  4395  000F20  D7ED               	goto	l2843
  4396  000F22                     l2855:
  4397  000F22  5023               	movf	___awdiv@sign,w,c
  4398  000F24  B4D8               	btfsc	status,2,c
  4399  000F26  D004               	goto	l2859
  4400  000F28  6C24               	negf	___awdiv@quotient,c
  4401  000F2A  1E25               	comf	___awdiv@quotient+1,f,c
  4402  000F2C  B0D8               	btfsc	status,0,c
  4403  000F2E  2A25               	incf	___awdiv@quotient+1,f,c
  4404  000F30                     l2859:
  4405  000F30  C024  F01E         	movff	___awdiv@quotient,?___awdiv
  4406  000F34  C025  F01F         	movff	___awdiv@quotient+1,?___awdiv+1
  4407  000F38  0012               	return	
  4408  000F3A                     __end_of___awdiv:
  4409                           	opt stack 0
  4410                           tblptru	equ	0xFF8
  4411                           tblptrh	equ	0xFF7
  4412                           tblptrl	equ	0xFF6
  4413                           tablat	equ	0xFF5
  4414                           prodh	equ	0xFF4
  4415                           prodl	equ	0xFF3
  4416                           intcon	equ	0xFF2
  4417                           intcon2	equ	0xFF1
  4418                           postinc0	equ	0xFEE
  4419                           wreg	equ	0xFE8
  4420                           indf2	equ	0xFDF
  4421                           fsr2h	equ	0xFDA
  4422                           fsr2l	equ	0xFD9
  4423                           status	equ	0xFD8
  4424                           
  4425 ;; *************** function _Timer0 *****************
  4426 ;; Defined at:
  4427 ;;		line 67 in file "../my_master.c"
  4428 ;; Parameters:    Size  Location     Type
  4429 ;;		None
  4430 ;; Auto vars:     Size  Location     Type
  4431 ;;		None
  4432 ;; Return value:  Size  Location     Type
  4433 ;;                  1    wreg      void 
  4434 ;; Registers used:
  4435 ;;		wreg, status,2, status,0
  4436 ;; Tracked objects:
  4437 ;;		On entry : 0/0
  4438 ;;		On exit  : 0/0
  4439 ;;		Unchanged: 0/0
  4440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4441 ;;      Params:         0       0       0       0       0       0       0
  4442 ;;      Locals:         0       0       0       0       0       0       0
  4443 ;;      Temps:         14       0       0       0       0       0       0
  4444 ;;      Totals:        14       0       0       0       0       0       0
  4445 ;;Total ram usage:       14 bytes
  4446 ;; Hardware stack levels used:    1
  4447 ;; This function calls:
  4448 ;;		Nothing
  4449 ;; This function is called by:
  4450 ;;		Interrupt level 2
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	intcode
  4455  000008                     __pintcode:
  4456                           	opt stack 0
  4457  000008                     _Timer0:
  4458                           	opt stack 27
  4459                           
  4460                           ;incstack = 0
  4461  000008  825A               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  4462  00000A  EDCA  F006         	call	int_func,f	;refresh shadow registers
  4463                           tblptru	equ	0xFF8
  4464                           tblptrh	equ	0xFF7
  4465                           tblptrl	equ	0xFF6
  4466                           tablat	equ	0xFF5
  4467                           prodh	equ	0xFF4
  4468                           prodl	equ	0xFF3
  4469                           intcon	equ	0xFF2
  4470                           intcon2	equ	0xFF1
  4471                           postinc0	equ	0xFEE
  4472                           wreg	equ	0xFE8
  4473                           indf2	equ	0xFDF
  4474                           fsr2h	equ	0xFDA
  4475                           fsr2l	equ	0xFD9
  4476                           status	equ	0xFD8
  4477                           
  4478                           	psect	intcode_body
  4479  000D94                     __pintcode_body:
  4480                           	opt stack 27
  4481  000D94                     int_func:
  4482                           	opt stack 27
  4483  000D94  0006               	pop		; remove dummy address from shadow register refresh
  4484  000D96  CFFA F001          	movff	pclath,??_Timer0
  4485  000D9A  CFFB F002          	movff	pclatu,??_Timer0+1
  4486  000D9E  CFE9 F003          	movff	fsr0l,??_Timer0+2
  4487  000DA2  CFEA F004          	movff	fsr0h,??_Timer0+3
  4488  000DA6  CFE1 F005          	movff	fsr1l,??_Timer0+4
  4489  000DAA  CFE2 F006          	movff	fsr1h,??_Timer0+5
  4490  000DAE  CFD9 F007          	movff	fsr2l,??_Timer0+6
  4491  000DB2  CFDA F008          	movff	fsr2h,??_Timer0+7
  4492  000DB6  CFF3 F009          	movff	prodl,??_Timer0+8
  4493  000DBA  CFF4 F00A          	movff	prodh,??_Timer0+9
  4494  000DBE  CFF6 F00B          	movff	tblptrl,??_Timer0+10
  4495  000DC2  CFF7 F00C          	movff	tblptrh,??_Timer0+11
  4496  000DC6  CFF8 F00D          	movff	tblptru,??_Timer0+12
  4497  000DCA  CFF5 F00E          	movff	tablat,??_Timer0+13
  4498                           
  4499                           ;my_master.c: 68: if(INTCONbits.TMR0IF){
  4500  000DCE  A4F2               	btfss	intcon,2,c	;volatile
  4501  000DD0  D00C               	goto	i2l68
  4502                           
  4503                           ;my_master.c: 69: cnt0++;
  4504  000DD2  0E01               	movlw	1
  4505  000DD4  264A               	addwf	_cnt0,f,c
  4506  000DD6  0E00               	movlw	0
  4507  000DD8  224B               	addwfc	_cnt0+1,f,c
  4508  000DDA  224C               	addwfc	_cnt0+2,f,c
  4509  000DDC  224D               	addwfc	_cnt0+3,f,c
  4510                           
  4511                           ;my_master.c: 70: INTCONbits.TMR0IF = 0;
  4512  000DDE  94F2               	bcf	intcon,2,c	;volatile
  4513                           
  4514                           ;my_master.c: 71: TMR0H = 0xFC;
  4515  000DE0  0EFC               	movlw	252
  4516  000DE2  6ED7               	movwf	4055,c	;volatile
  4517                           
  4518                           ;my_master.c: 72: TMR0L = 0x18;
  4519  000DE4  0E18               	movlw	24
  4520  000DE6  6ED6               	movwf	4054,c	;volatile
  4521                           
  4522                           ;my_master.c: 73: LATBbits.LB0 = 1;
  4523  000DE8  808A               	bsf	3978,0,c	;volatile
  4524  000DEA                     i2l68:
  4525  000DEA  C00E  FFF5         	movff	??_Timer0+13,tablat
  4526  000DEE  C00D  FFF8         	movff	??_Timer0+12,tblptru
  4527  000DF2  C00C  FFF7         	movff	??_Timer0+11,tblptrh
  4528  000DF6  C00B  FFF6         	movff	??_Timer0+10,tblptrl
  4529  000DFA  C00A  FFF4         	movff	??_Timer0+9,prodh
  4530  000DFE  C009  FFF3         	movff	??_Timer0+8,prodl
  4531  000E02  C008  FFDA         	movff	??_Timer0+7,fsr2h
  4532  000E06  C007  FFD9         	movff	??_Timer0+6,fsr2l
  4533  000E0A  C006  FFE2         	movff	??_Timer0+5,fsr1h
  4534  000E0E  C005  FFE1         	movff	??_Timer0+4,fsr1l
  4535  000E12  C004  FFEA         	movff	??_Timer0+3,fsr0h
  4536  000E16  C003  FFE9         	movff	??_Timer0+2,fsr0l
  4537  000E1A  C002  FFFB         	movff	??_Timer0+1,pclatu
  4538  000E1E  C001  FFFA         	movff	??_Timer0,pclath
  4539  000E22  925A               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  4540  000E24  0011               	retfie		f
  4541  000E26                     __end_of_Timer0:
  4542                           	opt stack 0
  4543  0000                     pclatu	equ	0xFFB
  4544                           pclath	equ	0xFFA
  4545                           tblptru	equ	0xFF8
  4546                           tblptrh	equ	0xFF7
  4547                           tblptrl	equ	0xFF6
  4548                           tablat	equ	0xFF5
  4549                           prodh	equ	0xFF4
  4550                           prodl	equ	0xFF3
  4551                           intcon	equ	0xFF2
  4552                           intcon2	equ	0xFF1
  4553                           postinc0	equ	0xFEE
  4554                           fsr0h	equ	0xFEA
  4555                           fsr0l	equ	0xFE9
  4556                           wreg	equ	0xFE8
  4557                           fsr1h	equ	0xFE2
  4558                           fsr1l	equ	0xFE1
  4559                           indf2	equ	0xFDF
  4560                           fsr2h	equ	0xFDA
  4561                           fsr2l	equ	0xFD9
  4562                           status	equ	0xFD8
  4563                           pclatu	equ	0xFFB
  4564                           pclath	equ	0xFFA
  4565                           tblptru	equ	0xFF8
  4566                           tblptrh	equ	0xFF7
  4567                           tblptrl	equ	0xFF6
  4568                           tablat	equ	0xFF5
  4569                           prodh	equ	0xFF4
  4570                           prodl	equ	0xFF3
  4571                           intcon	equ	0xFF2
  4572                           intcon2	equ	0xFF1
  4573                           postinc0	equ	0xFEE
  4574                           fsr0h	equ	0xFEA
  4575                           fsr0l	equ	0xFE9
  4576                           wreg	equ	0xFE8
  4577                           fsr1h	equ	0xFE2
  4578                           fsr1l	equ	0xFE1
  4579                           indf2	equ	0xFDF
  4580                           fsr2h	equ	0xFDA
  4581                           fsr2l	equ	0xFD9
  4582                           status	equ	0xFD8
  4583                           
  4584                           	psect	rparam
  4585  0000                     pclatu	equ	0xFFB
  4586                           pclath	equ	0xFFA
  4587                           tblptru	equ	0xFF8
  4588                           tblptrh	equ	0xFF7
  4589                           tblptrl	equ	0xFF6
  4590                           tablat	equ	0xFF5
  4591                           prodh	equ	0xFF4
  4592                           prodl	equ	0xFF3
  4593                           intcon	equ	0xFF2
  4594                           intcon2	equ	0xFF1
  4595                           postinc0	equ	0xFEE
  4596                           fsr0h	equ	0xFEA
  4597                           fsr0l	equ	0xFE9
  4598                           wreg	equ	0xFE8
  4599                           fsr1h	equ	0xFE2
  4600                           fsr1l	equ	0xFE1
  4601                           indf2	equ	0xFDF
  4602                           fsr2h	equ	0xFDA
  4603                           fsr2l	equ	0xFD9
  4604                           status	equ	0xFD8
  4605                           
  4606                           	psect	temp
  4607  00005A                     btemp:
  4608                           	opt stack 0
  4609  00005A                     	ds	1
  4610  0000                     int$flags	set	btemp
  4611                           pclatu	equ	0xFFB
  4612                           pclath	equ	0xFFA
  4613                           tblptru	equ	0xFF8
  4614                           tblptrh	equ	0xFF7
  4615                           tblptrl	equ	0xFF6
  4616                           tablat	equ	0xFF5
  4617                           prodh	equ	0xFF4
  4618                           prodl	equ	0xFF3
  4619                           intcon	equ	0xFF2
  4620                           intcon2	equ	0xFF1
  4621                           postinc0	equ	0xFEE
  4622                           fsr0h	equ	0xFEA
  4623                           fsr0l	equ	0xFE9
  4624                           wreg	equ	0xFE8
  4625                           fsr1h	equ	0xFE2
  4626                           fsr1l	equ	0xFE1
  4627                           indf2	equ	0xFDF
  4628                           fsr2h	equ	0xFDA
  4629                           fsr2l	equ	0xFD9
  4630                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        2
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     69      89
    BANK0           128     33      33
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    i2c_read@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@R_data(BANK0[1]), 

    i2c_write@data	PTR unsigned char  size(2) Largest target is 1
		 -> main@W_data2(BANK0[1]), main@W_data(BANK0[1]), 


Critical Paths under _main in COMRAM

    _main->___ftdiv
    _timer_stop->___ftmul
    ___ftmul->___ftadd
    ___altoft->___ftpack
    _serial_write->_timeout
    _init->_serial_baud
    _i2c_write->_Timeout
    _i2c_read->_Timeout
    ___ftsub->___ftadd
    ___ftadd->___ftneg
    ___ftneg->___ftpack
    ___ftge->___ftadd
    ___ftdiv->___ftmul
    ___awtoft->___ftpack
    ___awdiv->___fttol

Critical Paths under _Timer0 in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Timer0 in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Timer0 in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Timer0 in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Timer0 in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Timer0 in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Timer0 in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                35    35      0   35084
                                             67 COMRAM     2     2      0
                                              0 BANK0     33    33      0
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                             ___wmul
                           _i2c_read
                          _i2c_write
                               _init
                       _serial_write
                        _timer_reset
                        _timer_start
                         _timer_stop
 ---------------------------------------------------------------------------------
 (1) _timer_stop                                           0     0      0    6547
                           ___altoft
                            ___ftmul
 ---------------------------------------------------------------------------------
 (2) ___ftmul                                             15     9      6    3742
                                             37 COMRAM    15     9      6
                           ___altoft (ARG)
                            ___ftadd (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (2) ___altoft                                            10     6      4    2805
                                             22 COMRAM    10     6      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) _timer_start                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timer_reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serial_write                                         6     4      2     512
                                             15 COMRAM     6     4      2
                            _timeout
 ---------------------------------------------------------------------------------
 (2) _timeout                                              1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0     108
                        _serial_baud
                        _serial_init
 ---------------------------------------------------------------------------------
 (2) _serial_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serial_baud                                          8     4      4     108
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _i2c_write                                           13     6      7    2622
                                             15 COMRAM    13     6      7
                            _Timeout
 ---------------------------------------------------------------------------------
 (1) _i2c_read                                            13     8      5    1264
                                             15 COMRAM    13     8      5
                            _Timeout
 ---------------------------------------------------------------------------------
 (2) _Timeout                                              1     1      0      31
                                             14 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) ___wmul                                               6     2      4     386
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) ___fttol                                             15    11      4     525
                                             14 COMRAM    15    11      4
 ---------------------------------------------------------------------------------
 (1) ___ftsub                                              6     0      6    5151
                                             37 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftadd                                             12     6      6    4787
                                             25 COMRAM    12     6      6
                            ___ftneg (ARG)
                           ___ftpack
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftneg                                              3     0      3     373
                                             22 COMRAM     3     0      3
                           ___ftpack (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     968
                                             37 COMRAM     9     3      6
                            ___ftadd (ARG)
                            ___ftneg (ARG)
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    3366
                                             52 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___awtoft                                             4     1      3    2811
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2524
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              8     4      4     599
                                             29 COMRAM     8     4      4
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _Timer0                                              14    14      0       0
                                              0 COMRAM    14    14      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
     ___fttol (ARG)
   ___awtoft
     ___ftpack
     ___wmul (ARG)
   ___ftadd
     ___ftneg (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftmul (ARG)
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftge
     ___ftadd (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftneg (ARG)
       ___ftpack (ARG)
   ___ftmul
     ___altoft (ARG)
       ___ftpack
     ___ftadd (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___ftpack (ARG)
     ___ftpack (ARG)
   ___ftneg
     ___ftpack (ARG)
   ___ftsub
     ___awtoft (ARG)
       ___ftpack
       ___wmul (ARG)
     ___ftadd (ARG)
       ___ftneg (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)
     ___wmul (ARG)
   ___fttol
   ___wmul
   _i2c_read
     _Timeout
   _i2c_write
     _Timeout
   _init
     _serial_baud
     _serial_init
   _serial_write
     _timeout
   _timer_reset
   _timer_start
   _timer_stop
     ___altoft
       ___ftpack
     ___ftmul
       ___altoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___ftneg (ARG)
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___ftpack (ARG)

 _Timer0 (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     21      21       5       25.8%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     45      59       1       70.6%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      7A      15        0.0%
DATA                 0      0      7A       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sun Oct 01 18:42:58 2017

           ___altoft@exp 001F              _SSPSTATbits 000FC7            ___altoft@sign 0020  
                     l86 087A             ___awdiv@sign 0023      ___wmul@multiplicand 0011  
            __CFG_BORV$0 000000              main@W_data2 0091             __CFG_CP0$OFF 000000  
           __CFG_CP1$OFF 000000             __CFG_CP2$OFF 000000             __CFG_CP3$OFF 000000  
           ___ftadd@exp1 0025             ___ftadd@exp2 0024             ___ftadd@sign 0023  
                    l205 0C2A                      l221 10F4                      l144 07EA  
                    l171 0146                      l172 02B4                      l166 00F6  
                    l176 0500                      l506 0BF6                      l471 05B4  
                    l448 0D74                      l528 1238                      l475 05DE  
                    l486 068E                      l495 06AA             __CFG_CPB$OFF 000000  
           __CFG_CPD$OFF 000000                      _out 004E                      wreg 000FE8  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 003E             ___ftdiv@sign 0043  
           __CFG_WDT$OFF 000000                     l3015 03E8                     l2411 0C40  
                   l3019 045C                     l2413 0C46                     l2405 0C2E  
                   l2511 05C2                     l2407 0C34                     l2361 0D42  
                   l2353 0D04                     l2409 0C3A                     l2417 0C4C  
                   l2363 0D60                     l2355 0D0E                     l3251 0C7C  
                   l3243 0C66                     l2603 09EC                     l2365 0D6A  
                   l2357 0D2C                     l2349 0CF6                     l2541 0648  
                   l2533 061C                     l2517 05EC                     l2701 0782  
                   l3245 0C9A                     l3253 0C86                     l2613 0A14  
                   l2551 067C                     l2543 0652                     l3247 0CBE  
                   l3255 0C90                     l2553 0686                     l2545 065A  
                   l2385 1048                     l2393 105C                     l2713 07EC  
                   l2641 0882                     l3257 0CAA                     l3249 0CD0  
                   l2609 0A04                     l2539 063E                     l2651 08BA  
                   l2635 0864                     l3259 0CB4                     l2483 10C8  
                   l2475 10AE                     l2709 07C0                     l2725 081C  
                   l2653 08CA                     l2645 089A                     l2559 06C6  
                   l2815 1168                     l2903 0A7A                     l2399 1076  
                   l2727 0838                     l2663 08FE                     l2495 0F5C  
                   l2841 0EF8                     l2833 0EDA                     l2569 06F6  
                   l2921 0AE0                     l2673 0938                     l2657 08E2  
                   l2497 0F68                     l2585 09AA                     l2851 0F18  
                   l2843 0EFC                     l2827 0ECA                     l2771 0B6A  
                   l2931 0B08                     l2691 0748                     l2579 0982  
                   l2933 0B14                     l2925 0AF0                     l2685 072A  
                   l2677 0942                     l2669 0920                     l2749 10CC  
                   l2839 0EF0                     l2855 0F22                     l2871 11A6  
                   l2935 0B1A                     l2695 0760                     l2599 09DC  
                   l2777 0B92                     l2859 0F30                     l2883 0E86  
                   l2939 0B30                     l2797 0BD0                     l2879 0E56  
                   l2889 0EB2                     l2979 00FC                     u3010 094A  
                   _LATA 000F89                     u3110 078A                     u3030 0732  
                   _LATB 000F8A                     _LATC 000F8B                     u3200 0840  
                   u3040 0734                     u3016 094C                     _LATD 000F8C  
                   _LATE 000F8D                     u3210 0842                     u2500 1072  
                   u3116 078C                     u3060 0750                     u3301 0B7A  
                   u3150 07F4                     u2510 109A                     u3230 10D4  
                   u3160 07F6                     u3080 0768                     u3240 10D6  
                   u3090 076A                     u3066 0752                     u2551 0580  
                   u3281 0B52                     u2561 0594                     u3451 0A5E  
                   u3470 0A98                     u2910 08D2                     u2830 086C  
                   u2840 086E                     u2761 096A                     u2930 08EA  
                   u3475 0A90                     u2940 08EC                     u2916 08D4  
                   u2860 088A                     u2781 0992                     u2880 08A2  
                   u2890 08A4                     u2866 088C                     u2980 0928  
                   u2986 092A                     i2l68 0DEA             __CFG_WDTPS$1 000000  
           __CFG_PWRT$ON 000000                     _cnt0 004A                     _main 0012  
           ___ftpack@arg 000F                     _init 0FB2             ___ftpack@exp 0012  
                   _time 0052                     fsr0h 000FEA                     fsr1h 000FE2  
                   fsr2h 000FDA                     fsr0l 000FE9                     indf2 000FDF  
                   fsr1l 000FE1                     fsr2l 000FD9                     btemp 005A  
                   prodh 000FF4                     prodl 000FF3                     start 000E  
          __CFG_IESO$OFF 000000            __CFG_MCLRE$ON 000000             ___ftmul@cntr 0033  
           ___param_bank 000000             ___ftmul@sign 0034             ___fttol@exp1 001D  
           ___fttol@lval 0019          __end_of_Timeout 107A                    ?_main 0001  
                  ?_init 0001          __end_of___awdiv 0F3A          __end_of___ftadd 071C  
        __end_of___ftdiv 0C28          __end_of___ftneg 1246          __end_of___ftmul 0A4E  
                  _T0CON 000FD5          ___awdiv@divisor 0020          __end_of___ftsub 1192  
        __end_of___fttol 0B42              i2c_read@ans 001A              i2c_read@cnt 001B  
            i2c_read@num 0014          ___awdiv@counter 0022                    _RCSTA 000FAB  
                  _TMR0H 000FD7                    _TMR0L 000FD6                    _SPBRG 000FAF  
                  _TRISA 000F92                    _TRISB 000F93                    _TRISC 000F94  
                  _TRISD 000F95                    _TRISE 000F96                    _TXREG 000FAD  
                  _TXSTA 000FAC            __CFG_WRT0$OFF 000000            __CFG_WRT1$OFF 000000  
          __CFG_WRT2$OFF 000000            __CFG_WRT3$OFF 000000           __CFG_EBTR0$OFF 000000  
         __CFG_FCMEN$OFF 000000           __CFG_EBTR1$OFF 000000           __CFG_EBTR2$OFF 000000  
         __CFG_EBTR3$OFF 000000            __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000  
          __CFG_WRTD$OFF 000000           __CFG_EBTRB$OFF 000000            ___awtoft@sign 001A  
                  _error 0055            ___ftpack@sign 0013           __CFG_BOREN$OFF 000000  
                  pclath 000FFA                    tablat 000FF5          __end_of_timeout 10CC  
                  status 000FD8          __initialization 11CA             __end_of_main 0570  
           __end_of_init 101E         __end_of_i2c_read 0850           __CFG_OSC$HSPLL 000000  
                 ??_main 0044            ___fttol@sign1 0018                   ??_init 0017  
          __activetblptr 000002         __end_of___altoft 0FB2         ___awdiv@dividend 001E  
       __end_of___awtoft 11CA         __end_of___ftpack 0D94             i2c_read@addr 0010  
           i2c_read@data 0012                   _SSPADD 000FC8                   _SSPBUF 000FC9  
     __size_of_i2c_write 010A           __CFG_XINST$OFF 000000             ?_serial_baud 000F  
                 _Timer0 0008             ?_serial_init 0001                ??_Timeout 000F  
                 ___ftge 0E26                   ___wmul 11FC                ??___awdiv 0022  
              ??___ftadd 0020                ??___ftdiv 003B                ??___ftneg 001A  
              ??___ftmul 002C                ??___ftsub 002C                ??___fttol 0013  
                 clear_0 11E8         ___awdiv@quotient 0024    ___ftmul@f3_as_product 0030  
           __pdataCOMRAM 0058                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                ??_timeout 000F             ?_timer_reset 0001  
    serial_baud@baudrate 000F             ?_timer_start 0001             i2c_write@ans 001A  
           i2c_write@cnt 001B             i2c_write@num 0014               __accesstop 0080  
__end_of__initialization 11EE               ___altoft@c 0017          __CFG_PBADEN$OFF 000000  
             ___ftadd@f1 001A               ___ftadd@f2 001D               ___ftge@ff1 0026  
             ___ftge@ff2 0029            ___rparam_used 000001               ___ftdiv@f1 0035  
             ___ftdiv@f2 0038               ___ftdiv@f3 003F               ___ftneg@f1 0017  
             ___awtoft@c 0017               ___ftmul@f1 0026               ___ftmul@f2 0029  
             ___ftsub@f1 0026               ___ftsub@f2 0029               ___fttol@f1 000F  
         __pcstackCOMRAM 0001        __end_of_i2c_write 095A                ?_i2c_read 0010  
     __CFG_CCP2MX$PORTBE 000000                  ?_Timer0 0001                  ?___ftge 0026  
                ?___wmul 000F                ?___altoft 0017                ?___awtoft 0017  
              ?___ftpack 000F                  _SSPCON1 000FC6                  _SSPCON2 000FC5  
                _SSPSTAT 000FC7               ??_i2c_read 0015                  __Hparam 0000  
                __Lparam 0000          __size_of_Timer0 0E1E                  _Timeout 101E  
        __size_of___ftge 0090            ?_serial_write 0010                  ___awdiv 0EB6  
                ___ftadd 0570                  ___ftdiv 0B42                  ___ftneg 1222  
        __size_of___wmul 0026                  ___ftmul 095A                  ___ftsub 1152  
                ___fttol 0A4E     __size_of_serial_baud 00BE     __size_of_serial_init 0010  
             ??___altoft 001B          __CFG_STVREN$OFF 000000                  __pcinit 11CA  
             ??___awtoft 001A               ??___ftpack 0014                  __ramtop 0600  
                __ptext0 0012                  __ptext1 1112                  __ptext2 095A  
                __ptext3 0F3A                  __ptext4 1268                  __ptext5 1246  
                __ptext6 10CC                  __ptext7 107A                  __ptext8 0FB2  
                __ptext9 1258                  _timeout 107A                  main@MAE 0096  
                main@deg 009D                  main@cnt 0083                  main@tmp 0085  
         __pintcode_body 0D94     end_of_initialization 11EE     __size_of_timer_reset 0012  
   __size_of_timer_start 000C            __Lmediumconst 0000                  int_func 0D94  
         ??_serial_write 0012                  postinc0 000FEE               _timer_stop 1112  
          i2c_write@addr 0010            i2c_write@data 0012                _TRISCbits 000F94  
          i2c_write@stop 0016               main@R_data 00A0               main@W_data 009C  
             main@before 008C           main@turn_value 008F              ___ftdiv@exp 0042  
            timeout@time 0046                _TXSTAbits 000FAC     serial_write@sendData 0010  
            ___ftmul@exp 002F           __end_of_Timer0 0E26           __end_of___ftge 0EB6  
         __end_of___wmul 1222            __pidataCOMRAM 1274      start_initialization 11CA  
              _i2c_write 0850        __size_of_i2c_read 0134                 ??_Timer0 0001  
               ??___ftge 002C                 ??___wmul 0013         __CFG_LPT1OSC$OFF 000000  
            ?_timer_stop 0001        __size_of___altoft 0078        __size_of___awtoft 0038  
      __size_of___ftpack 00AE              __pbssCOMRAM 0046            __pcstackBANK0 0080  
     serial_write@result 0014               ?_i2c_write 0010     __end_of_serial_write 1112  
              _main$1218 0086                _main$1219 0089                 ?_Timeout 0001  
              __pintcode 0008                 ?___awdiv 001E                 ?___ftadd 001A  
               ?___ftdiv 0035                 ?___ftneg 0017                 ?___ftmul 0026  
               ?___ftsub 0026                 ?___fttol 000F                 ?_timeout 0001  
         ___wmul@product 0013                 _LATBbits 000F8A      __size_of_timer_stop 0040  
          ??_serial_baud 0013                 _PIR1bits 000F9E            ??_serial_init 000F  
               _RCONbits 000FD0                main@F3044 0059                main@F3046 0057  
              main@F3048 0058                main@J_deg 0099        ___wmul@multiplier 000F  
            ??_i2c_write 0017            ??_timer_reset 000F            ??_timer_start 000F  
            _INTCON2bits 000FF1                 _i2c_read 071C                 __Hrparam 0000  
               __Lrparam 0000                 Timeout@a 000F         __size_of_Timeout 005C  
       __size_of___awdiv 0084         __size_of___ftadd 01AC         __size_of___ftdiv 00E6  
       __size_of___ftneg 0024                 ___altoft 0F3A         __size_of___ftmul 00F4  
       __size_of___ftsub 0040         __size_of___fttol 00F4                 ___awtoft 1192  
    __end_of_serial_baud 0CE6                 ___ftpack 0CE6      __end_of_serial_init 1268  
  __size_of_serial_write 0046                 __ptext10 0C28                 __ptext11 0850  
               __ptext20 0B42                 __ptext12 071C                 __ptext21 1192  
               __ptext13 101E                 __ptext22 0CE6                 __ptext14 11FC  
               __ptext23 0EB6                 __ptext15 0A4E                 __ptext16 1152  
               __ptext17 0570                 __ptext18 1222                 __ptext19 0E26  
       __size_of_timeout 0052            __size_of_main 055E            __size_of_init 006C  
    __end_of_timer_reset 1258      __end_of_timer_start 1274                 int$flags 005A  
               main@JYRO 0094             _serial_write 10CC                 main@Jyro 0080  
               main@jyro 0092             ??_timer_stop 0035               _INTCONbits 000FF2  
               intlevel2 0000       __end_of_timer_stop 1152              _serial_baud 0C28  
            _serial_init 1258                 timeout@v 000F              _SSPCON2bits 000FC5  
            _timer_reset 1246              _timer_start 1268           i2c_write@start 0015  
